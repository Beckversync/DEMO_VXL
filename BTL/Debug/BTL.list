
BTL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060d4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000874  080061e0  080061e0  000161e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a54  08006a54  000200e0  2**0
                  CONTENTS
  4 .ARM          00000000  08006a54  08006a54  000200e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006a54  08006a54  000200e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a54  08006a54  00016a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a58  08006a58  00016a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e0  20000000  08006a5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ad4  200000e0  08006b3c  000200e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bb4  08006b3c  00020bb4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001957c  00000000  00000000  00020109  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034a4  00000000  00000000  00039685  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001190  00000000  00000000  0003cb30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010a0  00000000  00000000  0003dcc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a0aa  00000000  00000000  0003ed60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016fa2  00000000  00000000  00058e0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008e32f  00000000  00000000  0006fdac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fe0db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d08  00000000  00000000  000fe130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000e0 	.word	0x200000e0
 8000128:	00000000 	.word	0x00000000
 800012c:	080061c8 	.word	0x080061c8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000e4 	.word	0x200000e4
 8000148:	080061c8 	.word	0x080061c8

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <strlen>:
 8000160:	4603      	mov	r3, r0
 8000162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000166:	2a00      	cmp	r2, #0
 8000168:	d1fb      	bne.n	8000162 <strlen+0x2>
 800016a:	1a18      	subs	r0, r3, r0
 800016c:	3801      	subs	r0, #1
 800016e:	4770      	bx	lr

08000170 <ESP_Init>:
char *Terminate = "</body></html>";

/*****************************************************************************************************************************************/

void ESP_Init (char *SSID, char *PASSWD)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b098      	sub	sp, #96	; 0x60
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	6039      	str	r1, [r7, #0]
	char data[80];

	Ringbuf_init();
 800017a:	f001 f913 	bl	80013a4 <Ringbuf_init>

	Uart_sendstring("AT+RST\r\n", wifi_uart);
 800017e:	495d      	ldr	r1, [pc, #372]	; (80002f4 <ESP_Init+0x184>)
 8000180:	485d      	ldr	r0, [pc, #372]	; (80002f8 <ESP_Init+0x188>)
 8000182:	f001 fb26 	bl	80017d2 <Uart_sendstring>
	Uart_sendstring("RESETTING.", pc_uart);
 8000186:	495d      	ldr	r1, [pc, #372]	; (80002fc <ESP_Init+0x18c>)
 8000188:	485d      	ldr	r0, [pc, #372]	; (8000300 <ESP_Init+0x190>)
 800018a:	f001 fb22 	bl	80017d2 <Uart_sendstring>
	for (int i=0; i<5; i++)
 800018e:	2300      	movs	r3, #0
 8000190:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000192:	e00a      	b.n	80001aa <ESP_Init+0x3a>
	{
		Uart_sendstring(".", pc_uart);
 8000194:	4959      	ldr	r1, [pc, #356]	; (80002fc <ESP_Init+0x18c>)
 8000196:	485b      	ldr	r0, [pc, #364]	; (8000304 <ESP_Init+0x194>)
 8000198:	f001 fb1b 	bl	80017d2 <Uart_sendstring>
		HAL_Delay(1000);
 800019c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001a0:	f002 fc22 	bl	80029e8 <HAL_Delay>
	for (int i=0; i<5; i++)
 80001a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80001a6:	3301      	adds	r3, #1
 80001a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80001aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80001ac:	2b04      	cmp	r3, #4
 80001ae:	ddf1      	ble.n	8000194 <ESP_Init+0x24>
	}

	/********* AT **********/
	Uart_sendstring("AT\r\n", wifi_uart);
 80001b0:	4950      	ldr	r1, [pc, #320]	; (80002f4 <ESP_Init+0x184>)
 80001b2:	4855      	ldr	r0, [pc, #340]	; (8000308 <ESP_Init+0x198>)
 80001b4:	f001 fb0d 	bl	80017d2 <Uart_sendstring>
	while(!(Wait_for("AT\r\r\n\r\nOK\r\n", wifi_uart)));
 80001b8:	bf00      	nop
 80001ba:	494e      	ldr	r1, [pc, #312]	; (80002f4 <ESP_Init+0x184>)
 80001bc:	4853      	ldr	r0, [pc, #332]	; (800030c <ESP_Init+0x19c>)
 80001be:	f001 fc15 	bl	80019ec <Wait_for>
 80001c2:	4603      	mov	r3, r0
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d0f8      	beq.n	80001ba <ESP_Init+0x4a>
	Uart_sendstring("AT---->OK\n\n", pc_uart);
 80001c8:	494c      	ldr	r1, [pc, #304]	; (80002fc <ESP_Init+0x18c>)
 80001ca:	4851      	ldr	r0, [pc, #324]	; (8000310 <ESP_Init+0x1a0>)
 80001cc:	f001 fb01 	bl	80017d2 <Uart_sendstring>

	/********* AT+CWMODE=1 **********/
	Uart_sendstring("AT+CWMODE=1\r\n", wifi_uart);
 80001d0:	4948      	ldr	r1, [pc, #288]	; (80002f4 <ESP_Init+0x184>)
 80001d2:	4850      	ldr	r0, [pc, #320]	; (8000314 <ESP_Init+0x1a4>)
 80001d4:	f001 fafd 	bl	80017d2 <Uart_sendstring>
	while (!(Wait_for("AT+CWMODE=1\r\r\n\r\nOK\r\n", wifi_uart)));
 80001d8:	bf00      	nop
 80001da:	4946      	ldr	r1, [pc, #280]	; (80002f4 <ESP_Init+0x184>)
 80001dc:	484e      	ldr	r0, [pc, #312]	; (8000318 <ESP_Init+0x1a8>)
 80001de:	f001 fc05 	bl	80019ec <Wait_for>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d0f8      	beq.n	80001da <ESP_Init+0x6a>
	Uart_sendstring("CW MODE---->1\n\n", pc_uart);
 80001e8:	4944      	ldr	r1, [pc, #272]	; (80002fc <ESP_Init+0x18c>)
 80001ea:	484c      	ldr	r0, [pc, #304]	; (800031c <ESP_Init+0x1ac>)
 80001ec:	f001 faf1 	bl	80017d2 <Uart_sendstring>

	/********* AT+CWJAP="SSID","PASSWD" **********/
	Uart_sendstring("connecting... to the provided AP\n", pc_uart);
 80001f0:	4942      	ldr	r1, [pc, #264]	; (80002fc <ESP_Init+0x18c>)
 80001f2:	484b      	ldr	r0, [pc, #300]	; (8000320 <ESP_Init+0x1b0>)
 80001f4:	f001 faed 	bl	80017d2 <Uart_sendstring>
	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 80001f8:	f107 0008 	add.w	r0, r7, #8
 80001fc:	683b      	ldr	r3, [r7, #0]
 80001fe:	687a      	ldr	r2, [r7, #4]
 8000200:	4948      	ldr	r1, [pc, #288]	; (8000324 <ESP_Init+0x1b4>)
 8000202:	f005 fc37 	bl	8005a74 <siprintf>
	Uart_sendstring(data, wifi_uart);
 8000206:	f107 0308 	add.w	r3, r7, #8
 800020a:	493a      	ldr	r1, [pc, #232]	; (80002f4 <ESP_Init+0x184>)
 800020c:	4618      	mov	r0, r3
 800020e:	f001 fae0 	bl	80017d2 <Uart_sendstring>
	while (!(Wait_for("WIFI GOT IP\r\n\r\nOK\r\n", wifi_uart)));
 8000212:	bf00      	nop
 8000214:	4937      	ldr	r1, [pc, #220]	; (80002f4 <ESP_Init+0x184>)
 8000216:	4844      	ldr	r0, [pc, #272]	; (8000328 <ESP_Init+0x1b8>)
 8000218:	f001 fbe8 	bl	80019ec <Wait_for>
 800021c:	4603      	mov	r3, r0
 800021e:	2b00      	cmp	r3, #0
 8000220:	d0f8      	beq.n	8000214 <ESP_Init+0xa4>
	sprintf (data, "Connected to,\"%s\"\n\n", SSID);
 8000222:	f107 0308 	add.w	r3, r7, #8
 8000226:	687a      	ldr	r2, [r7, #4]
 8000228:	4940      	ldr	r1, [pc, #256]	; (800032c <ESP_Init+0x1bc>)
 800022a:	4618      	mov	r0, r3
 800022c:	f005 fc22 	bl	8005a74 <siprintf>
	Uart_sendstring(data,pc_uart);
 8000230:	f107 0308 	add.w	r3, r7, #8
 8000234:	4931      	ldr	r1, [pc, #196]	; (80002fc <ESP_Init+0x18c>)
 8000236:	4618      	mov	r0, r3
 8000238:	f001 facb 	bl	80017d2 <Uart_sendstring>

	/********* AT+CIFSR **********/
	Uart_sendstring("AT+CIFSR\r\n", wifi_uart);
 800023c:	492d      	ldr	r1, [pc, #180]	; (80002f4 <ESP_Init+0x184>)
 800023e:	483c      	ldr	r0, [pc, #240]	; (8000330 <ESP_Init+0x1c0>)
 8000240:	f001 fac7 	bl	80017d2 <Uart_sendstring>
	while (!(Wait_for("CIFSR:STAIP,\"", wifi_uart)));
 8000244:	bf00      	nop
 8000246:	492b      	ldr	r1, [pc, #172]	; (80002f4 <ESP_Init+0x184>)
 8000248:	483a      	ldr	r0, [pc, #232]	; (8000334 <ESP_Init+0x1c4>)
 800024a:	f001 fbcf 	bl	80019ec <Wait_for>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d0f8      	beq.n	8000246 <ESP_Init+0xd6>
	while (!(Copy_upto("\"",buffer, wifi_uart)));
 8000254:	bf00      	nop
 8000256:	4a27      	ldr	r2, [pc, #156]	; (80002f4 <ESP_Init+0x184>)
 8000258:	4937      	ldr	r1, [pc, #220]	; (8000338 <ESP_Init+0x1c8>)
 800025a:	4838      	ldr	r0, [pc, #224]	; (800033c <ESP_Init+0x1cc>)
 800025c:	f001 fb42 	bl	80018e4 <Copy_upto>
 8000260:	4603      	mov	r3, r0
 8000262:	2b00      	cmp	r3, #0
 8000264:	d0f7      	beq.n	8000256 <ESP_Init+0xe6>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 8000266:	bf00      	nop
 8000268:	4922      	ldr	r1, [pc, #136]	; (80002f4 <ESP_Init+0x184>)
 800026a:	4835      	ldr	r0, [pc, #212]	; (8000340 <ESP_Init+0x1d0>)
 800026c:	f001 fbbe 	bl	80019ec <Wait_for>
 8000270:	4603      	mov	r3, r0
 8000272:	2b00      	cmp	r3, #0
 8000274:	d0f8      	beq.n	8000268 <ESP_Init+0xf8>
	int len = strlen (buffer);
 8000276:	4830      	ldr	r0, [pc, #192]	; (8000338 <ESP_Init+0x1c8>)
 8000278:	f7ff ff72 	bl	8000160 <strlen>
 800027c:	4603      	mov	r3, r0
 800027e:	65bb      	str	r3, [r7, #88]	; 0x58
	buffer[len-1] = '\0';
 8000280:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000282:	3b01      	subs	r3, #1
 8000284:	4a2c      	ldr	r2, [pc, #176]	; (8000338 <ESP_Init+0x1c8>)
 8000286:	2100      	movs	r1, #0
 8000288:	54d1      	strb	r1, [r2, r3]
	sprintf (data, "IP ADDR: %s\n\n", buffer);
 800028a:	f107 0308 	add.w	r3, r7, #8
 800028e:	4a2a      	ldr	r2, [pc, #168]	; (8000338 <ESP_Init+0x1c8>)
 8000290:	492c      	ldr	r1, [pc, #176]	; (8000344 <ESP_Init+0x1d4>)
 8000292:	4618      	mov	r0, r3
 8000294:	f005 fbee 	bl	8005a74 <siprintf>
	Uart_sendstring(data, pc_uart);
 8000298:	f107 0308 	add.w	r3, r7, #8
 800029c:	4917      	ldr	r1, [pc, #92]	; (80002fc <ESP_Init+0x18c>)
 800029e:	4618      	mov	r0, r3
 80002a0:	f001 fa97 	bl	80017d2 <Uart_sendstring>

	Uart_sendstring("AT+CIPMUX=1\r\n", wifi_uart);
 80002a4:	4913      	ldr	r1, [pc, #76]	; (80002f4 <ESP_Init+0x184>)
 80002a6:	4828      	ldr	r0, [pc, #160]	; (8000348 <ESP_Init+0x1d8>)
 80002a8:	f001 fa93 	bl	80017d2 <Uart_sendstring>
	while (!(Wait_for("AT+CIPMUX=1\r\r\n\r\nOK\r\n", wifi_uart)));
 80002ac:	bf00      	nop
 80002ae:	4911      	ldr	r1, [pc, #68]	; (80002f4 <ESP_Init+0x184>)
 80002b0:	4826      	ldr	r0, [pc, #152]	; (800034c <ESP_Init+0x1dc>)
 80002b2:	f001 fb9b 	bl	80019ec <Wait_for>
 80002b6:	4603      	mov	r3, r0
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d0f8      	beq.n	80002ae <ESP_Init+0x13e>
	Uart_sendstring("CIPMUX---->OK\n\n", pc_uart);
 80002bc:	490f      	ldr	r1, [pc, #60]	; (80002fc <ESP_Init+0x18c>)
 80002be:	4824      	ldr	r0, [pc, #144]	; (8000350 <ESP_Init+0x1e0>)
 80002c0:	f001 fa87 	bl	80017d2 <Uart_sendstring>

	Uart_sendstring("AT+CIPSERVER=1,80\r\n", wifi_uart);
 80002c4:	490b      	ldr	r1, [pc, #44]	; (80002f4 <ESP_Init+0x184>)
 80002c6:	4823      	ldr	r0, [pc, #140]	; (8000354 <ESP_Init+0x1e4>)
 80002c8:	f001 fa83 	bl	80017d2 <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 80002cc:	bf00      	nop
 80002ce:	4909      	ldr	r1, [pc, #36]	; (80002f4 <ESP_Init+0x184>)
 80002d0:	481b      	ldr	r0, [pc, #108]	; (8000340 <ESP_Init+0x1d0>)
 80002d2:	f001 fb8b 	bl	80019ec <Wait_for>
 80002d6:	4603      	mov	r3, r0
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d0f8      	beq.n	80002ce <ESP_Init+0x15e>
	Uart_sendstring("CIPSERVER---->OK\n\n", pc_uart);
 80002dc:	4907      	ldr	r1, [pc, #28]	; (80002fc <ESP_Init+0x18c>)
 80002de:	481e      	ldr	r0, [pc, #120]	; (8000358 <ESP_Init+0x1e8>)
 80002e0:	f001 fa77 	bl	80017d2 <Uart_sendstring>

	Uart_sendstring("Now Connect to the IP ADRESS\n\n", pc_uart);
 80002e4:	4905      	ldr	r1, [pc, #20]	; (80002fc <ESP_Init+0x18c>)
 80002e6:	481d      	ldr	r0, [pc, #116]	; (800035c <ESP_Init+0x1ec>)
 80002e8:	f001 fa73 	bl	80017d2 <Uart_sendstring>
}
 80002ec:	bf00      	nop
 80002ee:	3760      	adds	r7, #96	; 0x60
 80002f0:	46bd      	mov	sp, r7
 80002f2:	bd80      	pop	{r7, pc}
 80002f4:	20000a68 	.word	0x20000a68
 80002f8:	08006618 	.word	0x08006618
 80002fc:	200009ec 	.word	0x200009ec
 8000300:	08006624 	.word	0x08006624
 8000304:	08006630 	.word	0x08006630
 8000308:	08006634 	.word	0x08006634
 800030c:	0800663c 	.word	0x0800663c
 8000310:	08006648 	.word	0x08006648
 8000314:	08006654 	.word	0x08006654
 8000318:	08006664 	.word	0x08006664
 800031c:	0800667c 	.word	0x0800667c
 8000320:	0800668c 	.word	0x0800668c
 8000324:	080066b0 	.word	0x080066b0
 8000328:	080066c8 	.word	0x080066c8
 800032c:	080066dc 	.word	0x080066dc
 8000330:	080066f0 	.word	0x080066f0
 8000334:	080066fc 	.word	0x080066fc
 8000338:	2000095c 	.word	0x2000095c
 800033c:	0800670c 	.word	0x0800670c
 8000340:	08006710 	.word	0x08006710
 8000344:	08006718 	.word	0x08006718
 8000348:	08006728 	.word	0x08006728
 800034c:	08006738 	.word	0x08006738
 8000350:	08006750 	.word	0x08006750
 8000354:	08006760 	.word	0x08006760
 8000358:	08006774 	.word	0x08006774
 800035c:	08006788 	.word	0x08006788

08000360 <Server_Send>:

/*****************************************************************************************************************************************/

int Server_Send (char *str, int Link_ID)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b098      	sub	sp, #96	; 0x60
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
 8000368:	6039      	str	r1, [r7, #0]
	int len = strlen (str);
 800036a:	6878      	ldr	r0, [r7, #4]
 800036c:	f7ff fef8 	bl	8000160 <strlen>
 8000370:	4603      	mov	r3, r0
 8000372:	65fb      	str	r3, [r7, #92]	; 0x5c
	char data[80];
	sprintf (data, "AT+CIPSEND=%d,%d\r\n", Link_ID, len);
 8000374:	f107 000c 	add.w	r0, r7, #12
 8000378:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800037a:	683a      	ldr	r2, [r7, #0]
 800037c:	491a      	ldr	r1, [pc, #104]	; (80003e8 <Server_Send+0x88>)
 800037e:	f005 fb79 	bl	8005a74 <siprintf>
	Uart_sendstring(data, wifi_uart);
 8000382:	f107 030c 	add.w	r3, r7, #12
 8000386:	4919      	ldr	r1, [pc, #100]	; (80003ec <Server_Send+0x8c>)
 8000388:	4618      	mov	r0, r3
 800038a:	f001 fa22 	bl	80017d2 <Uart_sendstring>
	while (!(Wait_for(">", wifi_uart)));
 800038e:	bf00      	nop
 8000390:	4916      	ldr	r1, [pc, #88]	; (80003ec <Server_Send+0x8c>)
 8000392:	4817      	ldr	r0, [pc, #92]	; (80003f0 <Server_Send+0x90>)
 8000394:	f001 fb2a 	bl	80019ec <Wait_for>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d0f8      	beq.n	8000390 <Server_Send+0x30>
	Uart_sendstring (str, wifi_uart);
 800039e:	4913      	ldr	r1, [pc, #76]	; (80003ec <Server_Send+0x8c>)
 80003a0:	6878      	ldr	r0, [r7, #4]
 80003a2:	f001 fa16 	bl	80017d2 <Uart_sendstring>
	while (!(Wait_for("SEND OK", wifi_uart)));
 80003a6:	bf00      	nop
 80003a8:	4910      	ldr	r1, [pc, #64]	; (80003ec <Server_Send+0x8c>)
 80003aa:	4812      	ldr	r0, [pc, #72]	; (80003f4 <Server_Send+0x94>)
 80003ac:	f001 fb1e 	bl	80019ec <Wait_for>
 80003b0:	4603      	mov	r3, r0
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d0f8      	beq.n	80003a8 <Server_Send+0x48>
	sprintf (data, "AT+CIPCLOSE=5\r\n");
 80003b6:	f107 030c 	add.w	r3, r7, #12
 80003ba:	490f      	ldr	r1, [pc, #60]	; (80003f8 <Server_Send+0x98>)
 80003bc:	4618      	mov	r0, r3
 80003be:	f005 fb59 	bl	8005a74 <siprintf>
	Uart_sendstring(data, wifi_uart);
 80003c2:	f107 030c 	add.w	r3, r7, #12
 80003c6:	4909      	ldr	r1, [pc, #36]	; (80003ec <Server_Send+0x8c>)
 80003c8:	4618      	mov	r0, r3
 80003ca:	f001 fa02 	bl	80017d2 <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 80003ce:	bf00      	nop
 80003d0:	4906      	ldr	r1, [pc, #24]	; (80003ec <Server_Send+0x8c>)
 80003d2:	480a      	ldr	r0, [pc, #40]	; (80003fc <Server_Send+0x9c>)
 80003d4:	f001 fb0a 	bl	80019ec <Wait_for>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d0f8      	beq.n	80003d0 <Server_Send+0x70>
	return 1;
 80003de:	2301      	movs	r3, #1
}
 80003e0:	4618      	mov	r0, r3
 80003e2:	3760      	adds	r7, #96	; 0x60
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	080067a8 	.word	0x080067a8
 80003ec:	20000a68 	.word	0x20000a68
 80003f0:	080067bc 	.word	0x080067bc
 80003f4:	080067c0 	.word	0x080067c0
 80003f8:	080067c8 	.word	0x080067c8
 80003fc:	08006710 	.word	0x08006710

08000400 <Server_Handle>:

/*****************************************************************************************************************************************/

void Server_Handle (char *str, int Link_ID)
{
 8000400:	b5b0      	push	{r4, r5, r7, lr}
 8000402:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 8000406:	af00      	add	r7, sp, #0
 8000408:	1d3b      	adds	r3, r7, #4
 800040a:	6018      	str	r0, [r3, #0]
 800040c:	463b      	mov	r3, r7
 800040e:	6019      	str	r1, [r3, #0]
	char datatosend[1024] = {0};
 8000410:	f107 0308 	add.w	r3, r7, #8
 8000414:	2200      	movs	r2, #0
 8000416:	601a      	str	r2, [r3, #0]
 8000418:	3304      	adds	r3, #4
 800041a:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 800041e:	2100      	movs	r1, #0
 8000420:	4618      	mov	r0, r3
 8000422:	f005 fa35 	bl	8005890 <memset>

	if (!(strcmp (str, "/button1")))
 8000426:	1d3b      	adds	r3, r7, #4
 8000428:	4968      	ldr	r1, [pc, #416]	; (80005cc <Server_Handle+0x1cc>)
 800042a:	6818      	ldr	r0, [r3, #0]
 800042c:	f7ff fe8e 	bl	800014c <strcmp>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d12c      	bne.n	8000490 <Server_Handle+0x90>
	{
		// Handle button 1 press
		sprintf (datatosend, Basic_inclusion);
 8000436:	4b66      	ldr	r3, [pc, #408]	; (80005d0 <Server_Handle+0x1d0>)
 8000438:	681a      	ldr	r2, [r3, #0]
 800043a:	f107 0308 	add.w	r3, r7, #8
 800043e:	4611      	mov	r1, r2
 8000440:	4618      	mov	r0, r3
 8000442:	f005 fb17 	bl	8005a74 <siprintf>
		strcat(datatosend, "<p>Button 1 pressed</p>");
 8000446:	f107 0308 	add.w	r3, r7, #8
 800044a:	4618      	mov	r0, r3
 800044c:	f7ff fe88 	bl	8000160 <strlen>
 8000450:	4603      	mov	r3, r0
 8000452:	461a      	mov	r2, r3
 8000454:	f107 0308 	add.w	r3, r7, #8
 8000458:	4413      	add	r3, r2
 800045a:	4a5e      	ldr	r2, [pc, #376]	; (80005d4 <Server_Handle+0x1d4>)
 800045c:	461d      	mov	r5, r3
 800045e:	4614      	mov	r4, r2
 8000460:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000462:	6028      	str	r0, [r5, #0]
 8000464:	6069      	str	r1, [r5, #4]
 8000466:	60aa      	str	r2, [r5, #8]
 8000468:	60eb      	str	r3, [r5, #12]
 800046a:	cc03      	ldmia	r4!, {r0, r1}
 800046c:	6128      	str	r0, [r5, #16]
 800046e:	6169      	str	r1, [r5, #20]
		strcat(datatosend, Terminate);
 8000470:	4b59      	ldr	r3, [pc, #356]	; (80005d8 <Server_Handle+0x1d8>)
 8000472:	681a      	ldr	r2, [r3, #0]
 8000474:	f107 0308 	add.w	r3, r7, #8
 8000478:	4611      	mov	r1, r2
 800047a:	4618      	mov	r0, r3
 800047c:	f005 fb1a 	bl	8005ab4 <strcat>
		Server_Send(datatosend, Link_ID);
 8000480:	463b      	mov	r3, r7
 8000482:	f107 0208 	add.w	r2, r7, #8
 8000486:	6819      	ldr	r1, [r3, #0]
 8000488:	4610      	mov	r0, r2
 800048a:	f7ff ff69 	bl	8000360 <Server_Send>
		strcat(datatosend, Button2);
		strcat(datatosend, Button3);
		strcat(datatosend, Terminate);
		Server_Send(datatosend, Link_ID);
	}
}
 800048e:	e098      	b.n	80005c2 <Server_Handle+0x1c2>
	else if (!(strcmp (str, "/button2")))
 8000490:	1d3b      	adds	r3, r7, #4
 8000492:	4952      	ldr	r1, [pc, #328]	; (80005dc <Server_Handle+0x1dc>)
 8000494:	6818      	ldr	r0, [r3, #0]
 8000496:	f7ff fe59 	bl	800014c <strcmp>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d12c      	bne.n	80004fa <Server_Handle+0xfa>
		sprintf (datatosend, Basic_inclusion);
 80004a0:	4b4b      	ldr	r3, [pc, #300]	; (80005d0 <Server_Handle+0x1d0>)
 80004a2:	681a      	ldr	r2, [r3, #0]
 80004a4:	f107 0308 	add.w	r3, r7, #8
 80004a8:	4611      	mov	r1, r2
 80004aa:	4618      	mov	r0, r3
 80004ac:	f005 fae2 	bl	8005a74 <siprintf>
		strcat(datatosend, "<p>Button 2 pressed</p>");
 80004b0:	f107 0308 	add.w	r3, r7, #8
 80004b4:	4618      	mov	r0, r3
 80004b6:	f7ff fe53 	bl	8000160 <strlen>
 80004ba:	4603      	mov	r3, r0
 80004bc:	461a      	mov	r2, r3
 80004be:	f107 0308 	add.w	r3, r7, #8
 80004c2:	4413      	add	r3, r2
 80004c4:	4a46      	ldr	r2, [pc, #280]	; (80005e0 <Server_Handle+0x1e0>)
 80004c6:	461d      	mov	r5, r3
 80004c8:	4614      	mov	r4, r2
 80004ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80004cc:	6028      	str	r0, [r5, #0]
 80004ce:	6069      	str	r1, [r5, #4]
 80004d0:	60aa      	str	r2, [r5, #8]
 80004d2:	60eb      	str	r3, [r5, #12]
 80004d4:	cc03      	ldmia	r4!, {r0, r1}
 80004d6:	6128      	str	r0, [r5, #16]
 80004d8:	6169      	str	r1, [r5, #20]
		strcat(datatosend, Terminate);
 80004da:	4b3f      	ldr	r3, [pc, #252]	; (80005d8 <Server_Handle+0x1d8>)
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	f107 0308 	add.w	r3, r7, #8
 80004e2:	4611      	mov	r1, r2
 80004e4:	4618      	mov	r0, r3
 80004e6:	f005 fae5 	bl	8005ab4 <strcat>
		Server_Send(datatosend, Link_ID);
 80004ea:	463b      	mov	r3, r7
 80004ec:	f107 0208 	add.w	r2, r7, #8
 80004f0:	6819      	ldr	r1, [r3, #0]
 80004f2:	4610      	mov	r0, r2
 80004f4:	f7ff ff34 	bl	8000360 <Server_Send>
}
 80004f8:	e063      	b.n	80005c2 <Server_Handle+0x1c2>
	else if (!(strcmp (str, "/button3")))
 80004fa:	1d3b      	adds	r3, r7, #4
 80004fc:	4939      	ldr	r1, [pc, #228]	; (80005e4 <Server_Handle+0x1e4>)
 80004fe:	6818      	ldr	r0, [r3, #0]
 8000500:	f7ff fe24 	bl	800014c <strcmp>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d12c      	bne.n	8000564 <Server_Handle+0x164>
		sprintf (datatosend, Basic_inclusion);
 800050a:	4b31      	ldr	r3, [pc, #196]	; (80005d0 <Server_Handle+0x1d0>)
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	f107 0308 	add.w	r3, r7, #8
 8000512:	4611      	mov	r1, r2
 8000514:	4618      	mov	r0, r3
 8000516:	f005 faad 	bl	8005a74 <siprintf>
		strcat(datatosend, "<p>Button 3 pressed</p>");
 800051a:	f107 0308 	add.w	r3, r7, #8
 800051e:	4618      	mov	r0, r3
 8000520:	f7ff fe1e 	bl	8000160 <strlen>
 8000524:	4603      	mov	r3, r0
 8000526:	461a      	mov	r2, r3
 8000528:	f107 0308 	add.w	r3, r7, #8
 800052c:	4413      	add	r3, r2
 800052e:	4a2e      	ldr	r2, [pc, #184]	; (80005e8 <Server_Handle+0x1e8>)
 8000530:	461d      	mov	r5, r3
 8000532:	4614      	mov	r4, r2
 8000534:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000536:	6028      	str	r0, [r5, #0]
 8000538:	6069      	str	r1, [r5, #4]
 800053a:	60aa      	str	r2, [r5, #8]
 800053c:	60eb      	str	r3, [r5, #12]
 800053e:	cc03      	ldmia	r4!, {r0, r1}
 8000540:	6128      	str	r0, [r5, #16]
 8000542:	6169      	str	r1, [r5, #20]
		strcat(datatosend, Terminate);
 8000544:	4b24      	ldr	r3, [pc, #144]	; (80005d8 <Server_Handle+0x1d8>)
 8000546:	681a      	ldr	r2, [r3, #0]
 8000548:	f107 0308 	add.w	r3, r7, #8
 800054c:	4611      	mov	r1, r2
 800054e:	4618      	mov	r0, r3
 8000550:	f005 fab0 	bl	8005ab4 <strcat>
		Server_Send(datatosend, Link_ID);
 8000554:	463b      	mov	r3, r7
 8000556:	f107 0208 	add.w	r2, r7, #8
 800055a:	6819      	ldr	r1, [r3, #0]
 800055c:	4610      	mov	r0, r2
 800055e:	f7ff feff 	bl	8000360 <Server_Send>
}
 8000562:	e02e      	b.n	80005c2 <Server_Handle+0x1c2>
		sprintf (datatosend, Basic_inclusion);
 8000564:	4b1a      	ldr	r3, [pc, #104]	; (80005d0 <Server_Handle+0x1d0>)
 8000566:	681a      	ldr	r2, [r3, #0]
 8000568:	f107 0308 	add.w	r3, r7, #8
 800056c:	4611      	mov	r1, r2
 800056e:	4618      	mov	r0, r3
 8000570:	f005 fa80 	bl	8005a74 <siprintf>
		strcat(datatosend, Button1);
 8000574:	4b1d      	ldr	r3, [pc, #116]	; (80005ec <Server_Handle+0x1ec>)
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	f107 0308 	add.w	r3, r7, #8
 800057c:	4611      	mov	r1, r2
 800057e:	4618      	mov	r0, r3
 8000580:	f005 fa98 	bl	8005ab4 <strcat>
		strcat(datatosend, Button2);
 8000584:	4b1a      	ldr	r3, [pc, #104]	; (80005f0 <Server_Handle+0x1f0>)
 8000586:	681a      	ldr	r2, [r3, #0]
 8000588:	f107 0308 	add.w	r3, r7, #8
 800058c:	4611      	mov	r1, r2
 800058e:	4618      	mov	r0, r3
 8000590:	f005 fa90 	bl	8005ab4 <strcat>
		strcat(datatosend, Button3);
 8000594:	4b17      	ldr	r3, [pc, #92]	; (80005f4 <Server_Handle+0x1f4>)
 8000596:	681a      	ldr	r2, [r3, #0]
 8000598:	f107 0308 	add.w	r3, r7, #8
 800059c:	4611      	mov	r1, r2
 800059e:	4618      	mov	r0, r3
 80005a0:	f005 fa88 	bl	8005ab4 <strcat>
		strcat(datatosend, Terminate);
 80005a4:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <Server_Handle+0x1d8>)
 80005a6:	681a      	ldr	r2, [r3, #0]
 80005a8:	f107 0308 	add.w	r3, r7, #8
 80005ac:	4611      	mov	r1, r2
 80005ae:	4618      	mov	r0, r3
 80005b0:	f005 fa80 	bl	8005ab4 <strcat>
		Server_Send(datatosend, Link_ID);
 80005b4:	463b      	mov	r3, r7
 80005b6:	f107 0208 	add.w	r2, r7, #8
 80005ba:	6819      	ldr	r1, [r3, #0]
 80005bc:	4610      	mov	r0, r2
 80005be:	f7ff fecf 	bl	8000360 <Server_Send>
}
 80005c2:	bf00      	nop
 80005c4:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bdb0      	pop	{r4, r5, r7, pc}
 80005cc:	080067d8 	.word	0x080067d8
 80005d0:	20000000 	.word	0x20000000
 80005d4:	080067e4 	.word	0x080067e4
 80005d8:	20000010 	.word	0x20000010
 80005dc:	080067fc 	.word	0x080067fc
 80005e0:	08006808 	.word	0x08006808
 80005e4:	08006820 	.word	0x08006820
 80005e8:	0800682c 	.word	0x0800682c
 80005ec:	20000004 	.word	0x20000004
 80005f0:	20000008 	.word	0x20000008
 80005f4:	2000000c 	.word	0x2000000c

080005f8 <Server_Start>:

/*****************************************************************************************************************************************/

void Server_Start (void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b092      	sub	sp, #72	; 0x48
 80005fc:	af00      	add	r7, sp, #0
	char buftocopyinto[64] = {0};
 80005fe:	2300      	movs	r3, #0
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	f107 030c 	add.w	r3, r7, #12
 8000606:	223c      	movs	r2, #60	; 0x3c
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f005 f940 	bl	8005890 <memset>
	char Link_ID;
	while (!(Get_after("+IPD,", 1, &Link_ID, wifi_uart)));
 8000610:	bf00      	nop
 8000612:	1dfa      	adds	r2, r7, #7
 8000614:	4b26      	ldr	r3, [pc, #152]	; (80006b0 <Server_Start+0xb8>)
 8000616:	2101      	movs	r1, #1
 8000618:	4826      	ldr	r0, [pc, #152]	; (80006b4 <Server_Start+0xbc>)
 800061a:	f001 f8ab 	bl	8001774 <Get_after>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d0f6      	beq.n	8000612 <Server_Start+0x1a>
	Link_ID -= 48;
 8000624:	79fb      	ldrb	r3, [r7, #7]
 8000626:	3b30      	subs	r3, #48	; 0x30
 8000628:	b2db      	uxtb	r3, r3
 800062a:	71fb      	strb	r3, [r7, #7]
	while (!(Copy_upto(" HTTP/1.1", buftocopyinto, wifi_uart)));
 800062c:	bf00      	nop
 800062e:	f107 0308 	add.w	r3, r7, #8
 8000632:	4a1f      	ldr	r2, [pc, #124]	; (80006b0 <Server_Start+0xb8>)
 8000634:	4619      	mov	r1, r3
 8000636:	4820      	ldr	r0, [pc, #128]	; (80006b8 <Server_Start+0xc0>)
 8000638:	f001 f954 	bl	80018e4 <Copy_upto>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d0f5      	beq.n	800062e <Server_Start+0x36>
	if (Look_for("/button1", buftocopyinto) == 1)
 8000642:	f107 0308 	add.w	r3, r7, #8
 8000646:	4619      	mov	r1, r3
 8000648:	481c      	ldr	r0, [pc, #112]	; (80006bc <Server_Start+0xc4>)
 800064a:	f000 fef1 	bl	8001430 <Look_for>
 800064e:	4603      	mov	r3, r0
 8000650:	2b01      	cmp	r3, #1
 8000652:	d105      	bne.n	8000660 <Server_Start+0x68>
	{
		Server_Handle("/button1", Link_ID);
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	4619      	mov	r1, r3
 8000658:	4818      	ldr	r0, [pc, #96]	; (80006bc <Server_Start+0xc4>)
 800065a:	f7ff fed1 	bl	8000400 <Server_Handle>
	}
	else
	{
		Server_Handle("/ ", Link_ID);
	}
}
 800065e:	e022      	b.n	80006a6 <Server_Start+0xae>
	else if (Look_for("/button2", buftocopyinto) == 1)
 8000660:	f107 0308 	add.w	r3, r7, #8
 8000664:	4619      	mov	r1, r3
 8000666:	4816      	ldr	r0, [pc, #88]	; (80006c0 <Server_Start+0xc8>)
 8000668:	f000 fee2 	bl	8001430 <Look_for>
 800066c:	4603      	mov	r3, r0
 800066e:	2b01      	cmp	r3, #1
 8000670:	d105      	bne.n	800067e <Server_Start+0x86>
		Server_Handle("/button2", Link_ID);
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	4619      	mov	r1, r3
 8000676:	4812      	ldr	r0, [pc, #72]	; (80006c0 <Server_Start+0xc8>)
 8000678:	f7ff fec2 	bl	8000400 <Server_Handle>
}
 800067c:	e013      	b.n	80006a6 <Server_Start+0xae>
	else if (Look_for("/button3", buftocopyinto) == 1)
 800067e:	f107 0308 	add.w	r3, r7, #8
 8000682:	4619      	mov	r1, r3
 8000684:	480f      	ldr	r0, [pc, #60]	; (80006c4 <Server_Start+0xcc>)
 8000686:	f000 fed3 	bl	8001430 <Look_for>
 800068a:	4603      	mov	r3, r0
 800068c:	2b01      	cmp	r3, #1
 800068e:	d105      	bne.n	800069c <Server_Start+0xa4>
		Server_Handle("/button3", Link_ID);
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	4619      	mov	r1, r3
 8000694:	480b      	ldr	r0, [pc, #44]	; (80006c4 <Server_Start+0xcc>)
 8000696:	f7ff feb3 	bl	8000400 <Server_Handle>
}
 800069a:	e004      	b.n	80006a6 <Server_Start+0xae>
		Server_Handle("/ ", Link_ID);
 800069c:	79fb      	ldrb	r3, [r7, #7]
 800069e:	4619      	mov	r1, r3
 80006a0:	4809      	ldr	r0, [pc, #36]	; (80006c8 <Server_Start+0xd0>)
 80006a2:	f7ff fead 	bl	8000400 <Server_Handle>
}
 80006a6:	bf00      	nop
 80006a8:	3748      	adds	r7, #72	; 0x48
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000a68 	.word	0x20000a68
 80006b4:	08006844 	.word	0x08006844
 80006b8:	0800684c 	.word	0x0800684c
 80006bc:	080067d8 	.word	0x080067d8
 80006c0:	080067fc 	.word	0x080067fc
 80006c4:	08006820 	.word	0x08006820
 80006c8:	08006858 	.word	0x08006858

080006cc <switchAutoState>:


// ======================= CHẾ ĐỘ TỰ ĐỘNG =======================


void switchAutoState(int newState, int mainTime, int sideTime) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	607a      	str	r2, [r7, #4]
    autoStatus = newState;
 80006d8:	4a07      	ldr	r2, [pc, #28]	; (80006f8 <switchAutoState+0x2c>)
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	6013      	str	r3, [r2, #0]
    clock_counter_main = mainTime;
 80006de:	4a07      	ldr	r2, [pc, #28]	; (80006fc <switchAutoState+0x30>)
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	6013      	str	r3, [r2, #0]
    clock_counter_side = sideTime;
 80006e4:	4a06      	ldr	r2, [pc, #24]	; (8000700 <switchAutoState+0x34>)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	6013      	str	r3, [r2, #0]
    clearRoadLed();
 80006ea:	f000 fe55 	bl	8001398 <clearRoadLed>
}
 80006ee:	bf00      	nop
 80006f0:	3710      	adds	r7, #16
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	20000060 	.word	0x20000060
 80006fc:	20000948 	.word	0x20000948
 8000700:	2000094c 	.word	0x2000094c

08000704 <fsm_traffic_auto_mode>:

void fsm_traffic_auto_mode(void) {
 8000704:	b580      	push	{r7, lr}
 8000706:	b0a0      	sub	sp, #128	; 0x80
 8000708:	af00      	add	r7, sp, #0


    switch (autoStatus) {
 800070a:	4bbd      	ldr	r3, [pc, #756]	; (8000a00 <fsm_traffic_auto_mode+0x2fc>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	2b0a      	cmp	r3, #10
 8000710:	f200 8171 	bhi.w	80009f6 <fsm_traffic_auto_mode+0x2f2>
 8000714:	a201      	add	r2, pc, #4	; (adr r2, 800071c <fsm_traffic_auto_mode+0x18>)
 8000716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800071a:	bf00      	nop
 800071c:	080009f7 	.word	0x080009f7
 8000720:	08000763 	.word	0x08000763
 8000724:	0800080b 	.word	0x0800080b
 8000728:	080008b1 	.word	0x080008b1
 800072c:	08000957 	.word	0x08000957
 8000730:	080009f7 	.word	0x080009f7
 8000734:	080009f7 	.word	0x080009f7
 8000738:	080009f7 	.word	0x080009f7
 800073c:	080009f7 	.word	0x080009f7
 8000740:	080009f7 	.word	0x080009f7
 8000744:	08000749 	.word	0x08000749
        case OFF:
            break;
        case INIT:
            switchAutoState(RED_GREEN, timeRed, timeGreen);
 8000748:	4bae      	ldr	r3, [pc, #696]	; (8000a04 <fsm_traffic_auto_mode+0x300>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4aae      	ldr	r2, [pc, #696]	; (8000a08 <fsm_traffic_auto_mode+0x304>)
 800074e:	6812      	ldr	r2, [r2, #0]
 8000750:	4619      	mov	r1, r3
 8000752:	2001      	movs	r0, #1
 8000754:	f7ff ffba 	bl	80006cc <switchAutoState>
            settimer1(1, 50);
 8000758:	2132      	movs	r1, #50	; 0x32
 800075a:	2001      	movs	r0, #1
 800075c:	f001 feb8 	bl	80024d0 <settimer1>
            break;
 8000760:	e167      	b.n	8000a32 <fsm_traffic_auto_mode+0x32e>
        case RED_GREEN:
            turnOnRed1();
 8000762:	f000 fd4b 	bl	80011fc <turnOnRed1>
            turnOnGreen2();
 8000766:	f000 fd97 	bl	8001298 <turnOnGreen2>
            if (timerFlag[1] == 1) {
 800076a:	4ba8      	ldr	r3, [pc, #672]	; (8000a0c <fsm_traffic_auto_mode+0x308>)
 800076c:	685b      	ldr	r3, [r3, #4]
 800076e:	2b01      	cmp	r3, #1
 8000770:	d139      	bne.n	80007e6 <fsm_traffic_auto_mode+0xe2>
                if (clock_counter_side >= 0) {
 8000772:	4ba7      	ldr	r3, [pc, #668]	; (8000a10 <fsm_traffic_auto_mode+0x30c>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	db30      	blt.n	80007dc <fsm_traffic_auto_mode+0xd8>
                	lcd_clear_display();
 800077a:	f001 fb0a 	bl	8001d92 <lcd_clear_display>
                	HAL_Delay(10);
 800077e:	200a      	movs	r0, #10
 8000780:	f002 f932 	bl	80029e8 <HAL_Delay>
                	char buffer[16];
                	snprintf(buffer, sizeof(buffer), "RED: %d", clock_counter_main);
 8000784:	4ba3      	ldr	r3, [pc, #652]	; (8000a14 <fsm_traffic_auto_mode+0x310>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	f107 0070 	add.w	r0, r7, #112	; 0x70
 800078c:	4aa2      	ldr	r2, [pc, #648]	; (8000a18 <fsm_traffic_auto_mode+0x314>)
 800078e:	2110      	movs	r1, #16
 8000790:	f005 f93c 	bl	8005a0c <sniprintf>
                	lcd_goto_XY(1, 0);
 8000794:	2100      	movs	r1, #0
 8000796:	2001      	movs	r0, #1
 8000798:	f001 fb02 	bl	8001da0 <lcd_goto_XY>
                	lcd_send_string(buffer);
 800079c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80007a0:	4618      	mov	r0, r3
 80007a2:	f001 fae1 	bl	8001d68 <lcd_send_string>
                	char buffer1[16];
                	snprintf(buffer1, sizeof(buffer1), "GREEN: %d", clock_counter_side);
 80007a6:	4b9a      	ldr	r3, [pc, #616]	; (8000a10 <fsm_traffic_auto_mode+0x30c>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	f107 0060 	add.w	r0, r7, #96	; 0x60
 80007ae:	4a9b      	ldr	r2, [pc, #620]	; (8000a1c <fsm_traffic_auto_mode+0x318>)
 80007b0:	2110      	movs	r1, #16
 80007b2:	f005 f92b 	bl	8005a0c <sniprintf>
                	lcd_goto_XY(2, 0);
 80007b6:	2100      	movs	r1, #0
 80007b8:	2002      	movs	r0, #2
 80007ba:	f001 faf1 	bl	8001da0 <lcd_goto_XY>
                	lcd_send_string(buffer1);
 80007be:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80007c2:	4618      	mov	r0, r3
 80007c4:	f001 fad0 	bl	8001d68 <lcd_send_string>
                    clock_counter_side--;
 80007c8:	4b91      	ldr	r3, [pc, #580]	; (8000a10 <fsm_traffic_auto_mode+0x30c>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	3b01      	subs	r3, #1
 80007ce:	4a90      	ldr	r2, [pc, #576]	; (8000a10 <fsm_traffic_auto_mode+0x30c>)
 80007d0:	6013      	str	r3, [r2, #0]
                    clock_counter_main--;
 80007d2:	4b90      	ldr	r3, [pc, #576]	; (8000a14 <fsm_traffic_auto_mode+0x310>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	3b01      	subs	r3, #1
 80007d8:	4a8e      	ldr	r2, [pc, #568]	; (8000a14 <fsm_traffic_auto_mode+0x310>)
 80007da:	6013      	str	r3, [r2, #0]
                }
                settimer1(1, 1000);
 80007dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007e0:	2001      	movs	r0, #1
 80007e2:	f001 fe75 	bl	80024d0 <settimer1>
            }
            if (clock_counter_side < 0) {
 80007e6:	4b8a      	ldr	r3, [pc, #552]	; (8000a10 <fsm_traffic_auto_mode+0x30c>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	f280 8105 	bge.w	80009fa <fsm_traffic_auto_mode+0x2f6>
                switchAutoState(RED_AMBER, clock_counter_main + 1, timeAmber);
 80007f0:	4b88      	ldr	r3, [pc, #544]	; (8000a14 <fsm_traffic_auto_mode+0x310>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	3301      	adds	r3, #1
 80007f6:	4a8a      	ldr	r2, [pc, #552]	; (8000a20 <fsm_traffic_auto_mode+0x31c>)
 80007f8:	6812      	ldr	r2, [r2, #0]
 80007fa:	4619      	mov	r1, r3
 80007fc:	2002      	movs	r0, #2
 80007fe:	f7ff ff65 	bl	80006cc <switchAutoState>
                timerFlag[2] = 1;
 8000802:	4b82      	ldr	r3, [pc, #520]	; (8000a0c <fsm_traffic_auto_mode+0x308>)
 8000804:	2201      	movs	r2, #1
 8000806:	609a      	str	r2, [r3, #8]
            }
            break;
 8000808:	e0f7      	b.n	80009fa <fsm_traffic_auto_mode+0x2f6>
        case RED_AMBER:
            turnOnRed1();
 800080a:	f000 fcf7 	bl	80011fc <turnOnRed1>
            turnOnAmber2();
 800080e:	f000 fd31 	bl	8001274 <turnOnAmber2>
            if (timerFlag[2] == 1) {
 8000812:	4b7e      	ldr	r3, [pc, #504]	; (8000a0c <fsm_traffic_auto_mode+0x308>)
 8000814:	689b      	ldr	r3, [r3, #8]
 8000816:	2b01      	cmp	r3, #1
 8000818:	d139      	bne.n	800088e <fsm_traffic_auto_mode+0x18a>
                if (clock_counter_side >= 0) {
 800081a:	4b7d      	ldr	r3, [pc, #500]	; (8000a10 <fsm_traffic_auto_mode+0x30c>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	2b00      	cmp	r3, #0
 8000820:	db35      	blt.n	800088e <fsm_traffic_auto_mode+0x18a>
                	lcd_clear_display();
 8000822:	f001 fab6 	bl	8001d92 <lcd_clear_display>
                	HAL_Delay(10);
 8000826:	200a      	movs	r0, #10
 8000828:	f002 f8de 	bl	80029e8 <HAL_Delay>
                	char buffer[16];
                	snprintf(buffer, sizeof(buffer), "RED: %d", clock_counter_main);
 800082c:	4b79      	ldr	r3, [pc, #484]	; (8000a14 <fsm_traffic_auto_mode+0x310>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000834:	4a78      	ldr	r2, [pc, #480]	; (8000a18 <fsm_traffic_auto_mode+0x314>)
 8000836:	2110      	movs	r1, #16
 8000838:	f005 f8e8 	bl	8005a0c <sniprintf>
                	lcd_goto_XY(1, 0);
 800083c:	2100      	movs	r1, #0
 800083e:	2001      	movs	r0, #1
 8000840:	f001 faae 	bl	8001da0 <lcd_goto_XY>
                	lcd_send_string(buffer);
 8000844:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000848:	4618      	mov	r0, r3
 800084a:	f001 fa8d 	bl	8001d68 <lcd_send_string>
                	char buffer1[16];
                	snprintf(buffer1, sizeof(buffer1), "AMBER: %d", clock_counter_side);
 800084e:	4b70      	ldr	r3, [pc, #448]	; (8000a10 <fsm_traffic_auto_mode+0x30c>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8000856:	4a73      	ldr	r2, [pc, #460]	; (8000a24 <fsm_traffic_auto_mode+0x320>)
 8000858:	2110      	movs	r1, #16
 800085a:	f005 f8d7 	bl	8005a0c <sniprintf>
                	lcd_goto_XY(2, 0);
 800085e:	2100      	movs	r1, #0
 8000860:	2002      	movs	r0, #2
 8000862:	f001 fa9d 	bl	8001da0 <lcd_goto_XY>
                	lcd_send_string(buffer1);
 8000866:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800086a:	4618      	mov	r0, r3
 800086c:	f001 fa7c 	bl	8001d68 <lcd_send_string>
                    clock_counter_side--;
 8000870:	4b67      	ldr	r3, [pc, #412]	; (8000a10 <fsm_traffic_auto_mode+0x30c>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	3b01      	subs	r3, #1
 8000876:	4a66      	ldr	r2, [pc, #408]	; (8000a10 <fsm_traffic_auto_mode+0x30c>)
 8000878:	6013      	str	r3, [r2, #0]
                    clock_counter_main--;
 800087a:	4b66      	ldr	r3, [pc, #408]	; (8000a14 <fsm_traffic_auto_mode+0x310>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	3b01      	subs	r3, #1
 8000880:	4a64      	ldr	r2, [pc, #400]	; (8000a14 <fsm_traffic_auto_mode+0x310>)
 8000882:	6013      	str	r3, [r2, #0]
                    settimer1(2, 1000);
 8000884:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000888:	2002      	movs	r0, #2
 800088a:	f001 fe21 	bl	80024d0 <settimer1>
                }
            }
            if (clock_counter_side < 0) {
 800088e:	4b60      	ldr	r3, [pc, #384]	; (8000a10 <fsm_traffic_auto_mode+0x30c>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	2b00      	cmp	r3, #0
 8000894:	f280 80c8 	bge.w	8000a28 <fsm_traffic_auto_mode+0x324>
                switchAutoState(GREEN_RED, timeGreen, timeRed);
 8000898:	4b5b      	ldr	r3, [pc, #364]	; (8000a08 <fsm_traffic_auto_mode+0x304>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a59      	ldr	r2, [pc, #356]	; (8000a04 <fsm_traffic_auto_mode+0x300>)
 800089e:	6812      	ldr	r2, [r2, #0]
 80008a0:	4619      	mov	r1, r3
 80008a2:	2003      	movs	r0, #3
 80008a4:	f7ff ff12 	bl	80006cc <switchAutoState>
                timerFlag[3] = 1;
 80008a8:	4b58      	ldr	r3, [pc, #352]	; (8000a0c <fsm_traffic_auto_mode+0x308>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	60da      	str	r2, [r3, #12]
            }
            break;
 80008ae:	e0bb      	b.n	8000a28 <fsm_traffic_auto_mode+0x324>
        case GREEN_RED:
            turnOnGreen1();
 80008b0:	f000 fcc2 	bl	8001238 <turnOnGreen1>
            turnOnRed2();
 80008b4:	f000 fcd2 	bl	800125c <turnOnRed2>
            if (timerFlag[3] == 1) {
 80008b8:	4b54      	ldr	r3, [pc, #336]	; (8000a0c <fsm_traffic_auto_mode+0x308>)
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	2b01      	cmp	r3, #1
 80008be:	d139      	bne.n	8000934 <fsm_traffic_auto_mode+0x230>
                if (clock_counter_side >= 0) {
 80008c0:	4b53      	ldr	r3, [pc, #332]	; (8000a10 <fsm_traffic_auto_mode+0x30c>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	db35      	blt.n	8000934 <fsm_traffic_auto_mode+0x230>
                	lcd_clear_display();
 80008c8:	f001 fa63 	bl	8001d92 <lcd_clear_display>
                	HAL_Delay(10);
 80008cc:	200a      	movs	r0, #10
 80008ce:	f002 f88b 	bl	80029e8 <HAL_Delay>
                	char buffer[16];
                	snprintf(buffer, sizeof(buffer), "GREEN: %d", clock_counter_main);
 80008d2:	4b50      	ldr	r3, [pc, #320]	; (8000a14 <fsm_traffic_auto_mode+0x310>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80008da:	4a50      	ldr	r2, [pc, #320]	; (8000a1c <fsm_traffic_auto_mode+0x318>)
 80008dc:	2110      	movs	r1, #16
 80008de:	f005 f895 	bl	8005a0c <sniprintf>
                	lcd_goto_XY(1, 0);
 80008e2:	2100      	movs	r1, #0
 80008e4:	2001      	movs	r0, #1
 80008e6:	f001 fa5b 	bl	8001da0 <lcd_goto_XY>
                	lcd_send_string(buffer);
 80008ea:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008ee:	4618      	mov	r0, r3
 80008f0:	f001 fa3a 	bl	8001d68 <lcd_send_string>
                	char buffer1[16];
                	snprintf(buffer1, sizeof(buffer1), "RED: %d", clock_counter_side);
 80008f4:	4b46      	ldr	r3, [pc, #280]	; (8000a10 <fsm_traffic_auto_mode+0x30c>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f107 0020 	add.w	r0, r7, #32
 80008fc:	4a46      	ldr	r2, [pc, #280]	; (8000a18 <fsm_traffic_auto_mode+0x314>)
 80008fe:	2110      	movs	r1, #16
 8000900:	f005 f884 	bl	8005a0c <sniprintf>
                	lcd_goto_XY(2, 0);
 8000904:	2100      	movs	r1, #0
 8000906:	2002      	movs	r0, #2
 8000908:	f001 fa4a 	bl	8001da0 <lcd_goto_XY>
                	lcd_send_string(buffer1);
 800090c:	f107 0320 	add.w	r3, r7, #32
 8000910:	4618      	mov	r0, r3
 8000912:	f001 fa29 	bl	8001d68 <lcd_send_string>
                    clock_counter_side--;
 8000916:	4b3e      	ldr	r3, [pc, #248]	; (8000a10 <fsm_traffic_auto_mode+0x30c>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	3b01      	subs	r3, #1
 800091c:	4a3c      	ldr	r2, [pc, #240]	; (8000a10 <fsm_traffic_auto_mode+0x30c>)
 800091e:	6013      	str	r3, [r2, #0]
                    clock_counter_main--;
 8000920:	4b3c      	ldr	r3, [pc, #240]	; (8000a14 <fsm_traffic_auto_mode+0x310>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	3b01      	subs	r3, #1
 8000926:	4a3b      	ldr	r2, [pc, #236]	; (8000a14 <fsm_traffic_auto_mode+0x310>)
 8000928:	6013      	str	r3, [r2, #0]
                    settimer1(3, 1000);
 800092a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800092e:	2003      	movs	r0, #3
 8000930:	f001 fdce 	bl	80024d0 <settimer1>
                }
            }
            if (clock_counter_main < 0) {
 8000934:	4b37      	ldr	r3, [pc, #220]	; (8000a14 <fsm_traffic_auto_mode+0x310>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	da77      	bge.n	8000a2c <fsm_traffic_auto_mode+0x328>
                switchAutoState(AMBER_RED, timeAmber, clock_counter_side + 1);
 800093c:	4b38      	ldr	r3, [pc, #224]	; (8000a20 <fsm_traffic_auto_mode+0x31c>)
 800093e:	6819      	ldr	r1, [r3, #0]
 8000940:	4b33      	ldr	r3, [pc, #204]	; (8000a10 <fsm_traffic_auto_mode+0x30c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	3301      	adds	r3, #1
 8000946:	461a      	mov	r2, r3
 8000948:	2004      	movs	r0, #4
 800094a:	f7ff febf 	bl	80006cc <switchAutoState>
                timerFlag[4] = 1;
 800094e:	4b2f      	ldr	r3, [pc, #188]	; (8000a0c <fsm_traffic_auto_mode+0x308>)
 8000950:	2201      	movs	r2, #1
 8000952:	611a      	str	r2, [r3, #16]
            }
            break;
 8000954:	e06a      	b.n	8000a2c <fsm_traffic_auto_mode+0x328>
        case AMBER_RED:
            turnOnAmber1();
 8000956:	f000 fc5d 	bl	8001214 <turnOnAmber1>
            turnOnRed2();
 800095a:	f000 fc7f 	bl	800125c <turnOnRed2>
            if (timerFlag[4] == 1) {
 800095e:	4b2b      	ldr	r3, [pc, #172]	; (8000a0c <fsm_traffic_auto_mode+0x308>)
 8000960:	691b      	ldr	r3, [r3, #16]
 8000962:	2b01      	cmp	r3, #1
 8000964:	d137      	bne.n	80009d6 <fsm_traffic_auto_mode+0x2d2>
                if (clock_counter_side >= 0) {
 8000966:	4b2a      	ldr	r3, [pc, #168]	; (8000a10 <fsm_traffic_auto_mode+0x30c>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	2b00      	cmp	r3, #0
 800096c:	db33      	blt.n	80009d6 <fsm_traffic_auto_mode+0x2d2>
                	lcd_clear_display();
 800096e:	f001 fa10 	bl	8001d92 <lcd_clear_display>
                	HAL_Delay(10);
 8000972:	200a      	movs	r0, #10
 8000974:	f002 f838 	bl	80029e8 <HAL_Delay>
                	char buffer[16];
                	snprintf(buffer, sizeof(buffer), "AMBER: %d", clock_counter_main);
 8000978:	4b26      	ldr	r3, [pc, #152]	; (8000a14 <fsm_traffic_auto_mode+0x310>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f107 0010 	add.w	r0, r7, #16
 8000980:	4a28      	ldr	r2, [pc, #160]	; (8000a24 <fsm_traffic_auto_mode+0x320>)
 8000982:	2110      	movs	r1, #16
 8000984:	f005 f842 	bl	8005a0c <sniprintf>
                	lcd_goto_XY(1, 0);
 8000988:	2100      	movs	r1, #0
 800098a:	2001      	movs	r0, #1
 800098c:	f001 fa08 	bl	8001da0 <lcd_goto_XY>
                	lcd_send_string(buffer);
 8000990:	f107 0310 	add.w	r3, r7, #16
 8000994:	4618      	mov	r0, r3
 8000996:	f001 f9e7 	bl	8001d68 <lcd_send_string>
                	char buffer1[16];
                	snprintf(buffer1, sizeof(buffer1), "RED: %d", clock_counter_side);
 800099a:	4b1d      	ldr	r3, [pc, #116]	; (8000a10 <fsm_traffic_auto_mode+0x30c>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4638      	mov	r0, r7
 80009a0:	4a1d      	ldr	r2, [pc, #116]	; (8000a18 <fsm_traffic_auto_mode+0x314>)
 80009a2:	2110      	movs	r1, #16
 80009a4:	f005 f832 	bl	8005a0c <sniprintf>
                	lcd_goto_XY(2, 0);
 80009a8:	2100      	movs	r1, #0
 80009aa:	2002      	movs	r0, #2
 80009ac:	f001 f9f8 	bl	8001da0 <lcd_goto_XY>
                	lcd_send_string(buffer1);
 80009b0:	463b      	mov	r3, r7
 80009b2:	4618      	mov	r0, r3
 80009b4:	f001 f9d8 	bl	8001d68 <lcd_send_string>
                    clock_counter_side--;
 80009b8:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <fsm_traffic_auto_mode+0x30c>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	3b01      	subs	r3, #1
 80009be:	4a14      	ldr	r2, [pc, #80]	; (8000a10 <fsm_traffic_auto_mode+0x30c>)
 80009c0:	6013      	str	r3, [r2, #0]
                    clock_counter_main--;
 80009c2:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <fsm_traffic_auto_mode+0x310>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	3b01      	subs	r3, #1
 80009c8:	4a12      	ldr	r2, [pc, #72]	; (8000a14 <fsm_traffic_auto_mode+0x310>)
 80009ca:	6013      	str	r3, [r2, #0]
                    settimer1(4, 1000);
 80009cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80009d0:	2004      	movs	r0, #4
 80009d2:	f001 fd7d 	bl	80024d0 <settimer1>
                }
            }
            if (clock_counter_main < 0) {
 80009d6:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <fsm_traffic_auto_mode+0x310>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	da28      	bge.n	8000a30 <fsm_traffic_auto_mode+0x32c>
                switchAutoState(RED_GREEN, timeRed, timeGreen);
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <fsm_traffic_auto_mode+0x300>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4a09      	ldr	r2, [pc, #36]	; (8000a08 <fsm_traffic_auto_mode+0x304>)
 80009e4:	6812      	ldr	r2, [r2, #0]
 80009e6:	4619      	mov	r1, r3
 80009e8:	2001      	movs	r0, #1
 80009ea:	f7ff fe6f 	bl	80006cc <switchAutoState>
                timerFlag[1] = 1;
 80009ee:	4b07      	ldr	r3, [pc, #28]	; (8000a0c <fsm_traffic_auto_mode+0x308>)
 80009f0:	2201      	movs	r2, #1
 80009f2:	605a      	str	r2, [r3, #4]
            }
            break;
 80009f4:	e01c      	b.n	8000a30 <fsm_traffic_auto_mode+0x32c>
        default:
            break;
 80009f6:	bf00      	nop
 80009f8:	e01b      	b.n	8000a32 <fsm_traffic_auto_mode+0x32e>
            break;
 80009fa:	bf00      	nop
 80009fc:	e019      	b.n	8000a32 <fsm_traffic_auto_mode+0x32e>
 80009fe:	bf00      	nop
 8000a00:	20000060 	.word	0x20000060
 8000a04:	20000064 	.word	0x20000064
 8000a08:	2000006c 	.word	0x2000006c
 8000a0c:	20000b50 	.word	0x20000b50
 8000a10:	2000094c 	.word	0x2000094c
 8000a14:	20000948 	.word	0x20000948
 8000a18:	0800685c 	.word	0x0800685c
 8000a1c:	08006864 	.word	0x08006864
 8000a20:	20000068 	.word	0x20000068
 8000a24:	08006870 	.word	0x08006870
            break;
 8000a28:	bf00      	nop
 8000a2a:	e002      	b.n	8000a32 <fsm_traffic_auto_mode+0x32e>
            break;
 8000a2c:	bf00      	nop
 8000a2e:	e000      	b.n	8000a32 <fsm_traffic_auto_mode+0x32e>
            break;
 8000a30:	bf00      	nop
    }
}
 8000a32:	bf00      	nop
 8000a34:	3780      	adds	r7, #128	; 0x80
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop

08000a3c <isButtonDebounced>:

// ======================= CHẾ ĐỘ TINH CHỈNH =======================

static uint32_t lastButtonPressTime[3] = {0, 0, 0}; // Array to store last press time for each button

bool isButtonDebounced(int button) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
    uint32_t currentTime = HAL_GetTick();
 8000a44:	f001 ffc6 	bl	80029d4 <HAL_GetTick>
 8000a48:	60f8      	str	r0, [r7, #12]
    if (currentTime - lastButtonPressTime[button] > DEBOUNCE_DELAY) {
 8000a4a:	4a0a      	ldr	r2, [pc, #40]	; (8000a74 <isButtonDebounced+0x38>)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a52:	68fa      	ldr	r2, [r7, #12]
 8000a54:	1ad3      	subs	r3, r2, r3
 8000a56:	2bc8      	cmp	r3, #200	; 0xc8
 8000a58:	d906      	bls.n	8000a68 <isButtonDebounced+0x2c>
        lastButtonPressTime[button] = currentTime;
 8000a5a:	4906      	ldr	r1, [pc, #24]	; (8000a74 <isButtonDebounced+0x38>)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	68fa      	ldr	r2, [r7, #12]
 8000a60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        return true;
 8000a64:	2301      	movs	r3, #1
 8000a66:	e000      	b.n	8000a6a <isButtonDebounced+0x2e>
    }
    return false;
 8000a68:	2300      	movs	r3, #0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3710      	adds	r7, #16
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	200000fc 	.word	0x200000fc

08000a78 <logNewTime>:
void logNewTime() {
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
    if (tuningStatus == RED_ADJ) HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!TIMER RED :%d#\r\n", timeRed), 500);
 8000a7c:	4b1d      	ldr	r3, [pc, #116]	; (8000af4 <logNewTime+0x7c>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d10e      	bne.n	8000aa2 <logNewTime+0x2a>
 8000a84:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <logNewTime+0x80>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	461a      	mov	r2, r3
 8000a8a:	491c      	ldr	r1, [pc, #112]	; (8000afc <logNewTime+0x84>)
 8000a8c:	481c      	ldr	r0, [pc, #112]	; (8000b00 <logNewTime+0x88>)
 8000a8e:	f004 fff1 	bl	8005a74 <siprintf>
 8000a92:	4603      	mov	r3, r0
 8000a94:	b29a      	uxth	r2, r3
 8000a96:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a9a:	4919      	ldr	r1, [pc, #100]	; (8000b00 <logNewTime+0x88>)
 8000a9c:	4819      	ldr	r0, [pc, #100]	; (8000b04 <logNewTime+0x8c>)
 8000a9e:	f004 f861 	bl	8004b64 <HAL_UART_Transmit>
    if (tuningStatus == AMBER_ADJ) HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!TIMER AMBER :%d#\r\n", timeAmber), 500);
 8000aa2:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <logNewTime+0x7c>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	2b02      	cmp	r3, #2
 8000aa8:	d10e      	bne.n	8000ac8 <logNewTime+0x50>
 8000aaa:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <logNewTime+0x90>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	461a      	mov	r2, r3
 8000ab0:	4916      	ldr	r1, [pc, #88]	; (8000b0c <logNewTime+0x94>)
 8000ab2:	4813      	ldr	r0, [pc, #76]	; (8000b00 <logNewTime+0x88>)
 8000ab4:	f004 ffde 	bl	8005a74 <siprintf>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	b29a      	uxth	r2, r3
 8000abc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ac0:	490f      	ldr	r1, [pc, #60]	; (8000b00 <logNewTime+0x88>)
 8000ac2:	4810      	ldr	r0, [pc, #64]	; (8000b04 <logNewTime+0x8c>)
 8000ac4:	f004 f84e 	bl	8004b64 <HAL_UART_Transmit>
    if (tuningStatus == GREEN_ADJ) HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!TIMER GREEN :%d#\r\n", timeGreen), 500);
 8000ac8:	4b0a      	ldr	r3, [pc, #40]	; (8000af4 <logNewTime+0x7c>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	2b03      	cmp	r3, #3
 8000ace:	d10e      	bne.n	8000aee <logNewTime+0x76>
 8000ad0:	4b0f      	ldr	r3, [pc, #60]	; (8000b10 <logNewTime+0x98>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	490f      	ldr	r1, [pc, #60]	; (8000b14 <logNewTime+0x9c>)
 8000ad8:	4809      	ldr	r0, [pc, #36]	; (8000b00 <logNewTime+0x88>)
 8000ada:	f004 ffcb 	bl	8005a74 <siprintf>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	b29a      	uxth	r2, r3
 8000ae2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ae6:	4906      	ldr	r1, [pc, #24]	; (8000b00 <logNewTime+0x88>)
 8000ae8:	4806      	ldr	r0, [pc, #24]	; (8000b04 <logNewTime+0x8c>)
 8000aea:	f004 f83b 	bl	8004b64 <HAL_UART_Transmit>
}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000944 	.word	0x20000944
 8000af8:	20000064 	.word	0x20000064
 8000afc:	0800687c 	.word	0x0800687c
 8000b00:	20000a34 	.word	0x20000a34
 8000b04:	200009ec 	.word	0x200009ec
 8000b08:	20000068 	.word	0x20000068
 8000b0c:	08006890 	.word	0x08006890
 8000b10:	2000006c 	.word	0x2000006c
 8000b14:	080068a4 	.word	0x080068a4

08000b18 <display_timerRed>:

int initialTimeRed = 5;
int initialTimeAmber = 2;
int initialTimeGreen = 3;

void display_timerRed() {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
    char buffer[16];
    snprintf(buffer, sizeof(buffer), "TimeRED:%d", timeRed);
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <display_timerRed+0x2c>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4638      	mov	r0, r7
 8000b24:	4a08      	ldr	r2, [pc, #32]	; (8000b48 <display_timerRed+0x30>)
 8000b26:	2110      	movs	r1, #16
 8000b28:	f004 ff70 	bl	8005a0c <sniprintf>
    lcd_goto_XY(1, 0);
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	2001      	movs	r0, #1
 8000b30:	f001 f936 	bl	8001da0 <lcd_goto_XY>
    lcd_send_string(buffer);
 8000b34:	463b      	mov	r3, r7
 8000b36:	4618      	mov	r0, r3
 8000b38:	f001 f916 	bl	8001d68 <lcd_send_string>
}
 8000b3c:	bf00      	nop
 8000b3e:	3710      	adds	r7, #16
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	20000064 	.word	0x20000064
 8000b48:	080068b8 	.word	0x080068b8

08000b4c <display_timerGreen>:

void display_timerGreen() {
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
    char buffer[16];
    snprintf(buffer, sizeof(buffer), "TimeGREEN:%d", timeGreen);
 8000b52:	4b09      	ldr	r3, [pc, #36]	; (8000b78 <display_timerGreen+0x2c>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4638      	mov	r0, r7
 8000b58:	4a08      	ldr	r2, [pc, #32]	; (8000b7c <display_timerGreen+0x30>)
 8000b5a:	2110      	movs	r1, #16
 8000b5c:	f004 ff56 	bl	8005a0c <sniprintf>
    lcd_goto_XY(1, 0);
 8000b60:	2100      	movs	r1, #0
 8000b62:	2001      	movs	r0, #1
 8000b64:	f001 f91c 	bl	8001da0 <lcd_goto_XY>
    lcd_send_string(buffer);
 8000b68:	463b      	mov	r3, r7
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f001 f8fc 	bl	8001d68 <lcd_send_string>
}
 8000b70:	bf00      	nop
 8000b72:	3710      	adds	r7, #16
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	2000006c 	.word	0x2000006c
 8000b7c:	080068c4 	.word	0x080068c4

08000b80 <display_timerAmber>:

void display_timerAmber() {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b084      	sub	sp, #16
 8000b84:	af00      	add	r7, sp, #0
    char buffer[16];
    snprintf(buffer, sizeof(buffer), "TimeAMBER:%d", timeAmber);
 8000b86:	4b09      	ldr	r3, [pc, #36]	; (8000bac <display_timerAmber+0x2c>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4638      	mov	r0, r7
 8000b8c:	4a08      	ldr	r2, [pc, #32]	; (8000bb0 <display_timerAmber+0x30>)
 8000b8e:	2110      	movs	r1, #16
 8000b90:	f004 ff3c 	bl	8005a0c <sniprintf>
    lcd_goto_XY(1, 0);
 8000b94:	2100      	movs	r1, #0
 8000b96:	2001      	movs	r0, #1
 8000b98:	f001 f902 	bl	8001da0 <lcd_goto_XY>
    lcd_send_string(buffer);
 8000b9c:	463b      	mov	r3, r7
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f001 f8e2 	bl	8001d68 <lcd_send_string>
}
 8000ba4:	bf00      	nop
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000068 	.word	0x20000068
 8000bb0:	080068d4 	.word	0x080068d4

08000bb4 <fsm_traffic_tunning_mode>:

void fsm_traffic_tunning_mode(void) {
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
    switch (tuningStatus) {
 8000bb8:	4bb8      	ldr	r3, [pc, #736]	; (8000e9c <fsm_traffic_tunning_mode+0x2e8>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2b0a      	cmp	r3, #10
 8000bbe:	f200 8225 	bhi.w	800100c <fsm_traffic_tunning_mode+0x458>
 8000bc2:	a201      	add	r2, pc, #4	; (adr r2, 8000bc8 <fsm_traffic_tunning_mode+0x14>)
 8000bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bc8:	0800100d 	.word	0x0800100d
 8000bcc:	08000c0d 	.word	0x08000c0d
 8000bd0:	08000ebd 	.word	0x08000ebd
 8000bd4:	08000d55 	.word	0x08000d55
 8000bd8:	0800100d 	.word	0x0800100d
 8000bdc:	0800100d 	.word	0x0800100d
 8000be0:	0800100d 	.word	0x0800100d
 8000be4:	0800100d 	.word	0x0800100d
 8000be8:	0800100d 	.word	0x0800100d
 8000bec:	0800100d 	.word	0x0800100d
 8000bf0:	08000bf5 	.word	0x08000bf5
        case OFF:
            // do nothing
            break;
        case INIT:
            tuningStatus = RED_ADJ;
 8000bf4:	4ba9      	ldr	r3, [pc, #676]	; (8000e9c <fsm_traffic_tunning_mode+0x2e8>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	601a      	str	r2, [r3, #0]
            clearRoadLed();
 8000bfa:	f000 fbcd 	bl	8001398 <clearRoadLed>
            logNewTime();
 8000bfe:	f7ff ff3b 	bl	8000a78 <logNewTime>
            settimer1(5, 5);
 8000c02:	2105      	movs	r1, #5
 8000c04:	2005      	movs	r0, #5
 8000c06:	f001 fc63 	bl	80024d0 <settimer1>
            break;
 8000c0a:	e206      	b.n	800101a <fsm_traffic_tunning_mode+0x466>
        case RED_ADJ:
            blinkyRed();
 8000c0c:	f000 fb56 	bl	80012bc <blinkyRed>
            if ((isButtonShortPressed(2) && isButtonDebounced(2)) ||receive_uart_command() == INCREMENT_RED_TIME) {
 8000c10:	2002      	movs	r0, #2
 8000c12:	f000 ff19 	bl	8001a48 <isButtonShortPressed>
 8000c16:	4603      	mov	r3, r0
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d005      	beq.n	8000c28 <fsm_traffic_tunning_mode+0x74>
 8000c1c:	2002      	movs	r0, #2
 8000c1e:	f7ff ff0d 	bl	8000a3c <isButtonDebounced>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d104      	bne.n	8000c32 <fsm_traffic_tunning_mode+0x7e>
 8000c28:	f000 fdea 	bl	8001800 <receive_uart_command>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d118      	bne.n	8000c64 <fsm_traffic_tunning_mode+0xb0>
            	lcd_clear_display();
 8000c32:	f001 f8ae 	bl	8001d92 <lcd_clear_display>
            	HAL_Delay(10);
 8000c36:	200a      	movs	r0, #10
 8000c38:	f001 fed6 	bl	80029e8 <HAL_Delay>
                timeRed = (timeRed + 1) % 100;
 8000c3c:	4b98      	ldr	r3, [pc, #608]	; (8000ea0 <fsm_traffic_tunning_mode+0x2ec>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	1c5a      	adds	r2, r3, #1
 8000c42:	4b98      	ldr	r3, [pc, #608]	; (8000ea4 <fsm_traffic_tunning_mode+0x2f0>)
 8000c44:	fb83 1302 	smull	r1, r3, r3, r2
 8000c48:	1159      	asrs	r1, r3, #5
 8000c4a:	17d3      	asrs	r3, r2, #31
 8000c4c:	1acb      	subs	r3, r1, r3
 8000c4e:	2164      	movs	r1, #100	; 0x64
 8000c50:	fb01 f303 	mul.w	r3, r1, r3
 8000c54:	1ad3      	subs	r3, r2, r3
 8000c56:	4a92      	ldr	r2, [pc, #584]	; (8000ea0 <fsm_traffic_tunning_mode+0x2ec>)
 8000c58:	6013      	str	r3, [r2, #0]
                logNewTime();
 8000c5a:	f7ff ff0d 	bl	8000a78 <logNewTime>
                display_timerRed();
 8000c5e:	f7ff ff5b 	bl	8000b18 <display_timerRed>
 8000c62:	e076      	b.n	8000d52 <fsm_traffic_tunning_mode+0x19e>
            } else if ((isButtonLongPressed(2) && isButtonDebounced(2))|| receive_uart_command() == DECREMENT_RED_TIME) {
 8000c64:	2002      	movs	r0, #2
 8000c66:	f000 ff09 	bl	8001a7c <isButtonLongPressed>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d005      	beq.n	8000c7c <fsm_traffic_tunning_mode+0xc8>
 8000c70:	2002      	movs	r0, #2
 8000c72:	f7ff fee3 	bl	8000a3c <isButtonDebounced>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d104      	bne.n	8000c86 <fsm_traffic_tunning_mode+0xd2>
 8000c7c:	f000 fdc0 	bl	8001800 <receive_uart_command>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b02      	cmp	r3, #2
 8000c84:	d119      	bne.n	8000cba <fsm_traffic_tunning_mode+0x106>
            	lcd_clear_display();
 8000c86:	f001 f884 	bl	8001d92 <lcd_clear_display>
            	HAL_Delay(10);
 8000c8a:	200a      	movs	r0, #10
 8000c8c:	f001 feac 	bl	80029e8 <HAL_Delay>
                timeRed = (timeRed - 1 + 100) % 100;
 8000c90:	4b83      	ldr	r3, [pc, #524]	; (8000ea0 <fsm_traffic_tunning_mode+0x2ec>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f103 0263 	add.w	r2, r3, #99	; 0x63
 8000c98:	4b82      	ldr	r3, [pc, #520]	; (8000ea4 <fsm_traffic_tunning_mode+0x2f0>)
 8000c9a:	fb83 1302 	smull	r1, r3, r3, r2
 8000c9e:	1159      	asrs	r1, r3, #5
 8000ca0:	17d3      	asrs	r3, r2, #31
 8000ca2:	1acb      	subs	r3, r1, r3
 8000ca4:	2164      	movs	r1, #100	; 0x64
 8000ca6:	fb01 f303 	mul.w	r3, r1, r3
 8000caa:	1ad3      	subs	r3, r2, r3
 8000cac:	4a7c      	ldr	r2, [pc, #496]	; (8000ea0 <fsm_traffic_tunning_mode+0x2ec>)
 8000cae:	6013      	str	r3, [r2, #0]
                logNewTime();
 8000cb0:	f7ff fee2 	bl	8000a78 <logNewTime>
                display_timerRed();
 8000cb4:	f7ff ff30 	bl	8000b18 <display_timerRed>
 8000cb8:	e04b      	b.n	8000d52 <fsm_traffic_tunning_mode+0x19e>
            } else if ((isButtonShortPressed(1) && isButtonDebounced(1))|| receive_uart_command() == SWITCH) {
 8000cba:	2001      	movs	r0, #1
 8000cbc:	f000 fec4 	bl	8001a48 <isButtonShortPressed>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d005      	beq.n	8000cd2 <fsm_traffic_tunning_mode+0x11e>
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	f7ff feb8 	bl	8000a3c <isButtonDebounced>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d104      	bne.n	8000cdc <fsm_traffic_tunning_mode+0x128>
 8000cd2:	f000 fd95 	bl	8001800 <receive_uart_command>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b03      	cmp	r3, #3
 8000cda:	d10d      	bne.n	8000cf8 <fsm_traffic_tunning_mode+0x144>
                tuningStatus = GREEN_ADJ;
 8000cdc:	4b6f      	ldr	r3, [pc, #444]	; (8000e9c <fsm_traffic_tunning_mode+0x2e8>)
 8000cde:	2203      	movs	r2, #3
 8000ce0:	601a      	str	r2, [r3, #0]
                clearRoadLed();
 8000ce2:	f000 fb59 	bl	8001398 <clearRoadLed>
                logNewTime();
 8000ce6:	f7ff fec7 	bl	8000a78 <logNewTime>
                settimer1(6, 5);
 8000cea:	2105      	movs	r1, #5
 8000cec:	2006      	movs	r0, #6
 8000cee:	f001 fbef 	bl	80024d0 <settimer1>
                display_timerGreen();
 8000cf2:	f7ff ff2b 	bl	8000b4c <display_timerGreen>
 8000cf6:	e02c      	b.n	8000d52 <fsm_traffic_tunning_mode+0x19e>
            } else if ((isButtonShortPressed(0) && isButtonDebounced(0)) || receive_uart_command() == RESETALL) {
 8000cf8:	2000      	movs	r0, #0
 8000cfa:	f000 fea5 	bl	8001a48 <isButtonShortPressed>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d005      	beq.n	8000d10 <fsm_traffic_tunning_mode+0x15c>
 8000d04:	2000      	movs	r0, #0
 8000d06:	f7ff fe99 	bl	8000a3c <isButtonDebounced>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d105      	bne.n	8000d1c <fsm_traffic_tunning_mode+0x168>
 8000d10:	f000 fd76 	bl	8001800 <receive_uart_command>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b04      	cmp	r3, #4
 8000d18:	f040 817a 	bne.w	8001010 <fsm_traffic_tunning_mode+0x45c>
                // Reset all lights to initial times when button 1 is pressed
                timeRed = initialTimeRed;
 8000d1c:	4b62      	ldr	r3, [pc, #392]	; (8000ea8 <fsm_traffic_tunning_mode+0x2f4>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a5f      	ldr	r2, [pc, #380]	; (8000ea0 <fsm_traffic_tunning_mode+0x2ec>)
 8000d22:	6013      	str	r3, [r2, #0]
                timeAmber = initialTimeAmber;
 8000d24:	4b61      	ldr	r3, [pc, #388]	; (8000eac <fsm_traffic_tunning_mode+0x2f8>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a61      	ldr	r2, [pc, #388]	; (8000eb0 <fsm_traffic_tunning_mode+0x2fc>)
 8000d2a:	6013      	str	r3, [r2, #0]
                timeGreen = initialTimeGreen;
 8000d2c:	4b61      	ldr	r3, [pc, #388]	; (8000eb4 <fsm_traffic_tunning_mode+0x300>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a61      	ldr	r2, [pc, #388]	; (8000eb8 <fsm_traffic_tunning_mode+0x304>)
 8000d32:	6013      	str	r3, [r2, #0]
                logNewTime();  // Send new time information
 8000d34:	f7ff fea0 	bl	8000a78 <logNewTime>
            	lcd_clear_display();
 8000d38:	f001 f82b 	bl	8001d92 <lcd_clear_display>
            	HAL_Delay(10);
 8000d3c:	200a      	movs	r0, #10
 8000d3e:	f001 fe53 	bl	80029e8 <HAL_Delay>
                display_timerRed();
 8000d42:	f7ff fee9 	bl	8000b18 <display_timerRed>
                tuningStatus = RED_ADJ;  // Keep state GREEN_ADJ
 8000d46:	4b55      	ldr	r3, [pc, #340]	; (8000e9c <fsm_traffic_tunning_mode+0x2e8>)
 8000d48:	2201      	movs	r2, #1
 8000d4a:	601a      	str	r2, [r3, #0]
                clearRoadLed();  // Turn off all lights
 8000d4c:	f000 fb24 	bl	8001398 <clearRoadLed>
            }
            break;
 8000d50:	e15e      	b.n	8001010 <fsm_traffic_tunning_mode+0x45c>
 8000d52:	e15d      	b.n	8001010 <fsm_traffic_tunning_mode+0x45c>
        case GREEN_ADJ:
            blinkyGreen();
 8000d54:	f000 faf8 	bl	8001348 <blinkyGreen>
            if ((isButtonShortPressed(2) && isButtonDebounced(2))||receive_uart_command() == INCREMENT_GREEN_TIME) {
 8000d58:	2002      	movs	r0, #2
 8000d5a:	f000 fe75 	bl	8001a48 <isButtonShortPressed>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d005      	beq.n	8000d70 <fsm_traffic_tunning_mode+0x1bc>
 8000d64:	2002      	movs	r0, #2
 8000d66:	f7ff fe69 	bl	8000a3c <isButtonDebounced>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d104      	bne.n	8000d7a <fsm_traffic_tunning_mode+0x1c6>
 8000d70:	f000 fd46 	bl	8001800 <receive_uart_command>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b05      	cmp	r3, #5
 8000d78:	d118      	bne.n	8000dac <fsm_traffic_tunning_mode+0x1f8>
            	lcd_clear_display();
 8000d7a:	f001 f80a 	bl	8001d92 <lcd_clear_display>
            	HAL_Delay(10);
 8000d7e:	200a      	movs	r0, #10
 8000d80:	f001 fe32 	bl	80029e8 <HAL_Delay>
                timeGreen = (timeGreen + 1) % 100;
 8000d84:	4b4c      	ldr	r3, [pc, #304]	; (8000eb8 <fsm_traffic_tunning_mode+0x304>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	1c5a      	adds	r2, r3, #1
 8000d8a:	4b46      	ldr	r3, [pc, #280]	; (8000ea4 <fsm_traffic_tunning_mode+0x2f0>)
 8000d8c:	fb83 1302 	smull	r1, r3, r3, r2
 8000d90:	1159      	asrs	r1, r3, #5
 8000d92:	17d3      	asrs	r3, r2, #31
 8000d94:	1acb      	subs	r3, r1, r3
 8000d96:	2164      	movs	r1, #100	; 0x64
 8000d98:	fb01 f303 	mul.w	r3, r1, r3
 8000d9c:	1ad3      	subs	r3, r2, r3
 8000d9e:	4a46      	ldr	r2, [pc, #280]	; (8000eb8 <fsm_traffic_tunning_mode+0x304>)
 8000da0:	6013      	str	r3, [r2, #0]
                logNewTime();
 8000da2:	f7ff fe69 	bl	8000a78 <logNewTime>
                display_timerGreen();
 8000da6:	f7ff fed1 	bl	8000b4c <display_timerGreen>
 8000daa:	e076      	b.n	8000e9a <fsm_traffic_tunning_mode+0x2e6>
            } else if ((isButtonLongPressed(2) && isButtonDebounced(2))|| receive_uart_command() == DECREMENT_GREEN_TIME) {
 8000dac:	2002      	movs	r0, #2
 8000dae:	f000 fe65 	bl	8001a7c <isButtonLongPressed>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d005      	beq.n	8000dc4 <fsm_traffic_tunning_mode+0x210>
 8000db8:	2002      	movs	r0, #2
 8000dba:	f7ff fe3f 	bl	8000a3c <isButtonDebounced>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d104      	bne.n	8000dce <fsm_traffic_tunning_mode+0x21a>
 8000dc4:	f000 fd1c 	bl	8001800 <receive_uart_command>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b06      	cmp	r3, #6
 8000dcc:	d119      	bne.n	8000e02 <fsm_traffic_tunning_mode+0x24e>
            	lcd_clear_display();
 8000dce:	f000 ffe0 	bl	8001d92 <lcd_clear_display>
            	HAL_Delay(10);
 8000dd2:	200a      	movs	r0, #10
 8000dd4:	f001 fe08 	bl	80029e8 <HAL_Delay>
                timeGreen = (timeGreen - 1 + 100) % 100;
 8000dd8:	4b37      	ldr	r3, [pc, #220]	; (8000eb8 <fsm_traffic_tunning_mode+0x304>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f103 0263 	add.w	r2, r3, #99	; 0x63
 8000de0:	4b30      	ldr	r3, [pc, #192]	; (8000ea4 <fsm_traffic_tunning_mode+0x2f0>)
 8000de2:	fb83 1302 	smull	r1, r3, r3, r2
 8000de6:	1159      	asrs	r1, r3, #5
 8000de8:	17d3      	asrs	r3, r2, #31
 8000dea:	1acb      	subs	r3, r1, r3
 8000dec:	2164      	movs	r1, #100	; 0x64
 8000dee:	fb01 f303 	mul.w	r3, r1, r3
 8000df2:	1ad3      	subs	r3, r2, r3
 8000df4:	4a30      	ldr	r2, [pc, #192]	; (8000eb8 <fsm_traffic_tunning_mode+0x304>)
 8000df6:	6013      	str	r3, [r2, #0]
                logNewTime();
 8000df8:	f7ff fe3e 	bl	8000a78 <logNewTime>
                display_timerGreen();
 8000dfc:	f7ff fea6 	bl	8000b4c <display_timerGreen>
 8000e00:	e04b      	b.n	8000e9a <fsm_traffic_tunning_mode+0x2e6>
            } else if ((isButtonShortPressed(1) && isButtonDebounced(1))||receive_uart_command() == SWITCH) {
 8000e02:	2001      	movs	r0, #1
 8000e04:	f000 fe20 	bl	8001a48 <isButtonShortPressed>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d005      	beq.n	8000e1a <fsm_traffic_tunning_mode+0x266>
 8000e0e:	2001      	movs	r0, #1
 8000e10:	f7ff fe14 	bl	8000a3c <isButtonDebounced>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d104      	bne.n	8000e24 <fsm_traffic_tunning_mode+0x270>
 8000e1a:	f000 fcf1 	bl	8001800 <receive_uart_command>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b03      	cmp	r3, #3
 8000e22:	d10d      	bne.n	8000e40 <fsm_traffic_tunning_mode+0x28c>
                tuningStatus = AMBER_ADJ;
 8000e24:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <fsm_traffic_tunning_mode+0x2e8>)
 8000e26:	2202      	movs	r2, #2
 8000e28:	601a      	str	r2, [r3, #0]
                clearRoadLed();
 8000e2a:	f000 fab5 	bl	8001398 <clearRoadLed>
                logNewTime();
 8000e2e:	f7ff fe23 	bl	8000a78 <logNewTime>
                settimer1(7, 5);
 8000e32:	2105      	movs	r1, #5
 8000e34:	2007      	movs	r0, #7
 8000e36:	f001 fb4b 	bl	80024d0 <settimer1>
                display_timerAmber();
 8000e3a:	f7ff fea1 	bl	8000b80 <display_timerAmber>
 8000e3e:	e02c      	b.n	8000e9a <fsm_traffic_tunning_mode+0x2e6>
            } else if ((isButtonShortPressed(0) && isButtonDebounced(0))|| receive_uart_command() == RESETALL) {
 8000e40:	2000      	movs	r0, #0
 8000e42:	f000 fe01 	bl	8001a48 <isButtonShortPressed>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d005      	beq.n	8000e58 <fsm_traffic_tunning_mode+0x2a4>
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	f7ff fdf5 	bl	8000a3c <isButtonDebounced>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d105      	bne.n	8000e64 <fsm_traffic_tunning_mode+0x2b0>
 8000e58:	f000 fcd2 	bl	8001800 <receive_uart_command>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b04      	cmp	r3, #4
 8000e60:	f040 80d8 	bne.w	8001014 <fsm_traffic_tunning_mode+0x460>
                // Reset all lights to initial times when button 1 is pressed
                timeRed = initialTimeRed;
 8000e64:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <fsm_traffic_tunning_mode+0x2f4>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a0d      	ldr	r2, [pc, #52]	; (8000ea0 <fsm_traffic_tunning_mode+0x2ec>)
 8000e6a:	6013      	str	r3, [r2, #0]
                timeAmber = initialTimeAmber;
 8000e6c:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <fsm_traffic_tunning_mode+0x2f8>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a0f      	ldr	r2, [pc, #60]	; (8000eb0 <fsm_traffic_tunning_mode+0x2fc>)
 8000e72:	6013      	str	r3, [r2, #0]
                timeGreen = initialTimeGreen;
 8000e74:	4b0f      	ldr	r3, [pc, #60]	; (8000eb4 <fsm_traffic_tunning_mode+0x300>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a0f      	ldr	r2, [pc, #60]	; (8000eb8 <fsm_traffic_tunning_mode+0x304>)
 8000e7a:	6013      	str	r3, [r2, #0]
                logNewTime();  // Send new time information
 8000e7c:	f7ff fdfc 	bl	8000a78 <logNewTime>
            	lcd_clear_display();
 8000e80:	f000 ff87 	bl	8001d92 <lcd_clear_display>
            	HAL_Delay(10);
 8000e84:	200a      	movs	r0, #10
 8000e86:	f001 fdaf 	bl	80029e8 <HAL_Delay>
                display_timerGreen();
 8000e8a:	f7ff fe5f 	bl	8000b4c <display_timerGreen>
                tuningStatus = GREEN_ADJ;  // Keep state GREEN_ADJ
 8000e8e:	4b03      	ldr	r3, [pc, #12]	; (8000e9c <fsm_traffic_tunning_mode+0x2e8>)
 8000e90:	2203      	movs	r2, #3
 8000e92:	601a      	str	r2, [r3, #0]
                clearRoadLed();  // Turn off all lights
 8000e94:	f000 fa80 	bl	8001398 <clearRoadLed>
            }
            break;
 8000e98:	e0bc      	b.n	8001014 <fsm_traffic_tunning_mode+0x460>
 8000e9a:	e0bb      	b.n	8001014 <fsm_traffic_tunning_mode+0x460>
 8000e9c:	20000944 	.word	0x20000944
 8000ea0:	20000064 	.word	0x20000064
 8000ea4:	51eb851f 	.word	0x51eb851f
 8000ea8:	20000014 	.word	0x20000014
 8000eac:	20000018 	.word	0x20000018
 8000eb0:	20000068 	.word	0x20000068
 8000eb4:	2000001c 	.word	0x2000001c
 8000eb8:	2000006c 	.word	0x2000006c
        case AMBER_ADJ:
            blinkyAmber();
 8000ebc:	f000 fa1c 	bl	80012f8 <blinkyAmber>
            if ((isButtonShortPressed(2) && isButtonDebounced(2))|| receive_uart_command() == INCREMENT_YELLOW_TIME) {
 8000ec0:	2002      	movs	r0, #2
 8000ec2:	f000 fdc1 	bl	8001a48 <isButtonShortPressed>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d005      	beq.n	8000ed8 <fsm_traffic_tunning_mode+0x324>
 8000ecc:	2002      	movs	r0, #2
 8000ece:	f7ff fdb5 	bl	8000a3c <isButtonDebounced>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d104      	bne.n	8000ee2 <fsm_traffic_tunning_mode+0x32e>
 8000ed8:	f000 fc92 	bl	8001800 <receive_uart_command>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b07      	cmp	r3, #7
 8000ee0:	d118      	bne.n	8000f14 <fsm_traffic_tunning_mode+0x360>
            	lcd_clear_display();
 8000ee2:	f000 ff56 	bl	8001d92 <lcd_clear_display>
            	HAL_Delay(10);
 8000ee6:	200a      	movs	r0, #10
 8000ee8:	f001 fd7e 	bl	80029e8 <HAL_Delay>
                timeAmber = (timeAmber + 1) % 100;
 8000eec:	4b4c      	ldr	r3, [pc, #304]	; (8001020 <fsm_traffic_tunning_mode+0x46c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	1c5a      	adds	r2, r3, #1
 8000ef2:	4b4c      	ldr	r3, [pc, #304]	; (8001024 <fsm_traffic_tunning_mode+0x470>)
 8000ef4:	fb83 1302 	smull	r1, r3, r3, r2
 8000ef8:	1159      	asrs	r1, r3, #5
 8000efa:	17d3      	asrs	r3, r2, #31
 8000efc:	1acb      	subs	r3, r1, r3
 8000efe:	2164      	movs	r1, #100	; 0x64
 8000f00:	fb01 f303 	mul.w	r3, r1, r3
 8000f04:	1ad3      	subs	r3, r2, r3
 8000f06:	4a46      	ldr	r2, [pc, #280]	; (8001020 <fsm_traffic_tunning_mode+0x46c>)
 8000f08:	6013      	str	r3, [r2, #0]
                logNewTime();
 8000f0a:	f7ff fdb5 	bl	8000a78 <logNewTime>
                display_timerAmber();
 8000f0e:	f7ff fe37 	bl	8000b80 <display_timerAmber>
 8000f12:	e07a      	b.n	800100a <fsm_traffic_tunning_mode+0x456>
            } else if ((isButtonLongPressed(2) && isButtonDebounced(2))|| receive_uart_command() == DECREMENT_YELLOW_TIME) {
 8000f14:	2002      	movs	r0, #2
 8000f16:	f000 fdb1 	bl	8001a7c <isButtonLongPressed>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d005      	beq.n	8000f2c <fsm_traffic_tunning_mode+0x378>
 8000f20:	2002      	movs	r0, #2
 8000f22:	f7ff fd8b 	bl	8000a3c <isButtonDebounced>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d104      	bne.n	8000f36 <fsm_traffic_tunning_mode+0x382>
 8000f2c:	f000 fc68 	bl	8001800 <receive_uart_command>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b08      	cmp	r3, #8
 8000f34:	d119      	bne.n	8000f6a <fsm_traffic_tunning_mode+0x3b6>
            	lcd_clear_display();
 8000f36:	f000 ff2c 	bl	8001d92 <lcd_clear_display>
            	HAL_Delay(10);
 8000f3a:	200a      	movs	r0, #10
 8000f3c:	f001 fd54 	bl	80029e8 <HAL_Delay>
                timeAmber = (timeAmber - 1 + 100) % 100;
 8000f40:	4b37      	ldr	r3, [pc, #220]	; (8001020 <fsm_traffic_tunning_mode+0x46c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f103 0263 	add.w	r2, r3, #99	; 0x63
 8000f48:	4b36      	ldr	r3, [pc, #216]	; (8001024 <fsm_traffic_tunning_mode+0x470>)
 8000f4a:	fb83 1302 	smull	r1, r3, r3, r2
 8000f4e:	1159      	asrs	r1, r3, #5
 8000f50:	17d3      	asrs	r3, r2, #31
 8000f52:	1acb      	subs	r3, r1, r3
 8000f54:	2164      	movs	r1, #100	; 0x64
 8000f56:	fb01 f303 	mul.w	r3, r1, r3
 8000f5a:	1ad3      	subs	r3, r2, r3
 8000f5c:	4a30      	ldr	r2, [pc, #192]	; (8001020 <fsm_traffic_tunning_mode+0x46c>)
 8000f5e:	6013      	str	r3, [r2, #0]
                logNewTime();
 8000f60:	f7ff fd8a 	bl	8000a78 <logNewTime>
                display_timerAmber();
 8000f64:	f7ff fe0c 	bl	8000b80 <display_timerAmber>
 8000f68:	e04f      	b.n	800100a <fsm_traffic_tunning_mode+0x456>
            } else if ((isButtonShortPressed(1) && isButtonDebounced(1))||receive_uart_command() == SWITCH) {
 8000f6a:	2001      	movs	r0, #1
 8000f6c:	f000 fd6c 	bl	8001a48 <isButtonShortPressed>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d005      	beq.n	8000f82 <fsm_traffic_tunning_mode+0x3ce>
 8000f76:	2001      	movs	r0, #1
 8000f78:	f7ff fd60 	bl	8000a3c <isButtonDebounced>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d104      	bne.n	8000f8c <fsm_traffic_tunning_mode+0x3d8>
 8000f82:	f000 fc3d 	bl	8001800 <receive_uart_command>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b03      	cmp	r3, #3
 8000f8a:	d112      	bne.n	8000fb2 <fsm_traffic_tunning_mode+0x3fe>
                tuningStatus = RED_ADJ;
 8000f8c:	4b26      	ldr	r3, [pc, #152]	; (8001028 <fsm_traffic_tunning_mode+0x474>)
 8000f8e:	2201      	movs	r2, #1
 8000f90:	601a      	str	r2, [r3, #0]
                clearRoadLed();
 8000f92:	f000 fa01 	bl	8001398 <clearRoadLed>
                logNewTime();
 8000f96:	f7ff fd6f 	bl	8000a78 <logNewTime>
                settimer1(5, 5);
 8000f9a:	2105      	movs	r1, #5
 8000f9c:	2005      	movs	r0, #5
 8000f9e:	f001 fa97 	bl	80024d0 <settimer1>
                lcd_clear_display();
 8000fa2:	f000 fef6 	bl	8001d92 <lcd_clear_display>
                HAL_Delay(50);
 8000fa6:	2032      	movs	r0, #50	; 0x32
 8000fa8:	f001 fd1e 	bl	80029e8 <HAL_Delay>
                display_timerRed();
 8000fac:	f7ff fdb4 	bl	8000b18 <display_timerRed>
 8000fb0:	e02b      	b.n	800100a <fsm_traffic_tunning_mode+0x456>
            } else if ((isButtonShortPressed(0) && isButtonDebounced(0))|| receive_uart_command() == RESETALL) {
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f000 fd48 	bl	8001a48 <isButtonShortPressed>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d005      	beq.n	8000fca <fsm_traffic_tunning_mode+0x416>
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f7ff fd3c 	bl	8000a3c <isButtonDebounced>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d104      	bne.n	8000fd4 <fsm_traffic_tunning_mode+0x420>
 8000fca:	f000 fc19 	bl	8001800 <receive_uart_command>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b04      	cmp	r3, #4
 8000fd2:	d121      	bne.n	8001018 <fsm_traffic_tunning_mode+0x464>
                // Reset all lights to initial times when button 1 is pressed
                timeRed = initialTimeRed;
 8000fd4:	4b15      	ldr	r3, [pc, #84]	; (800102c <fsm_traffic_tunning_mode+0x478>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a15      	ldr	r2, [pc, #84]	; (8001030 <fsm_traffic_tunning_mode+0x47c>)
 8000fda:	6013      	str	r3, [r2, #0]
                timeAmber = initialTimeAmber;
 8000fdc:	4b15      	ldr	r3, [pc, #84]	; (8001034 <fsm_traffic_tunning_mode+0x480>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a0f      	ldr	r2, [pc, #60]	; (8001020 <fsm_traffic_tunning_mode+0x46c>)
 8000fe2:	6013      	str	r3, [r2, #0]
                timeGreen = initialTimeGreen;
 8000fe4:	4b14      	ldr	r3, [pc, #80]	; (8001038 <fsm_traffic_tunning_mode+0x484>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a14      	ldr	r2, [pc, #80]	; (800103c <fsm_traffic_tunning_mode+0x488>)
 8000fea:	6013      	str	r3, [r2, #0]
                logNewTime();  // Send new time information
 8000fec:	f7ff fd44 	bl	8000a78 <logNewTime>
            	lcd_clear_display();
 8000ff0:	f000 fecf 	bl	8001d92 <lcd_clear_display>
            	HAL_Delay(10);
 8000ff4:	200a      	movs	r0, #10
 8000ff6:	f001 fcf7 	bl	80029e8 <HAL_Delay>
                display_timerAmber();
 8000ffa:	f7ff fdc1 	bl	8000b80 <display_timerAmber>
                tuningStatus = AMBER_ADJ;  // Keep state GREEN_ADJ
 8000ffe:	4b0a      	ldr	r3, [pc, #40]	; (8001028 <fsm_traffic_tunning_mode+0x474>)
 8001000:	2202      	movs	r2, #2
 8001002:	601a      	str	r2, [r3, #0]
                clearRoadLed();  // Turn off all lights
 8001004:	f000 f9c8 	bl	8001398 <clearRoadLed>
            }
            break;
 8001008:	e006      	b.n	8001018 <fsm_traffic_tunning_mode+0x464>
 800100a:	e005      	b.n	8001018 <fsm_traffic_tunning_mode+0x464>
        default:
            break;
 800100c:	bf00      	nop
 800100e:	e004      	b.n	800101a <fsm_traffic_tunning_mode+0x466>
            break;
 8001010:	bf00      	nop
 8001012:	e002      	b.n	800101a <fsm_traffic_tunning_mode+0x466>
            break;
 8001014:	bf00      	nop
 8001016:	e000      	b.n	800101a <fsm_traffic_tunning_mode+0x466>
            break;
 8001018:	bf00      	nop
    }
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000068 	.word	0x20000068
 8001024:	51eb851f 	.word	0x51eb851f
 8001028:	20000944 	.word	0x20000944
 800102c:	20000014 	.word	0x20000014
 8001030:	20000064 	.word	0x20000064
 8001034:	20000018 	.word	0x20000018
 8001038:	2000001c 	.word	0x2000001c
 800103c:	2000006c 	.word	0x2000006c

08001040 <fsm_switch_mode>:

// ======================= CHUYỂN ĐỔI CHẾ ĐỘ =======================
void fsm_switch_mode(void) {
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
    if (isButtonLongPressed(1)|| (receive_uart_command() == SWITCH_TO_TUNING_MODE)	) {
 8001044:	2001      	movs	r0, #1
 8001046:	f000 fd19 	bl	8001a7c <isButtonLongPressed>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d104      	bne.n	800105a <fsm_switch_mode+0x1a>
 8001050:	f000 fbd6 	bl	8001800 <receive_uart_command>
 8001054:	4603      	mov	r3, r0
 8001056:	2b09      	cmp	r3, #9
 8001058:	d137      	bne.n	80010ca <fsm_switch_mode+0x8a>
        if (trafficMode != TUNING_MODE) {
 800105a:	4b1d      	ldr	r3, [pc, #116]	; (80010d0 <fsm_switch_mode+0x90>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	2b03      	cmp	r3, #3
 8001060:	d01f      	beq.n	80010a2 <fsm_switch_mode+0x62>
            lcd_clear_display();
 8001062:	f000 fe96 	bl	8001d92 <lcd_clear_display>
            HAL_Delay(10);
 8001066:	200a      	movs	r0, #10
 8001068:	f001 fcbe 	bl	80029e8 <HAL_Delay>
            display_timerRed();
 800106c:	f7ff fd54 	bl	8000b18 <display_timerRed>
            trafficMode = TUNING_MODE;
 8001070:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <fsm_switch_mode+0x90>)
 8001072:	2203      	movs	r2, #3
 8001074:	601a      	str	r2, [r3, #0]
            HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!SWITCH TO TUNING MODE#\r\n"), 500);
 8001076:	4917      	ldr	r1, [pc, #92]	; (80010d4 <fsm_switch_mode+0x94>)
 8001078:	4817      	ldr	r0, [pc, #92]	; (80010d8 <fsm_switch_mode+0x98>)
 800107a:	f004 fcfb 	bl	8005a74 <siprintf>
 800107e:	4603      	mov	r3, r0
 8001080:	b29a      	uxth	r2, r3
 8001082:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001086:	4914      	ldr	r1, [pc, #80]	; (80010d8 <fsm_switch_mode+0x98>)
 8001088:	4814      	ldr	r0, [pc, #80]	; (80010dc <fsm_switch_mode+0x9c>)
 800108a:	f003 fd6b 	bl	8004b64 <HAL_UART_Transmit>
            // TODO: prepare for next mode
            tuningStatus = INIT;
 800108e:	4b14      	ldr	r3, [pc, #80]	; (80010e0 <fsm_switch_mode+0xa0>)
 8001090:	220a      	movs	r2, #10
 8001092:	601a      	str	r2, [r3, #0]
            autoStatus = OFF;
 8001094:	4b13      	ldr	r3, [pc, #76]	; (80010e4 <fsm_switch_mode+0xa4>)
 8001096:	2200      	movs	r2, #0
 8001098:	601a      	str	r2, [r3, #0]
            manualStatus = OFF;
 800109a:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <fsm_switch_mode+0xa8>)
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
            HAL_Delay(10);
            trafficMode = INIT;
            HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!SWITCH TO AUTO MODE#\r\n"), 500);
        }
    }
}
 80010a0:	e013      	b.n	80010ca <fsm_switch_mode+0x8a>
            lcd_clear_display();
 80010a2:	f000 fe76 	bl	8001d92 <lcd_clear_display>
            HAL_Delay(10);
 80010a6:	200a      	movs	r0, #10
 80010a8:	f001 fc9e 	bl	80029e8 <HAL_Delay>
            trafficMode = INIT;
 80010ac:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <fsm_switch_mode+0x90>)
 80010ae:	220a      	movs	r2, #10
 80010b0:	601a      	str	r2, [r3, #0]
            HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!SWITCH TO AUTO MODE#\r\n"), 500);
 80010b2:	490e      	ldr	r1, [pc, #56]	; (80010ec <fsm_switch_mode+0xac>)
 80010b4:	4808      	ldr	r0, [pc, #32]	; (80010d8 <fsm_switch_mode+0x98>)
 80010b6:	f004 fcdd 	bl	8005a74 <siprintf>
 80010ba:	4603      	mov	r3, r0
 80010bc:	b29a      	uxth	r2, r3
 80010be:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80010c2:	4905      	ldr	r1, [pc, #20]	; (80010d8 <fsm_switch_mode+0x98>)
 80010c4:	4805      	ldr	r0, [pc, #20]	; (80010dc <fsm_switch_mode+0x9c>)
 80010c6:	f003 fd4d 	bl	8004b64 <HAL_UART_Transmit>
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	2000005c 	.word	0x2000005c
 80010d4:	080068e4 	.word	0x080068e4
 80010d8:	20000a34 	.word	0x20000a34
 80010dc:	200009ec 	.word	0x200009ec
 80010e0:	20000944 	.word	0x20000944
 80010e4:	20000060 	.word	0x20000060
 80010e8:	20000940 	.word	0x20000940
 80010ec:	08006900 	.word	0x08006900

080010f0 <fsm_traffic>:

// ======================= VÒNG LẶP CHÍNH =======================
void fsm_traffic(void) {
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
    switch (trafficMode) {
 80010f4:	4b2b      	ldr	r3, [pc, #172]	; (80011a4 <fsm_traffic+0xb4>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b0a      	cmp	r3, #10
 80010fa:	d006      	beq.n	800110a <fsm_traffic+0x1a>
 80010fc:	2b0a      	cmp	r3, #10
 80010fe:	dc4e      	bgt.n	800119e <fsm_traffic+0xae>
 8001100:	2b01      	cmp	r3, #1
 8001102:	d046      	beq.n	8001192 <fsm_traffic+0xa2>
 8001104:	2b03      	cmp	r3, #3
 8001106:	d047      	beq.n	8001198 <fsm_traffic+0xa8>
            break;
        case TUNING_MODE:
            fsm_traffic_tunning_mode();
            break;
        default:
            break;
 8001108:	e049      	b.n	800119e <fsm_traffic+0xae>
            if (timeRed != (timeAmber + timeGreen)) {
 800110a:	4b27      	ldr	r3, [pc, #156]	; (80011a8 <fsm_traffic+0xb8>)
 800110c:	681a      	ldr	r2, [r3, #0]
 800110e:	4b27      	ldr	r3, [pc, #156]	; (80011ac <fsm_traffic+0xbc>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	441a      	add	r2, r3
 8001114:	4b26      	ldr	r3, [pc, #152]	; (80011b0 <fsm_traffic+0xc0>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	429a      	cmp	r2, r3
 800111a:	d02b      	beq.n	8001174 <fsm_traffic+0x84>
                trafficMode = ERROR_MODE;
 800111c:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <fsm_traffic+0xb4>)
 800111e:	2204      	movs	r2, #4
 8001120:	601a      	str	r2, [r3, #0]
                HAL_UART_Transmit(&huart2, (void*)str, sprintf(str, "!TIMER ERROR#\r\n"), 500);
 8001122:	4924      	ldr	r1, [pc, #144]	; (80011b4 <fsm_traffic+0xc4>)
 8001124:	4824      	ldr	r0, [pc, #144]	; (80011b8 <fsm_traffic+0xc8>)
 8001126:	f004 fca5 	bl	8005a74 <siprintf>
 800112a:	4603      	mov	r3, r0
 800112c:	b29a      	uxth	r2, r3
 800112e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001132:	4921      	ldr	r1, [pc, #132]	; (80011b8 <fsm_traffic+0xc8>)
 8001134:	4821      	ldr	r0, [pc, #132]	; (80011bc <fsm_traffic+0xcc>)
 8001136:	f003 fd15 	bl	8004b64 <HAL_UART_Transmit>
                lcd_clear_display();
 800113a:	f000 fe2a 	bl	8001d92 <lcd_clear_display>
                HAL_Delay(10);
 800113e:	200a      	movs	r0, #10
 8001140:	f001 fc52 	bl	80029e8 <HAL_Delay>
                lcd_goto_XY(1, 0);
 8001144:	2100      	movs	r1, #0
 8001146:	2001      	movs	r0, #1
 8001148:	f000 fe2a 	bl	8001da0 <lcd_goto_XY>
                lcd_send_string("ERROR, TIME IS");
 800114c:	481c      	ldr	r0, [pc, #112]	; (80011c0 <fsm_traffic+0xd0>)
 800114e:	f000 fe0b 	bl	8001d68 <lcd_send_string>
                lcd_goto_XY(2, 0);
 8001152:	2100      	movs	r1, #0
 8001154:	2002      	movs	r0, #2
 8001156:	f000 fe23 	bl	8001da0 <lcd_goto_XY>
                lcd_send_string("NOT EQUAL");
 800115a:	481a      	ldr	r0, [pc, #104]	; (80011c4 <fsm_traffic+0xd4>)
 800115c:	f000 fe04 	bl	8001d68 <lcd_send_string>
                autoStatus = OFF;
 8001160:	4b19      	ldr	r3, [pc, #100]	; (80011c8 <fsm_traffic+0xd8>)
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
                manualStatus = OFF;
 8001166:	4b19      	ldr	r3, [pc, #100]	; (80011cc <fsm_traffic+0xdc>)
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
                tuningStatus = OFF;
 800116c:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <fsm_traffic+0xe0>)
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	e00b      	b.n	800118c <fsm_traffic+0x9c>
                trafficMode = AUTO_MODE;
 8001174:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <fsm_traffic+0xb4>)
 8001176:	2201      	movs	r2, #1
 8001178:	601a      	str	r2, [r3, #0]
                autoStatus = INIT;
 800117a:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <fsm_traffic+0xd8>)
 800117c:	220a      	movs	r2, #10
 800117e:	601a      	str	r2, [r3, #0]
                manualStatus = OFF;
 8001180:	4b12      	ldr	r3, [pc, #72]	; (80011cc <fsm_traffic+0xdc>)
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]
                tuningStatus = OFF;
 8001186:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <fsm_traffic+0xe0>)
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
            turnOffAllLED();
 800118c:	f000 f822 	bl	80011d4 <turnOffAllLED>
            break;
 8001190:	e006      	b.n	80011a0 <fsm_traffic+0xb0>
            fsm_traffic_auto_mode();
 8001192:	f7ff fab7 	bl	8000704 <fsm_traffic_auto_mode>
            break;
 8001196:	e003      	b.n	80011a0 <fsm_traffic+0xb0>
            fsm_traffic_tunning_mode();
 8001198:	f7ff fd0c 	bl	8000bb4 <fsm_traffic_tunning_mode>
            break;
 800119c:	e000      	b.n	80011a0 <fsm_traffic+0xb0>
            break;
 800119e:	bf00      	nop
    }
}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	2000005c 	.word	0x2000005c
 80011a8:	20000068 	.word	0x20000068
 80011ac:	2000006c 	.word	0x2000006c
 80011b0:	20000064 	.word	0x20000064
 80011b4:	08006918 	.word	0x08006918
 80011b8:	20000a34 	.word	0x20000a34
 80011bc:	200009ec 	.word	0x200009ec
 80011c0:	08006928 	.word	0x08006928
 80011c4:	08006938 	.word	0x08006938
 80011c8:	20000060 	.word	0x20000060
 80011cc:	20000940 	.word	0x20000940
 80011d0:	20000944 	.word	0x20000944

080011d4 <turnOffAllLED>:
 *      Author: Dell
 */

#include "Traffic_Light_FSM.h"

void turnOffAllLED(void) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LED1_A_Pin|LED1_B_Pin, GPIO_PIN_RESET);
 80011d8:	2200      	movs	r2, #0
 80011da:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80011de:	4805      	ldr	r0, [pc, #20]	; (80011f4 <turnOffAllLED+0x20>)
 80011e0:	f001 ff81 	bl	80030e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED2_A_Pin|LED2_B_Pin, GPIO_PIN_RESET);
 80011e4:	2200      	movs	r2, #0
 80011e6:	f44f 7140 	mov.w	r1, #768	; 0x300
 80011ea:	4803      	ldr	r0, [pc, #12]	; (80011f8 <turnOffAllLED+0x24>)
 80011ec:	f001 ff7b 	bl	80030e6 <HAL_GPIO_WritePin>
}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40010c00 	.word	0x40010c00
 80011f8:	40010800 	.word	0x40010800

080011fc <turnOnRed1>:

// Turn on RED LED for specified way
void turnOnRed1() {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LED1_A_Pin|LED1_B_Pin, GPIO_PIN_SET);
 8001200:	2201      	movs	r2, #1
 8001202:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8001206:	4802      	ldr	r0, [pc, #8]	; (8001210 <turnOnRed1+0x14>)
 8001208:	f001 ff6d 	bl	80030e6 <HAL_GPIO_WritePin>
}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40010c00 	.word	0x40010c00

08001214 <turnOnAmber1>:

// Turn on AMBER LED for specified way
void turnOnAmber1() {
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LED1_A_Pin, GPIO_PIN_RESET);
 8001218:	2200      	movs	r2, #0
 800121a:	2110      	movs	r1, #16
 800121c:	4805      	ldr	r0, [pc, #20]	; (8001234 <turnOnAmber1+0x20>)
 800121e:	f001 ff62 	bl	80030e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED1_B_Pin, GPIO_PIN_SET);
 8001222:	2201      	movs	r2, #1
 8001224:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001228:	4802      	ldr	r0, [pc, #8]	; (8001234 <turnOnAmber1+0x20>)
 800122a:	f001 ff5c 	bl	80030e6 <HAL_GPIO_WritePin>
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40010c00 	.word	0x40010c00

08001238 <turnOnGreen1>:

// Turn on GREEN LED for specified way
void turnOnGreen1() {
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, LED1_B_Pin, GPIO_PIN_RESET);
 800123c:	2200      	movs	r2, #0
 800123e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001242:	4805      	ldr	r0, [pc, #20]	; (8001258 <turnOnGreen1+0x20>)
 8001244:	f001 ff4f 	bl	80030e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, LED1_A_Pin, GPIO_PIN_SET);
 8001248:	2201      	movs	r2, #1
 800124a:	2110      	movs	r1, #16
 800124c:	4802      	ldr	r0, [pc, #8]	; (8001258 <turnOnGreen1+0x20>)
 800124e:	f001 ff4a 	bl	80030e6 <HAL_GPIO_WritePin>
}
 8001252:	bf00      	nop
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40010c00 	.word	0x40010c00

0800125c <turnOnRed2>:
void turnOnRed2() {
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED2_A_Pin|LED2_B_Pin, GPIO_PIN_SET);
 8001260:	2201      	movs	r2, #1
 8001262:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001266:	4802      	ldr	r0, [pc, #8]	; (8001270 <turnOnRed2+0x14>)
 8001268:	f001 ff3d 	bl	80030e6 <HAL_GPIO_WritePin>
}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40010800 	.word	0x40010800

08001274 <turnOnAmber2>:

// Turn on AMBER LED for specified way
void turnOnAmber2() {
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED2_A_Pin, GPIO_PIN_RESET);
 8001278:	2200      	movs	r2, #0
 800127a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800127e:	4805      	ldr	r0, [pc, #20]	; (8001294 <turnOnAmber2+0x20>)
 8001280:	f001 ff31 	bl	80030e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED2_B_Pin, GPIO_PIN_SET);
 8001284:	2201      	movs	r2, #1
 8001286:	f44f 7100 	mov.w	r1, #512	; 0x200
 800128a:	4802      	ldr	r0, [pc, #8]	; (8001294 <turnOnAmber2+0x20>)
 800128c:	f001 ff2b 	bl	80030e6 <HAL_GPIO_WritePin>
}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40010800 	.word	0x40010800

08001298 <turnOnGreen2>:

// Turn on GREEN LED for specified way
void turnOnGreen2() {
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, LED2_B_Pin, GPIO_PIN_RESET);
 800129c:	2200      	movs	r2, #0
 800129e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80012a2:	4805      	ldr	r0, [pc, #20]	; (80012b8 <turnOnGreen2+0x20>)
 80012a4:	f001 ff1f 	bl	80030e6 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, LED2_A_Pin, GPIO_PIN_SET);
 80012a8:	2201      	movs	r2, #1
 80012aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012ae:	4802      	ldr	r0, [pc, #8]	; (80012b8 <turnOnGreen2+0x20>)
 80012b0:	f001 ff19 	bl	80030e6 <HAL_GPIO_WritePin>
}
 80012b4:	bf00      	nop
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40010800 	.word	0x40010800

080012bc <blinkyRed>:
// Blink RED LEDs
void blinkyRed(void) {
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
    if (timerFlag[5] == 1) {
 80012c0:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <blinkyRed+0x30>)
 80012c2:	695b      	ldr	r3, [r3, #20]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d10e      	bne.n	80012e6 <blinkyRed+0x2a>
        HAL_GPIO_TogglePin(GPIOA,LED2_B_Pin|LED2_A_Pin);
 80012c8:	f44f 7140 	mov.w	r1, #768	; 0x300
 80012cc:	4808      	ldr	r0, [pc, #32]	; (80012f0 <blinkyRed+0x34>)
 80012ce:	f001 ff22 	bl	8003116 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(GPIOB, LED1_A_Pin | LED1_B_Pin);
 80012d2:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80012d6:	4807      	ldr	r0, [pc, #28]	; (80012f4 <blinkyRed+0x38>)
 80012d8:	f001 ff1d 	bl	8003116 <HAL_GPIO_TogglePin>
        settimer1(5, 500);
 80012dc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80012e0:	2005      	movs	r0, #5
 80012e2:	f001 f8f5 	bl	80024d0 <settimer1>
    }
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000b50 	.word	0x20000b50
 80012f0:	40010800 	.word	0x40010800
 80012f4:	40010c00 	.word	0x40010c00

080012f8 <blinkyAmber>:

// Blink AMBER LEDs
void blinkyAmber(void) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
    if (timerFlag[7] == 1) {
 80012fc:	4b0f      	ldr	r3, [pc, #60]	; (800133c <blinkyAmber+0x44>)
 80012fe:	69db      	ldr	r3, [r3, #28]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d119      	bne.n	8001338 <blinkyAmber+0x40>
        HAL_GPIO_WritePin(GPIOB, LED1_A_Pin, RESET);
 8001304:	2200      	movs	r2, #0
 8001306:	2110      	movs	r1, #16
 8001308:	480d      	ldr	r0, [pc, #52]	; (8001340 <blinkyAmber+0x48>)
 800130a:	f001 feec 	bl	80030e6 <HAL_GPIO_WritePin>
        HAL_GPIO_TogglePin(GPIOB, LED1_B_Pin);
 800130e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001312:	480b      	ldr	r0, [pc, #44]	; (8001340 <blinkyAmber+0x48>)
 8001314:	f001 feff 	bl	8003116 <HAL_GPIO_TogglePin>
        HAL_GPIO_WritePin(GPIOA, LED2_A_Pin, RESET);
 8001318:	2200      	movs	r2, #0
 800131a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800131e:	4809      	ldr	r0, [pc, #36]	; (8001344 <blinkyAmber+0x4c>)
 8001320:	f001 fee1 	bl	80030e6 <HAL_GPIO_WritePin>
        HAL_GPIO_TogglePin(GPIOA, LED2_B_Pin);
 8001324:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001328:	4806      	ldr	r0, [pc, #24]	; (8001344 <blinkyAmber+0x4c>)
 800132a:	f001 fef4 	bl	8003116 <HAL_GPIO_TogglePin>
        settimer1(7, 500);
 800132e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001332:	2007      	movs	r0, #7
 8001334:	f001 f8cc 	bl	80024d0 <settimer1>
    }
}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000b50 	.word	0x20000b50
 8001340:	40010c00 	.word	0x40010c00
 8001344:	40010800 	.word	0x40010800

08001348 <blinkyGreen>:

// Blink GREEN LEDs
void blinkyGreen(void) {
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
    if (timerFlag[6] == 1) {
 800134c:	4b0f      	ldr	r3, [pc, #60]	; (800138c <blinkyGreen+0x44>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d119      	bne.n	8001388 <blinkyGreen+0x40>
        HAL_GPIO_WritePin(GPIOB, LED1_B_Pin, RESET);
 8001354:	2200      	movs	r2, #0
 8001356:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800135a:	480d      	ldr	r0, [pc, #52]	; (8001390 <blinkyGreen+0x48>)
 800135c:	f001 fec3 	bl	80030e6 <HAL_GPIO_WritePin>
        HAL_GPIO_TogglePin(GPIOB, LED1_A_Pin);
 8001360:	2110      	movs	r1, #16
 8001362:	480b      	ldr	r0, [pc, #44]	; (8001390 <blinkyGreen+0x48>)
 8001364:	f001 fed7 	bl	8003116 <HAL_GPIO_TogglePin>
        HAL_GPIO_WritePin(GPIOA, LED2_B_Pin, RESET);
 8001368:	2200      	movs	r2, #0
 800136a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800136e:	4809      	ldr	r0, [pc, #36]	; (8001394 <blinkyGreen+0x4c>)
 8001370:	f001 feb9 	bl	80030e6 <HAL_GPIO_WritePin>
        HAL_GPIO_TogglePin(GPIOA, LED2_A_Pin);
 8001374:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001378:	4806      	ldr	r0, [pc, #24]	; (8001394 <blinkyGreen+0x4c>)
 800137a:	f001 fecc 	bl	8003116 <HAL_GPIO_TogglePin>
        settimer1(6, 500);
 800137e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8001382:	2006      	movs	r0, #6
 8001384:	f001 f8a4 	bl	80024d0 <settimer1>
    }
}
 8001388:	bf00      	nop
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20000b50 	.word	0x20000b50
 8001390:	40010c00 	.word	0x40010c00
 8001394:	40010800 	.word	0x40010800

08001398 <clearRoadLed>:

// Clear all road LEDs
void clearRoadLed(void) {
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
    turnOffAllLED();
 800139c:	f7ff ff1a 	bl	80011d4 <turnOffAllLED>
}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <Ringbuf_init>:
ring_buffer *_tx_buffer2;

void store_char (unsigned char c, ring_buffer *buffer);

void Ringbuf_init(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  _rx_buffer1 = &rx_buffer1;
 80013a8:	4b17      	ldr	r3, [pc, #92]	; (8001408 <Ringbuf_init+0x64>)
 80013aa:	4a18      	ldr	r2, [pc, #96]	; (800140c <Ringbuf_init+0x68>)
 80013ac:	601a      	str	r2, [r3, #0]
  _tx_buffer1 = &tx_buffer1;
 80013ae:	4b18      	ldr	r3, [pc, #96]	; (8001410 <Ringbuf_init+0x6c>)
 80013b0:	4a18      	ldr	r2, [pc, #96]	; (8001414 <Ringbuf_init+0x70>)
 80013b2:	601a      	str	r2, [r3, #0]
  _rx_buffer2 = &rx_buffer2;
 80013b4:	4b18      	ldr	r3, [pc, #96]	; (8001418 <Ringbuf_init+0x74>)
 80013b6:	4a19      	ldr	r2, [pc, #100]	; (800141c <Ringbuf_init+0x78>)
 80013b8:	601a      	str	r2, [r3, #0]
  _tx_buffer2 = &tx_buffer2;
 80013ba:	4b19      	ldr	r3, [pc, #100]	; (8001420 <Ringbuf_init+0x7c>)
 80013bc:	4a19      	ldr	r2, [pc, #100]	; (8001424 <Ringbuf_init+0x80>)
 80013be:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_ERR);
 80013c0:	4b19      	ldr	r3, [pc, #100]	; (8001428 <Ringbuf_init+0x84>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	695a      	ldr	r2, [r3, #20]
 80013c6:	4b18      	ldr	r3, [pc, #96]	; (8001428 <Ringbuf_init+0x84>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f042 0201 	orr.w	r2, r2, #1
 80013ce:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_ERR);
 80013d0:	4b16      	ldr	r3, [pc, #88]	; (800142c <Ringbuf_init+0x88>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	695a      	ldr	r2, [r3, #20]
 80013d6:	4b15      	ldr	r3, [pc, #84]	; (800142c <Ringbuf_init+0x88>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f042 0201 	orr.w	r2, r2, #1
 80013de:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_RXNE);
 80013e0:	4b11      	ldr	r3, [pc, #68]	; (8001428 <Ringbuf_init+0x84>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	68da      	ldr	r2, [r3, #12]
 80013e6:	4b10      	ldr	r3, [pc, #64]	; (8001428 <Ringbuf_init+0x84>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f042 0220 	orr.w	r2, r2, #32
 80013ee:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_RXNE);
 80013f0:	4b0e      	ldr	r3, [pc, #56]	; (800142c <Ringbuf_init+0x88>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	68da      	ldr	r2, [r3, #12]
 80013f6:	4b0d      	ldr	r3, [pc, #52]	; (800142c <Ringbuf_init+0x88>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f042 0220 	orr.w	r2, r2, #32
 80013fe:	60da      	str	r2, [r3, #12]
}
 8001400:	bf00      	nop
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr
 8001408:	20000974 	.word	0x20000974
 800140c:	20000108 	.word	0x20000108
 8001410:	200009b0 	.word	0x200009b0
 8001414:	20000310 	.word	0x20000310
 8001418:	200009e8 	.word	0x200009e8
 800141c:	20000518 	.word	0x20000518
 8001420:	20000970 	.word	0x20000970
 8001424:	20000720 	.word	0x20000720
 8001428:	20000a68 	.word	0x20000a68
 800142c:	200009ec 	.word	0x200009ec

08001430 <Look_for>:
    buffer->head = i;
  }
}

int Look_for (char *str, char *buffertolookinto)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b086      	sub	sp, #24
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	6039      	str	r1, [r7, #0]
  int stringlength = strlen (str);
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7fe fe90 	bl	8000160 <strlen>
 8001440:	4603      	mov	r3, r0
 8001442:	60fb      	str	r3, [r7, #12]
  int bufferlength = strlen (buffertolookinto);
 8001444:	6838      	ldr	r0, [r7, #0]
 8001446:	f7fe fe8b 	bl	8000160 <strlen>
 800144a:	4603      	mov	r3, r0
 800144c:	60bb      	str	r3, [r7, #8]
  int so_far = 0;
 800144e:	2300      	movs	r3, #0
 8001450:	617b      	str	r3, [r7, #20]
  int indx = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	613b      	str	r3, [r7, #16]

repeat:
  while (str[so_far] != buffertolookinto[indx]) indx++;
 8001456:	e002      	b.n	800145e <Look_for+0x2e>
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	3301      	adds	r3, #1
 800145c:	613b      	str	r3, [r7, #16]
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	687a      	ldr	r2, [r7, #4]
 8001462:	4413      	add	r3, r2
 8001464:	781a      	ldrb	r2, [r3, #0]
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	6839      	ldr	r1, [r7, #0]
 800146a:	440b      	add	r3, r1
 800146c:	781b      	ldrb	r3, [r3, #0]
 800146e:	429a      	cmp	r2, r3
 8001470:	d1f2      	bne.n	8001458 <Look_for+0x28>
  if (str[so_far] == buffertolookinto[indx]){
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	4413      	add	r3, r2
 8001478:	781a      	ldrb	r2, [r3, #0]
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	6839      	ldr	r1, [r7, #0]
 800147e:	440b      	add	r3, r1
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	429a      	cmp	r2, r3
 8001484:	d111      	bne.n	80014aa <Look_for+0x7a>
    while (str[so_far] == buffertolookinto[indx])
 8001486:	e005      	b.n	8001494 <Look_for+0x64>
    {
      so_far++;
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	3301      	adds	r3, #1
 800148c:	617b      	str	r3, [r7, #20]
      indx++;
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	3301      	adds	r3, #1
 8001492:	613b      	str	r3, [r7, #16]
    while (str[so_far] == buffertolookinto[indx])
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	781a      	ldrb	r2, [r3, #0]
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	6839      	ldr	r1, [r7, #0]
 80014a0:	440b      	add	r3, r1
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d0ef      	beq.n	8001488 <Look_for+0x58>
 80014a8:	e008      	b.n	80014bc <Look_for+0x8c>
    }
  } else {
    so_far = 0;
 80014aa:	2300      	movs	r3, #0
 80014ac:	617b      	str	r3, [r7, #20]
    if (indx >= bufferlength) return -1;
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	dbcf      	blt.n	8001456 <Look_for+0x26>
 80014b6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ba:	e007      	b.n	80014cc <Look_for+0x9c>
    goto repeat;
  }

  if (so_far == stringlength) return 1;
 80014bc:	697a      	ldr	r2, [r7, #20]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d101      	bne.n	80014c8 <Look_for+0x98>
 80014c4:	2301      	movs	r3, #1
 80014c6:	e001      	b.n	80014cc <Look_for+0x9c>
  else return -1;
 80014c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3718      	adds	r7, #24
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <Uart_peek>:
    _rx_buffer2->head = 0;
  }
}

int Uart_peek(UART_HandleTypeDef *uart)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  if (uart == device_uart)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4a1c      	ldr	r2, [pc, #112]	; (8001550 <Uart_peek+0x7c>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d114      	bne.n	800150e <Uart_peek+0x3a>
  {
    if(_rx_buffer1->head == _rx_buffer1->tail)
 80014e4:	4b1b      	ldr	r3, [pc, #108]	; (8001554 <Uart_peek+0x80>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80014ec:	4b19      	ldr	r3, [pc, #100]	; (8001554 <Uart_peek+0x80>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d102      	bne.n	80014fe <Uart_peek+0x2a>
    {
      return -1;
 80014f8:	f04f 33ff 	mov.w	r3, #4294967295
 80014fc:	e022      	b.n	8001544 <Uart_peek+0x70>
    }
    else
    {
      return _rx_buffer1->buffer[_rx_buffer1->tail];
 80014fe:	4b15      	ldr	r3, [pc, #84]	; (8001554 <Uart_peek+0x80>)
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	4b14      	ldr	r3, [pc, #80]	; (8001554 <Uart_peek+0x80>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800150a:	5cd3      	ldrb	r3, [r2, r3]
 800150c:	e01a      	b.n	8001544 <Uart_peek+0x70>
    }
  }

  else if (uart == pc_uart)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a11      	ldr	r2, [pc, #68]	; (8001558 <Uart_peek+0x84>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d114      	bne.n	8001540 <Uart_peek+0x6c>
  {
    if(_rx_buffer2->head == _rx_buffer2->tail)
 8001516:	4b11      	ldr	r3, [pc, #68]	; (800155c <Uart_peek+0x88>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800151e:	4b0f      	ldr	r3, [pc, #60]	; (800155c <Uart_peek+0x88>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001526:	429a      	cmp	r2, r3
 8001528:	d102      	bne.n	8001530 <Uart_peek+0x5c>
    {
      return -1;
 800152a:	f04f 33ff 	mov.w	r3, #4294967295
 800152e:	e009      	b.n	8001544 <Uart_peek+0x70>
    }
    else
    {
      return _rx_buffer2->buffer[_rx_buffer2->tail];
 8001530:	4b0a      	ldr	r3, [pc, #40]	; (800155c <Uart_peek+0x88>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	4b09      	ldr	r3, [pc, #36]	; (800155c <Uart_peek+0x88>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800153c:	5cd3      	ldrb	r3, [r2, r3]
 800153e:	e001      	b.n	8001544 <Uart_peek+0x70>
    }
  }

  return -1;
 8001540:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001544:	4618      	mov	r0, r3
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	20000a68 	.word	0x20000a68
 8001554:	20000974 	.word	0x20000974
 8001558:	200009ec 	.word	0x200009ec
 800155c:	200009e8 	.word	0x200009e8

08001560 <Uart_read>:

int Uart_read(UART_HandleTypeDef *uart)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  if (uart == device_uart)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	4a29      	ldr	r2, [pc, #164]	; (8001610 <Uart_read+0xb0>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d121      	bne.n	80015b4 <Uart_read+0x54>
  {
    if(_rx_buffer1->head == _rx_buffer1->tail)
 8001570:	4b28      	ldr	r3, [pc, #160]	; (8001614 <Uart_read+0xb4>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001578:	4b26      	ldr	r3, [pc, #152]	; (8001614 <Uart_read+0xb4>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001580:	429a      	cmp	r2, r3
 8001582:	d102      	bne.n	800158a <Uart_read+0x2a>
    {
      return -1;
 8001584:	f04f 33ff 	mov.w	r3, #4294967295
 8001588:	e03c      	b.n	8001604 <Uart_read+0xa4>
    }
    else
    {
      unsigned char c = _rx_buffer1->buffer[_rx_buffer1->tail];
 800158a:	4b22      	ldr	r3, [pc, #136]	; (8001614 <Uart_read+0xb4>)
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	4b21      	ldr	r3, [pc, #132]	; (8001614 <Uart_read+0xb4>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001596:	5cd3      	ldrb	r3, [r2, r3]
 8001598:	73bb      	strb	r3, [r7, #14]
      _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 800159a:	4b1e      	ldr	r3, [pc, #120]	; (8001614 <Uart_read+0xb4>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80015a2:	1c5a      	adds	r2, r3, #1
 80015a4:	4b1b      	ldr	r3, [pc, #108]	; (8001614 <Uart_read+0xb4>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80015ac:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      return c;
 80015b0:	7bbb      	ldrb	r3, [r7, #14]
 80015b2:	e027      	b.n	8001604 <Uart_read+0xa4>
    }
  }

  else if (uart == pc_uart)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	4a18      	ldr	r2, [pc, #96]	; (8001618 <Uart_read+0xb8>)
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d121      	bne.n	8001600 <Uart_read+0xa0>
  {
    if(_rx_buffer2->head == _rx_buffer2->tail)
 80015bc:	4b17      	ldr	r3, [pc, #92]	; (800161c <Uart_read+0xbc>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80015c4:	4b15      	ldr	r3, [pc, #84]	; (800161c <Uart_read+0xbc>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d102      	bne.n	80015d6 <Uart_read+0x76>
    {
      return -1;
 80015d0:	f04f 33ff 	mov.w	r3, #4294967295
 80015d4:	e016      	b.n	8001604 <Uart_read+0xa4>
    }
    else
    {
      unsigned char c = _rx_buffer2->buffer[_rx_buffer2->tail];
 80015d6:	4b11      	ldr	r3, [pc, #68]	; (800161c <Uart_read+0xbc>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	4b10      	ldr	r3, [pc, #64]	; (800161c <Uart_read+0xbc>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80015e2:	5cd3      	ldrb	r3, [r2, r3]
 80015e4:	73fb      	strb	r3, [r7, #15]
      _rx_buffer2->tail = (unsigned int)(_rx_buffer2->tail + 1) % UART_BUFFER_SIZE;
 80015e6:	4b0d      	ldr	r3, [pc, #52]	; (800161c <Uart_read+0xbc>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80015ee:	1c5a      	adds	r2, r3, #1
 80015f0:	4b0a      	ldr	r3, [pc, #40]	; (800161c <Uart_read+0xbc>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80015f8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      return c;
 80015fc:	7bfb      	ldrb	r3, [r7, #15]
 80015fe:	e001      	b.n	8001604 <Uart_read+0xa4>
    }
  }

  else return -1;
 8001600:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001604:	4618      	mov	r0, r3
 8001606:	3714      	adds	r7, #20
 8001608:	46bd      	mov	sp, r7
 800160a:	bc80      	pop	{r7}
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	20000a68 	.word	0x20000a68
 8001614:	20000974 	.word	0x20000974
 8001618:	200009ec 	.word	0x200009ec
 800161c:	200009e8 	.word	0x200009e8

08001620 <Uart_write>:

void Uart_write(int c, UART_HandleTypeDef *uart)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
  if (c>=0)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	db54      	blt.n	80016da <Uart_write+0xba>
  {
    if (uart == device_uart){
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	4a2c      	ldr	r2, [pc, #176]	; (80016e4 <Uart_write+0xc4>)
 8001634:	4293      	cmp	r3, r2
 8001636:	d126      	bne.n	8001686 <Uart_write+0x66>
      int i = (_tx_buffer1->head + 1) % UART_BUFFER_SIZE;
 8001638:	4b2b      	ldr	r3, [pc, #172]	; (80016e8 <Uart_write+0xc8>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001640:	3301      	adds	r3, #1
 8001642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001646:	60bb      	str	r3, [r7, #8]

      while (i == _tx_buffer1->tail);
 8001648:	bf00      	nop
 800164a:	4b27      	ldr	r3, [pc, #156]	; (80016e8 <Uart_write+0xc8>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	429a      	cmp	r2, r3
 8001656:	d0f8      	beq.n	800164a <Uart_write+0x2a>

      _tx_buffer1->buffer[_tx_buffer1->head] = (uint8_t)c;
 8001658:	4b23      	ldr	r3, [pc, #140]	; (80016e8 <Uart_write+0xc8>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	4b22      	ldr	r3, [pc, #136]	; (80016e8 <Uart_write+0xc8>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001664:	6879      	ldr	r1, [r7, #4]
 8001666:	b2c9      	uxtb	r1, r1
 8001668:	54d1      	strb	r1, [r2, r3]
      _tx_buffer1->head = i;
 800166a:	4b1f      	ldr	r3, [pc, #124]	; (80016e8 <Uart_write+0xc8>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	68ba      	ldr	r2, [r7, #8]
 8001670:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

      __HAL_UART_ENABLE_IT(device_uart, UART_IT_TXE); // Enable UART transmission interrupt
 8001674:	4b1b      	ldr	r3, [pc, #108]	; (80016e4 <Uart_write+0xc4>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	68da      	ldr	r2, [r3, #12]
 800167a:	4b1a      	ldr	r3, [pc, #104]	; (80016e4 <Uart_write+0xc4>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001682:	60da      	str	r2, [r3, #12]
      _tx_buffer2->head = i;

      __HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
    }
  }
}
 8001684:	e029      	b.n	80016da <Uart_write+0xba>
    else if (uart == pc_uart){
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	4a18      	ldr	r2, [pc, #96]	; (80016ec <Uart_write+0xcc>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d125      	bne.n	80016da <Uart_write+0xba>
      int i = (_tx_buffer2->head + 1) % UART_BUFFER_SIZE;
 800168e:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <Uart_write+0xd0>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001696:	3301      	adds	r3, #1
 8001698:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800169c:	60fb      	str	r3, [r7, #12]
      while (i == _tx_buffer2->tail);
 800169e:	bf00      	nop
 80016a0:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <Uart_write+0xd0>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d0f8      	beq.n	80016a0 <Uart_write+0x80>
      _tx_buffer2->buffer[_tx_buffer2->head] = (uint8_t)c;
 80016ae:	4b10      	ldr	r3, [pc, #64]	; (80016f0 <Uart_write+0xd0>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <Uart_write+0xd0>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80016ba:	6879      	ldr	r1, [r7, #4]
 80016bc:	b2c9      	uxtb	r1, r1
 80016be:	54d1      	strb	r1, [r2, r3]
      _tx_buffer2->head = i;
 80016c0:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <Uart_write+0xd0>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	68fa      	ldr	r2, [r7, #12]
 80016c6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      __HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
 80016ca:	4b08      	ldr	r3, [pc, #32]	; (80016ec <Uart_write+0xcc>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	68da      	ldr	r2, [r3, #12]
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <Uart_write+0xcc>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016d8:	60da      	str	r2, [r3, #12]
}
 80016da:	bf00      	nop
 80016dc:	3714      	adds	r7, #20
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr
 80016e4:	20000a68 	.word	0x20000a68
 80016e8:	200009b0 	.word	0x200009b0
 80016ec:	200009ec 	.word	0x200009ec
 80016f0:	20000970 	.word	0x20000970

080016f4 <IsDataAvailable>:

int IsDataAvailable(UART_HandleTypeDef *uart)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  if (uart == device_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer1->head - _rx_buffer1->tail) % UART_BUFFER_SIZE;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4a19      	ldr	r2, [pc, #100]	; (8001764 <IsDataAvailable+0x70>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d111      	bne.n	8001728 <IsDataAvailable+0x34>
 8001704:	4b18      	ldr	r3, [pc, #96]	; (8001768 <IsDataAvailable+0x74>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800170c:	b29a      	uxth	r2, r3
 800170e:	4b16      	ldr	r3, [pc, #88]	; (8001768 <IsDataAvailable+0x74>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001716:	b29b      	uxth	r3, r3
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	b29b      	uxth	r3, r3
 800171c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001720:	b29b      	uxth	r3, r3
 8001722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001726:	e017      	b.n	8001758 <IsDataAvailable+0x64>
  else if (uart == pc_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer2->head - _rx_buffer2->tail) % UART_BUFFER_SIZE;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	4a10      	ldr	r2, [pc, #64]	; (800176c <IsDataAvailable+0x78>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d111      	bne.n	8001754 <IsDataAvailable+0x60>
 8001730:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <IsDataAvailable+0x7c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001738:	b29a      	uxth	r2, r3
 800173a:	4b0d      	ldr	r3, [pc, #52]	; (8001770 <IsDataAvailable+0x7c>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001742:	b29b      	uxth	r3, r3
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	b29b      	uxth	r3, r3
 8001748:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800174c:	b29b      	uxth	r3, r3
 800174e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001752:	e001      	b.n	8001758 <IsDataAvailable+0x64>
  return -1;
 8001754:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001758:	4618      	mov	r0, r3
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	20000a68 	.word	0x20000a68
 8001768:	20000974 	.word	0x20000974
 800176c:	200009ec 	.word	0x200009ec
 8001770:	200009e8 	.word	0x200009e8

08001774 <Get_after>:

int Get_after (char *string, uint8_t numberofchars, char *buffertosave, UART_HandleTypeDef *uart)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	607a      	str	r2, [r7, #4]
 800177e:	603b      	str	r3, [r7, #0]
 8001780:	460b      	mov	r3, r1
 8001782:	72fb      	strb	r3, [r7, #11]
  while (Wait_for(string, uart) != 1);
 8001784:	bf00      	nop
 8001786:	6839      	ldr	r1, [r7, #0]
 8001788:	68f8      	ldr	r0, [r7, #12]
 800178a:	f000 f92f 	bl	80019ec <Wait_for>
 800178e:	4603      	mov	r3, r0
 8001790:	2b01      	cmp	r3, #1
 8001792:	d1f8      	bne.n	8001786 <Get_after+0x12>
  for (int indx=0; indx<numberofchars; indx++)
 8001794:	2300      	movs	r3, #0
 8001796:	617b      	str	r3, [r7, #20]
 8001798:	e012      	b.n	80017c0 <Get_after+0x4c>
  {
    while (!(IsDataAvailable(uart)));
 800179a:	bf00      	nop
 800179c:	6838      	ldr	r0, [r7, #0]
 800179e:	f7ff ffa9 	bl	80016f4 <IsDataAvailable>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d0f9      	beq.n	800179c <Get_after+0x28>
    buffertosave[indx] = Uart_read(uart);
 80017a8:	6838      	ldr	r0, [r7, #0]
 80017aa:	f7ff fed9 	bl	8001560 <Uart_read>
 80017ae:	4601      	mov	r1, r0
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	687a      	ldr	r2, [r7, #4]
 80017b4:	4413      	add	r3, r2
 80017b6:	b2ca      	uxtb	r2, r1
 80017b8:	701a      	strb	r2, [r3, #0]
  for (int indx=0; indx<numberofchars; indx++)
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	3301      	adds	r3, #1
 80017be:	617b      	str	r3, [r7, #20]
 80017c0:	7afb      	ldrb	r3, [r7, #11]
 80017c2:	697a      	ldr	r2, [r7, #20]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	dbe8      	blt.n	800179a <Get_after+0x26>
  }
  return 1;
 80017c8:	2301      	movs	r3, #1
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <Uart_sendstring>:

void Uart_sendstring (const char *s, UART_HandleTypeDef *uart)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b082      	sub	sp, #8
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
 80017da:	6039      	str	r1, [r7, #0]
  while(*s!='\0') Uart_write(*s++, uart);
 80017dc:	e007      	b.n	80017ee <Uart_sendstring+0x1c>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	1c5a      	adds	r2, r3, #1
 80017e2:	607a      	str	r2, [r7, #4]
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	6839      	ldr	r1, [r7, #0]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff ff19 	bl	8001620 <Uart_write>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1f3      	bne.n	80017de <Uart_sendstring+0xc>
}
 80017f6:	bf00      	nop
 80017f8:	bf00      	nop
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <receive_uart_command>:
}

char uart_buffer[50];  // Bộ đệm nhận UART
char command_buffer[50];  // Bộ đệm lệnh đã nhận
// Cập nhật trạng thái đèn giao thông
int receive_uart_command(void) {
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
    // Đọc dữ liệu UART nếu có sẵn
    HAL_UART_Receive(&huart2, (uint8_t *)uart_buffer, sizeof(uart_buffer), 100);
 8001804:	2364      	movs	r3, #100	; 0x64
 8001806:	2232      	movs	r2, #50	; 0x32
 8001808:	492b      	ldr	r1, [pc, #172]	; (80018b8 <receive_uart_command+0xb8>)
 800180a:	482c      	ldr	r0, [pc, #176]	; (80018bc <receive_uart_command+0xbc>)
 800180c:	f003 fa35 	bl	8004c7a <HAL_UART_Receive>

    // Kiểm tra và xử lý lệnh
    if (strstr(uart_buffer, "!INCREMENT RED#")) {
 8001810:	492b      	ldr	r1, [pc, #172]	; (80018c0 <receive_uart_command+0xc0>)
 8001812:	4829      	ldr	r0, [pc, #164]	; (80018b8 <receive_uart_command+0xb8>)
 8001814:	f004 f95d 	bl	8005ad2 <strstr>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <receive_uart_command+0x22>
        return INCREMENT_RED_TIME;
 800181e:	2301      	movs	r3, #1
 8001820:	e048      	b.n	80018b4 <receive_uart_command+0xb4>
    } else if (strstr(uart_buffer, "!DECREMENT RED#")) {
 8001822:	4928      	ldr	r1, [pc, #160]	; (80018c4 <receive_uart_command+0xc4>)
 8001824:	4824      	ldr	r0, [pc, #144]	; (80018b8 <receive_uart_command+0xb8>)
 8001826:	f004 f954 	bl	8005ad2 <strstr>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <receive_uart_command+0x34>
        return DECREMENT_RED_TIME;
 8001830:	2302      	movs	r3, #2
 8001832:	e03f      	b.n	80018b4 <receive_uart_command+0xb4>
    } else if (strstr(uart_buffer, "!INCREMENT GREEN#")) {
 8001834:	4924      	ldr	r1, [pc, #144]	; (80018c8 <receive_uart_command+0xc8>)
 8001836:	4820      	ldr	r0, [pc, #128]	; (80018b8 <receive_uart_command+0xb8>)
 8001838:	f004 f94b 	bl	8005ad2 <strstr>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <receive_uart_command+0x46>
        return INCREMENT_GREEN_TIME;
 8001842:	2305      	movs	r3, #5
 8001844:	e036      	b.n	80018b4 <receive_uart_command+0xb4>
    } else if (strstr(uart_buffer, "!DECREMENT GREEN#")) {
 8001846:	4921      	ldr	r1, [pc, #132]	; (80018cc <receive_uart_command+0xcc>)
 8001848:	481b      	ldr	r0, [pc, #108]	; (80018b8 <receive_uart_command+0xb8>)
 800184a:	f004 f942 	bl	8005ad2 <strstr>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <receive_uart_command+0x58>
        return DECREMENT_GREEN_TIME;
 8001854:	2306      	movs	r3, #6
 8001856:	e02d      	b.n	80018b4 <receive_uart_command+0xb4>
    } else if (strstr(uart_buffer, "!INCREMENT YELLOW#")) {
 8001858:	491d      	ldr	r1, [pc, #116]	; (80018d0 <receive_uart_command+0xd0>)
 800185a:	4817      	ldr	r0, [pc, #92]	; (80018b8 <receive_uart_command+0xb8>)
 800185c:	f004 f939 	bl	8005ad2 <strstr>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <receive_uart_command+0x6a>
        return INCREMENT_YELLOW_TIME;
 8001866:	2307      	movs	r3, #7
 8001868:	e024      	b.n	80018b4 <receive_uart_command+0xb4>
    } else if (strstr(uart_buffer, "!DECREMENT YELLOW#")) {
 800186a:	491a      	ldr	r1, [pc, #104]	; (80018d4 <receive_uart_command+0xd4>)
 800186c:	4812      	ldr	r0, [pc, #72]	; (80018b8 <receive_uart_command+0xb8>)
 800186e:	f004 f930 	bl	8005ad2 <strstr>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <receive_uart_command+0x7c>
        return DECREMENT_YELLOW_TIME;
 8001878:	2308      	movs	r3, #8
 800187a:	e01b      	b.n	80018b4 <receive_uart_command+0xb4>
    } else if (strstr(uart_buffer, "!SWITCH#")) {
 800187c:	4916      	ldr	r1, [pc, #88]	; (80018d8 <receive_uart_command+0xd8>)
 800187e:	480e      	ldr	r0, [pc, #56]	; (80018b8 <receive_uart_command+0xb8>)
 8001880:	f004 f927 	bl	8005ad2 <strstr>
 8001884:	4603      	mov	r3, r0
 8001886:	2b00      	cmp	r3, #0
 8001888:	d001      	beq.n	800188e <receive_uart_command+0x8e>
        return SWITCH;
 800188a:	2303      	movs	r3, #3
 800188c:	e012      	b.n	80018b4 <receive_uart_command+0xb4>
    } else if (strstr(uart_buffer, "!RESET#")) {
 800188e:	4913      	ldr	r1, [pc, #76]	; (80018dc <receive_uart_command+0xdc>)
 8001890:	4809      	ldr	r0, [pc, #36]	; (80018b8 <receive_uart_command+0xb8>)
 8001892:	f004 f91e 	bl	8005ad2 <strstr>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <receive_uart_command+0xa0>
        return RESETALL;
 800189c:	2304      	movs	r3, #4
 800189e:	e009      	b.n	80018b4 <receive_uart_command+0xb4>
    } else if (strstr(uart_buffer, "!SWITCH TO TUNING#")) {
 80018a0:	490f      	ldr	r1, [pc, #60]	; (80018e0 <receive_uart_command+0xe0>)
 80018a2:	4805      	ldr	r0, [pc, #20]	; (80018b8 <receive_uart_command+0xb8>)
 80018a4:	f004 f915 	bl	8005ad2 <strstr>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <receive_uart_command+0xb2>
        return SWITCH_TO_TUNING_MODE;
 80018ae:	2309      	movs	r3, #9
 80018b0:	e000      	b.n	80018b4 <receive_uart_command+0xb4>
    }

    // Không có lệnh hợp lệ
    return 0;
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	20000978 	.word	0x20000978
 80018bc:	200009ec 	.word	0x200009ec
 80018c0:	08006944 	.word	0x08006944
 80018c4:	08006954 	.word	0x08006954
 80018c8:	08006964 	.word	0x08006964
 80018cc:	08006978 	.word	0x08006978
 80018d0:	0800698c 	.word	0x0800698c
 80018d4:	080069a0 	.word	0x080069a0
 80018d8:	080069b4 	.word	0x080069b4
 80018dc:	080069c0 	.word	0x080069c0
 80018e0:	080069c8 	.word	0x080069c8

080018e4 <Copy_upto>:
unsigned int timeout;



int Copy_upto(char *string, char *buffertocopyinto, UART_HandleTypeDef *uart)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b088      	sub	sp, #32
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
    int so_far = 0;
 80018f0:	2300      	movs	r3, #0
 80018f2:	61fb      	str	r3, [r7, #28]
    int len = strlen(string);
 80018f4:	68f8      	ldr	r0, [r7, #12]
 80018f6:	f7fe fc33 	bl	8000160 <strlen>
 80018fa:	4603      	mov	r3, r0
 80018fc:	617b      	str	r3, [r7, #20]
    int indx = 0;
 80018fe:	2300      	movs	r3, #0
 8001900:	61bb      	str	r3, [r7, #24]

again:
    while (Uart_peek(uart) != string[so_far]) {
 8001902:	e01f      	b.n	8001944 <Copy_upto+0x60>
        buffertocopyinto[indx] = _rx_buffer1->buffer[_rx_buffer1->tail];  // or _rx_buffer2 if using the second UART
 8001904:	4b37      	ldr	r3, [pc, #220]	; (80019e4 <Copy_upto+0x100>)
 8001906:	6819      	ldr	r1, [r3, #0]
 8001908:	4b36      	ldr	r3, [pc, #216]	; (80019e4 <Copy_upto+0x100>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	68b8      	ldr	r0, [r7, #8]
 8001914:	4403      	add	r3, r0
 8001916:	5c8a      	ldrb	r2, [r1, r2]
 8001918:	701a      	strb	r2, [r3, #0]
        _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 800191a:	4b32      	ldr	r3, [pc, #200]	; (80019e4 <Copy_upto+0x100>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001922:	1c5a      	adds	r2, r3, #1
 8001924:	4b2f      	ldr	r3, [pc, #188]	; (80019e4 <Copy_upto+0x100>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800192c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
        indx++;
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	3301      	adds	r3, #1
 8001934:	61bb      	str	r3, [r7, #24]
        while (!IsDataAvailable(uart));
 8001936:	bf00      	nop
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7ff fedb 	bl	80016f4 <IsDataAvailable>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d0f9      	beq.n	8001938 <Copy_upto+0x54>
    while (Uart_peek(uart) != string[so_far]) {
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7ff fdc5 	bl	80014d4 <Uart_peek>
 800194a:	4601      	mov	r1, r0
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	68fa      	ldr	r2, [r7, #12]
 8001950:	4413      	add	r3, r2
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	4299      	cmp	r1, r3
 8001956:	d1d5      	bne.n	8001904 <Copy_upto+0x20>
    }
    while (Uart_peek(uart) == string[so_far]) {
 8001958:	e028      	b.n	80019ac <Copy_upto+0xc8>
        so_far++;
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	3301      	adds	r3, #1
 800195e:	61fb      	str	r3, [r7, #28]
        buffertocopyinto[indx++] = Uart_read(uart);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f7ff fdfd 	bl	8001560 <Uart_read>
 8001966:	4601      	mov	r1, r0
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	1c5a      	adds	r2, r3, #1
 800196c:	61ba      	str	r2, [r7, #24]
 800196e:	461a      	mov	r2, r3
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	4413      	add	r3, r2
 8001974:	b2ca      	uxtb	r2, r1
 8001976:	701a      	strb	r2, [r3, #0]
        if (so_far == len) return 1;
 8001978:	69fa      	ldr	r2, [r7, #28]
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	429a      	cmp	r2, r3
 800197e:	d101      	bne.n	8001984 <Copy_upto+0xa0>
 8001980:	2301      	movs	r3, #1
 8001982:	e02b      	b.n	80019dc <Copy_upto+0xf8>
        timeout = 100;
 8001984:	4b18      	ldr	r3, [pc, #96]	; (80019e8 <Copy_upto+0x104>)
 8001986:	2264      	movs	r2, #100	; 0x64
 8001988:	601a      	str	r2, [r3, #0]
        while ((!IsDataAvailable(uart)) && timeout);
 800198a:	bf00      	nop
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f7ff feb1 	bl	80016f4 <IsDataAvailable>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d103      	bne.n	80019a0 <Copy_upto+0xbc>
 8001998:	4b13      	ldr	r3, [pc, #76]	; (80019e8 <Copy_upto+0x104>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d1f5      	bne.n	800198c <Copy_upto+0xa8>
        if (timeout == 0) return 0;
 80019a0:	4b11      	ldr	r3, [pc, #68]	; (80019e8 <Copy_upto+0x104>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d101      	bne.n	80019ac <Copy_upto+0xc8>
 80019a8:	2300      	movs	r3, #0
 80019aa:	e017      	b.n	80019dc <Copy_upto+0xf8>
    while (Uart_peek(uart) == string[so_far]) {
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f7ff fd91 	bl	80014d4 <Uart_peek>
 80019b2:	4601      	mov	r1, r0
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	4413      	add	r3, r2
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	4299      	cmp	r1, r3
 80019be:	d0cc      	beq.n	800195a <Copy_upto+0x76>
    }

    if (so_far != len) {
 80019c0:	69fa      	ldr	r2, [r7, #28]
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d002      	beq.n	80019ce <Copy_upto+0xea>
        so_far = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	61fb      	str	r3, [r7, #28]
        goto again;
 80019cc:	e799      	b.n	8001902 <Copy_upto+0x1e>
    }

    if (so_far == len) return 1;
 80019ce:	69fa      	ldr	r2, [r7, #28]
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d101      	bne.n	80019da <Copy_upto+0xf6>
 80019d6:	2301      	movs	r3, #1
 80019d8:	e000      	b.n	80019dc <Copy_upto+0xf8>
    else return 0;
 80019da:	2300      	movs	r3, #0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3720      	adds	r7, #32
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20000974 	.word	0x20000974
 80019e8:	200009ac 	.word	0x200009ac

080019ec <Wait_for>:
        }
    }
}

int Wait_for(char *string, UART_HandleTypeDef *uart)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b086      	sub	sp, #24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
    int stringLength = strlen(string);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f7fe fbb2 	bl	8000160 <strlen>
 80019fc:	4603      	mov	r3, r0
 80019fe:	613b      	str	r3, [r7, #16]
    int matchCount = 0;
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]

    while (1) {
        // Kiểm tra xem có dữ liệu nào trong buffer không
        if (IsDataAvailable(uart)) {
 8001a04:	6838      	ldr	r0, [r7, #0]
 8001a06:	f7ff fe75 	bl	80016f4 <IsDataAvailable>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d0f9      	beq.n	8001a04 <Wait_for+0x18>
            // Đọc ký tự từ buffer UART
            char c = Uart_read(uart);
 8001a10:	6838      	ldr	r0, [r7, #0]
 8001a12:	f7ff fda5 	bl	8001560 <Uart_read>
 8001a16:	4603      	mov	r3, r0
 8001a18:	73fb      	strb	r3, [r7, #15]

            // So sánh ký tự vừa đọc với từng ký tự trong chuỗi cần tìm
            if (c == string[matchCount]) {
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	4413      	add	r3, r2
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	7bfa      	ldrb	r2, [r7, #15]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d108      	bne.n	8001a3a <Wait_for+0x4e>
                matchCount++;
 8001a28:	697b      	ldr	r3, [r7, #20]
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	617b      	str	r3, [r7, #20]

                // Nếu đã tìm đủ tất cả các ký tự trong chuỗi
                if (matchCount == stringLength) {
 8001a2e:	697a      	ldr	r2, [r7, #20]
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d1e6      	bne.n	8001a04 <Wait_for+0x18>
                    return 1;  // Chuỗi đã xuất hiện trong buffer
 8001a36:	2301      	movs	r3, #1
 8001a38:	e002      	b.n	8001a40 <Wait_for+0x54>
                }
            } else {
                matchCount = 0;  // Nếu ký tự không khớp, quay lại bắt đầu chuỗi
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	617b      	str	r3, [r7, #20]
        if (IsDataAvailable(uart)) {
 8001a3e:	e7e1      	b.n	8001a04 <Wait_for+0x18>
            }
        }
    }

    return 0;  // Không tìm thấy chuỗi trong buffer
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3718      	adds	r7, #24
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <isButtonShortPressed>:
int TimeOutForKeyPress[NUM_BUTTONS] = {1000};
int button_pressed[NUM_BUTTONS] = {0};
int button_long_pressed[NUM_BUTTONS] = {0};
int button_flag[NUM_BUTTONS] = {0};

int isButtonShortPressed(int button_index){
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
    if(button_flag[button_index] == 1){
 8001a50:	4a09      	ldr	r2, [pc, #36]	; (8001a78 <isButtonShortPressed+0x30>)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d106      	bne.n	8001a6a <isButtonShortPressed+0x22>
        button_flag[button_index] = 0;
 8001a5c:	4a06      	ldr	r2, [pc, #24]	; (8001a78 <isButtonShortPressed+0x30>)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2100      	movs	r1, #0
 8001a62:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        return 1;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e000      	b.n	8001a6c <isButtonShortPressed+0x24>
    }
    return 0;
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bc80      	pop	{r7}
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	20000934 	.word	0x20000934

08001a7c <isButtonLongPressed>:

int isButtonLongPressed(int button_index){
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
    if(button_long_pressed[button_index] == 1){
 8001a84:	4a09      	ldr	r2, [pc, #36]	; (8001aac <isButtonLongPressed+0x30>)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d106      	bne.n	8001a9e <isButtonLongPressed+0x22>
        button_long_pressed[button_index] = 0;
 8001a90:	4a06      	ldr	r2, [pc, #24]	; (8001aac <isButtonLongPressed+0x30>)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2100      	movs	r1, #0
 8001a96:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        return 1;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e000      	b.n	8001aa0 <isButtonLongPressed+0x24>
    }
    return 0;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	370c      	adds	r7, #12
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	20000928 	.word	0x20000928

08001ab0 <subKeyProcess>:

void subKeyProcess(int button_index) {
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
    switch (button_index) {
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d008      	beq.n	8001ad0 <subKeyProcess+0x20>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	dc08      	bgt.n	8001ad6 <subKeyProcess+0x26>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d004      	beq.n	8001ad4 <subKeyProcess+0x24>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2b01      	cmp	r3, #1
        case 0:
            break;
        case 1:
            break;
 8001ace:	e002      	b.n	8001ad6 <subKeyProcess+0x26>
        case 2:
            break;
 8001ad0:	bf00      	nop
 8001ad2:	e000      	b.n	8001ad6 <subKeyProcess+0x26>
            break;
 8001ad4:	bf00      	nop
    }
    button_flag[button_index] = 1;
 8001ad6:	4a05      	ldr	r2, [pc, #20]	; (8001aec <subKeyProcess+0x3c>)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2101      	movs	r1, #1
 8001adc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	20000934 	.word	0x20000934

08001af0 <getKeyInput>:

void getKeyInput() {
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
    KeyReg2[0] = KeyReg1[0];
 8001af6:	4b4c      	ldr	r3, [pc, #304]	; (8001c28 <getKeyInput+0x138>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a4c      	ldr	r2, [pc, #304]	; (8001c2c <getKeyInput+0x13c>)
 8001afc:	6013      	str	r3, [r2, #0]
    KeyReg1[0] = KeyReg0[0];
 8001afe:	4b4c      	ldr	r3, [pc, #304]	; (8001c30 <getKeyInput+0x140>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a49      	ldr	r2, [pc, #292]	; (8001c28 <getKeyInput+0x138>)
 8001b04:	6013      	str	r3, [r2, #0]
    KeyReg2[1] = KeyReg1[1];
 8001b06:	4b48      	ldr	r3, [pc, #288]	; (8001c28 <getKeyInput+0x138>)
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	4a48      	ldr	r2, [pc, #288]	; (8001c2c <getKeyInput+0x13c>)
 8001b0c:	6053      	str	r3, [r2, #4]
    KeyReg1[1] = KeyReg0[1];
 8001b0e:	4b48      	ldr	r3, [pc, #288]	; (8001c30 <getKeyInput+0x140>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	4a45      	ldr	r2, [pc, #276]	; (8001c28 <getKeyInput+0x138>)
 8001b14:	6053      	str	r3, [r2, #4]
    KeyReg2[2] = KeyReg1[2];
 8001b16:	4b44      	ldr	r3, [pc, #272]	; (8001c28 <getKeyInput+0x138>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	4a44      	ldr	r2, [pc, #272]	; (8001c2c <getKeyInput+0x13c>)
 8001b1c:	6093      	str	r3, [r2, #8]
    KeyReg1[2] = KeyReg0[2];
 8001b1e:	4b44      	ldr	r3, [pc, #272]	; (8001c30 <getKeyInput+0x140>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	4a41      	ldr	r2, [pc, #260]	; (8001c28 <getKeyInput+0x138>)
 8001b24:	6093      	str	r3, [r2, #8]

    KeyReg0[0] = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 8001b26:	2140      	movs	r1, #64	; 0x40
 8001b28:	4842      	ldr	r0, [pc, #264]	; (8001c34 <getKeyInput+0x144>)
 8001b2a:	f001 fac5 	bl	80030b8 <HAL_GPIO_ReadPin>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	461a      	mov	r2, r3
 8001b32:	4b3f      	ldr	r3, [pc, #252]	; (8001c30 <getKeyInput+0x140>)
 8001b34:	601a      	str	r2, [r3, #0]
    KeyReg0[1] = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 8001b36:	2180      	movs	r1, #128	; 0x80
 8001b38:	483f      	ldr	r0, [pc, #252]	; (8001c38 <getKeyInput+0x148>)
 8001b3a:	f001 fabd 	bl	80030b8 <HAL_GPIO_ReadPin>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	461a      	mov	r2, r3
 8001b42:	4b3b      	ldr	r3, [pc, #236]	; (8001c30 <getKeyInput+0x140>)
 8001b44:	605a      	str	r2, [r3, #4]
    KeyReg0[2] = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 8001b46:	2120      	movs	r1, #32
 8001b48:	483a      	ldr	r0, [pc, #232]	; (8001c34 <getKeyInput+0x144>)
 8001b4a:	f001 fab5 	bl	80030b8 <HAL_GPIO_ReadPin>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	461a      	mov	r2, r3
 8001b52:	4b37      	ldr	r3, [pc, #220]	; (8001c30 <getKeyInput+0x140>)
 8001b54:	609a      	str	r2, [r3, #8]

    for (int i = 0; i < NUM_BUTTONS; i++) {
 8001b56:	2300      	movs	r3, #0
 8001b58:	607b      	str	r3, [r7, #4]
 8001b5a:	e05d      	b.n	8001c18 <getKeyInput+0x128>
        if ((KeyReg1[i] == KeyReg0[i]) && (KeyReg1[i] == KeyReg2[i])) {
 8001b5c:	4a32      	ldr	r2, [pc, #200]	; (8001c28 <getKeyInput+0x138>)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b64:	4932      	ldr	r1, [pc, #200]	; (8001c30 <getKeyInput+0x140>)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d150      	bne.n	8001c12 <getKeyInput+0x122>
 8001b70:	4a2d      	ldr	r2, [pc, #180]	; (8001c28 <getKeyInput+0x138>)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b78:	492c      	ldr	r1, [pc, #176]	; (8001c2c <getKeyInput+0x13c>)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d146      	bne.n	8001c12 <getKeyInput+0x122>
            if (KeyReg2[i] != KeyReg3[i]) {
 8001b84:	4a29      	ldr	r2, [pc, #164]	; (8001c2c <getKeyInput+0x13c>)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001b8c:	492b      	ldr	r1, [pc, #172]	; (8001c3c <getKeyInput+0x14c>)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d017      	beq.n	8001bc8 <getKeyInput+0xd8>
                KeyReg3[i] = KeyReg2[i];
 8001b98:	4a24      	ldr	r2, [pc, #144]	; (8001c2c <getKeyInput+0x13c>)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ba0:	4926      	ldr	r1, [pc, #152]	; (8001c3c <getKeyInput+0x14c>)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                if (KeyReg3[i] == PRESSED_STATE) {
 8001ba8:	4a24      	ldr	r2, [pc, #144]	; (8001c3c <getKeyInput+0x14c>)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d12e      	bne.n	8001c12 <getKeyInput+0x122>
                    TimeOutForKeyPress[i] = 1000;
 8001bb4:	4a22      	ldr	r2, [pc, #136]	; (8001c40 <getKeyInput+0x150>)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001bbc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    subKeyProcess(i);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f7ff ff75 	bl	8001ab0 <subKeyProcess>
 8001bc6:	e024      	b.n	8001c12 <getKeyInput+0x122>
                }
            } else {
                TimeOutForKeyPress[i]--;
 8001bc8:	4a1d      	ldr	r2, [pc, #116]	; (8001c40 <getKeyInput+0x150>)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd0:	1e5a      	subs	r2, r3, #1
 8001bd2:	491b      	ldr	r1, [pc, #108]	; (8001c40 <getKeyInput+0x150>)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                if (TimeOutForKeyPress[i] == 0) {
 8001bda:	4a19      	ldr	r2, [pc, #100]	; (8001c40 <getKeyInput+0x150>)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d115      	bne.n	8001c12 <getKeyInput+0x122>
                    TimeOutForKeyPress[i] = 1000;
 8001be6:	4a16      	ldr	r2, [pc, #88]	; (8001c40 <getKeyInput+0x150>)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001bee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    if (KeyReg3[i] == PRESSED_STATE) {
 8001bf2:	4a12      	ldr	r2, [pc, #72]	; (8001c3c <getKeyInput+0x14c>)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d109      	bne.n	8001c12 <getKeyInput+0x122>
                        button_long_pressed[i] = 1;
 8001bfe:	4a11      	ldr	r2, [pc, #68]	; (8001c44 <getKeyInput+0x154>)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2101      	movs	r1, #1
 8001c04:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                        button_flag[i] = 0; // Ensure short press is not set
 8001c08:	4a0f      	ldr	r2, [pc, #60]	; (8001c48 <getKeyInput+0x158>)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < NUM_BUTTONS; i++) {
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	3301      	adds	r3, #1
 8001c16:	607b      	str	r3, [r7, #4]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b02      	cmp	r3, #2
 8001c1c:	dd9e      	ble.n	8001b5c <getKeyInput+0x6c>
                    }
                }
            }
        }
    }
}
 8001c1e:	bf00      	nop
 8001c20:	bf00      	nop
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	2000002c 	.word	0x2000002c
 8001c2c:	20000038 	.word	0x20000038
 8001c30:	20000020 	.word	0x20000020
 8001c34:	40010c00 	.word	0x40010c00
 8001c38:	40011000 	.word	0x40011000
 8001c3c:	20000044 	.word	0x20000044
 8001c40:	20000050 	.word	0x20000050
 8001c44:	20000928 	.word	0x20000928
 8001c48:	20000934 	.word	0x20000934

08001c4c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x21 << 1 // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af02      	add	r7, sp, #8
 8001c52:	4603      	mov	r3, r0
 8001c54:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8001c56:	79fb      	ldrb	r3, [r7, #7]
 8001c58:	f023 030f 	bic.w	r3, r3, #15
 8001c5c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8001c5e:	79fb      	ldrb	r3, [r7, #7]
 8001c60:	011b      	lsls	r3, r3, #4
 8001c62:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8001c64:	7bfb      	ldrb	r3, [r7, #15]
 8001c66:	f043 030c 	orr.w	r3, r3, #12
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001c6e:	7bfb      	ldrb	r3, [r7, #15]
 8001c70:	f043 0308 	orr.w	r3, r3, #8
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001c78:	7bbb      	ldrb	r3, [r7, #14]
 8001c7a:	f043 030c 	orr.w	r3, r3, #12
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001c82:	7bbb      	ldrb	r3, [r7, #14]
 8001c84:	f043 0308 	orr.w	r3, r3, #8
 8001c88:	b2db      	uxtb	r3, r3
 8001c8a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001c8c:	f107 0208 	add.w	r2, r7, #8
 8001c90:	2364      	movs	r3, #100	; 0x64
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	2304      	movs	r3, #4
 8001c96:	2142      	movs	r1, #66	; 0x42
 8001c98:	4803      	ldr	r0, [pc, #12]	; (8001ca8 <lcd_send_cmd+0x5c>)
 8001c9a:	f001 fbbb 	bl	8003414 <HAL_I2C_Master_Transmit>
}
 8001c9e:	bf00      	nop
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	20000ab0 	.word	0x20000ab0

08001cac <lcd_send_data>:

void lcd_send_data (char data)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af02      	add	r7, sp, #8
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	f023 030f 	bic.w	r3, r3, #15
 8001cbc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	011b      	lsls	r3, r3, #4
 8001cc2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001cc4:	7bfb      	ldrb	r3, [r7, #15]
 8001cc6:	f043 030d 	orr.w	r3, r3, #13
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001cce:	7bfb      	ldrb	r3, [r7, #15]
 8001cd0:	f043 0309 	orr.w	r3, r3, #9
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001cd8:	7bbb      	ldrb	r3, [r7, #14]
 8001cda:	f043 030d 	orr.w	r3, r3, #13
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001ce2:	7bbb      	ldrb	r3, [r7, #14]
 8001ce4:	f043 0309 	orr.w	r3, r3, #9
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001cec:	f107 0208 	add.w	r2, r7, #8
 8001cf0:	2364      	movs	r3, #100	; 0x64
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	2304      	movs	r3, #4
 8001cf6:	2142      	movs	r1, #66	; 0x42
 8001cf8:	4803      	ldr	r0, [pc, #12]	; (8001d08 <lcd_send_data+0x5c>)
 8001cfa:	f001 fb8b 	bl	8003414 <HAL_I2C_Master_Transmit>
}
 8001cfe:	bf00      	nop
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20000ab0 	.word	0x20000ab0

08001d0c <lcd_init>:

void lcd_init (void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8001d10:	2033      	movs	r0, #51	; 0x33
 8001d12:	f7ff ff9b 	bl	8001c4c <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8001d16:	2032      	movs	r0, #50	; 0x32
 8001d18:	f7ff ff98 	bl	8001c4c <lcd_send_cmd>
	HAL_Delay(50);
 8001d1c:	2032      	movs	r0, #50	; 0x32
 8001d1e:	f000 fe63 	bl	80029e8 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8001d22:	2028      	movs	r0, #40	; 0x28
 8001d24:	f7ff ff92 	bl	8001c4c <lcd_send_cmd>
	HAL_Delay(50);
 8001d28:	2032      	movs	r0, #50	; 0x32
 8001d2a:	f000 fe5d 	bl	80029e8 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8001d2e:	2001      	movs	r0, #1
 8001d30:	f7ff ff8c 	bl	8001c4c <lcd_send_cmd>
	HAL_Delay(50);
 8001d34:	2032      	movs	r0, #50	; 0x32
 8001d36:	f000 fe57 	bl	80029e8 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8001d3a:	2006      	movs	r0, #6
 8001d3c:	f7ff ff86 	bl	8001c4c <lcd_send_cmd>
	HAL_Delay(50);
 8001d40:	2032      	movs	r0, #50	; 0x32
 8001d42:	f000 fe51 	bl	80029e8 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */	
 8001d46:	200c      	movs	r0, #12
 8001d48:	f7ff ff80 	bl	8001c4c <lcd_send_cmd>
	HAL_Delay(50);
 8001d4c:	2032      	movs	r0, #50	; 0x32
 8001d4e:	f000 fe4b 	bl	80029e8 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8001d52:	2002      	movs	r0, #2
 8001d54:	f7ff ff7a 	bl	8001c4c <lcd_send_cmd>
	HAL_Delay(50);
 8001d58:	2032      	movs	r0, #50	; 0x32
 8001d5a:	f000 fe45 	bl	80029e8 <HAL_Delay>
	lcd_send_cmd (0x80);
 8001d5e:	2080      	movs	r0, #128	; 0x80
 8001d60:	f7ff ff74 	bl	8001c4c <lcd_send_cmd>
}
 8001d64:	bf00      	nop
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001d70:	e006      	b.n	8001d80 <lcd_send_string+0x18>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	1c5a      	adds	r2, r3, #1
 8001d76:	607a      	str	r2, [r7, #4]
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff ff96 	bl	8001cac <lcd_send_data>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d1f4      	bne.n	8001d72 <lcd_send_string+0xa>
}
 8001d88:	bf00      	nop
 8001d8a:	bf00      	nop
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <lcd_clear_display>:

void lcd_clear_display (void)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 8001d96:	2001      	movs	r0, #1
 8001d98:	f7ff ff58 	bl	8001c4c <lcd_send_cmd>
}
 8001d9c:	bf00      	nop
 8001d9e:	bd80      	pop	{r7, pc}

08001da0 <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1) 
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d108      	bne.n	8001dc2 <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	b2db      	uxtb	r3, r3
 8001db8:	4413      	add	r3, r2
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	337f      	adds	r3, #127	; 0x7f
 8001dbe:	73fb      	strb	r3, [r7, #15]
 8001dc0:	e008      	b.n	8001dd4 <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	3340      	adds	r3, #64	; 0x40
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	b25b      	sxtb	r3, r3
 8001dcc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001dd0:	b25b      	sxtb	r3, r3
 8001dd2:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 8001dd4:	7bfb      	ldrb	r3, [r7, #15]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff ff38 	bl	8001c4c <lcd_send_cmd>
}
 8001ddc:	bf00      	nop
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}

08001de4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001de8:	f000 fd9c 	bl	8002924 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001dec:	f000 f84c 	bl	8001e88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001df0:	f000 f95a 	bl	80020a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001df4:	f000 f904 	bl	8002000 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001df8:	f000 f888 	bl	8001f0c <MX_I2C1_Init>
  MX_TIM2_Init();
 8001dfc:	f000 f8b4 	bl	8001f68 <MX_TIM2_Init>
  MX_USART3_UART_Init();
 8001e00:	f000 f928 	bl	8002054 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  ESP_Init("Beckhcmut", "12345678");
 8001e04:	491b      	ldr	r1, [pc, #108]	; (8001e74 <main+0x90>)
 8001e06:	481c      	ldr	r0, [pc, #112]	; (8001e78 <main+0x94>)
 8001e08:	f7fe f9b2 	bl	8000170 <ESP_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8001e0c:	481b      	ldr	r0, [pc, #108]	; (8001e7c <main+0x98>)
 8001e0e:	f002 fab7 	bl	8004380 <HAL_TIM_Base_Start_IT>
  lcd_init();
 8001e12:	f7ff ff7b 	bl	8001d0c <lcd_init>
  lcd_clear_display();
 8001e16:	f7ff ffbc 	bl	8001d92 <lcd_clear_display>
  HAL_Delay(50);
 8001e1a:	2032      	movs	r0, #50	; 0x32
 8001e1c:	f000 fde4 	bl	80029e8 <HAL_Delay>

  SCH_Init();
 8001e20:	f000 f9f8 	bl	8002214 <SCH_Init>
  SCH_Add_Task(fsm_traffic, 50, 1);
 8001e24:	2201      	movs	r2, #1
 8001e26:	2132      	movs	r1, #50	; 0x32
 8001e28:	4815      	ldr	r0, [pc, #84]	; (8001e80 <main+0x9c>)
 8001e2a:	f000 fabb 	bl	80023a4 <SCH_Add_Task>
//  SCH_Add_Task(clock_counter_traffic_update, 0, 1);
  SCH_Add_Task(fsm_switch_mode, 50, 1);
 8001e2e:	2201      	movs	r2, #1
 8001e30:	2132      	movs	r1, #50	; 0x32
 8001e32:	4814      	ldr	r0, [pc, #80]	; (8001e84 <main+0xa0>)
 8001e34:	f000 fab6 	bl	80023a4 <SCH_Add_Task>
  SCH_Add_Task(fsm_traffic_auto_mode(), 50, 1);
 8001e38:	f7fe fc64 	bl	8000704 <fsm_traffic_auto_mode>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2201      	movs	r2, #1
 8001e40:	2132      	movs	r1, #50	; 0x32
 8001e42:	4618      	mov	r0, r3
 8001e44:	f000 faae 	bl	80023a4 <SCH_Add_Task>
  SCH_Add_Task(fsm_traffic_tunning_mode(), 50, 1);
 8001e48:	f7fe feb4 	bl	8000bb4 <fsm_traffic_tunning_mode>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2201      	movs	r2, #1
 8001e50:	2132      	movs	r1, #50	; 0x32
 8001e52:	4618      	mov	r0, r3
 8001e54:	f000 faa6 	bl	80023a4 <SCH_Add_Task>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
fsm_traffic_auto_mode();
 8001e58:	f7fe fc54 	bl	8000704 <fsm_traffic_auto_mode>
fsm_traffic_tunning_mode();
 8001e5c:	f7fe feaa 	bl	8000bb4 <fsm_traffic_tunning_mode>
fsm_switch_mode();
 8001e60:	f7ff f8ee 	bl	8001040 <fsm_switch_mode>
fsm_traffic();
 8001e64:	f7ff f944 	bl	80010f0 <fsm_traffic>
	  SCH_Dispatch_Tasks();
 8001e68:	f000 fae0 	bl	800242c <SCH_Dispatch_Tasks>
//	  }

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
Server_Start();
 8001e6c:	f7fe fbc4 	bl	80005f8 <Server_Start>
fsm_traffic_auto_mode();
 8001e70:	e7f2      	b.n	8001e58 <main+0x74>
 8001e72:	bf00      	nop
 8001e74:	080069dc 	.word	0x080069dc
 8001e78:	080069e8 	.word	0x080069e8
 8001e7c:	20000b04 	.word	0x20000b04
 8001e80:	080010f1 	.word	0x080010f1
 8001e84:	08001041 	.word	0x08001041

08001e88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b090      	sub	sp, #64	; 0x40
 8001e8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e8e:	f107 0318 	add.w	r3, r7, #24
 8001e92:	2228      	movs	r2, #40	; 0x28
 8001e94:	2100      	movs	r1, #0
 8001e96:	4618      	mov	r0, r3
 8001e98:	f003 fcfa 	bl	8005890 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e9c:	1d3b      	adds	r3, r7, #4
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	605a      	str	r2, [r3, #4]
 8001ea4:	609a      	str	r2, [r3, #8]
 8001ea6:	60da      	str	r2, [r3, #12]
 8001ea8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001eaa:	2302      	movs	r3, #2
 8001eac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001eb2:	2310      	movs	r3, #16
 8001eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001ebe:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ec4:	f107 0318 	add.w	r3, r7, #24
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f001 fdfb 	bl	8003ac4 <HAL_RCC_OscConfig>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001ed4:	f000 f999 	bl	800220a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ed8:	230f      	movs	r3, #15
 8001eda:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001edc:	2302      	movs	r3, #2
 8001ede:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ee4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ee8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001eea:	2300      	movs	r3, #0
 8001eec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001eee:	1d3b      	adds	r3, r7, #4
 8001ef0:	2102      	movs	r1, #2
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f002 f866 	bl	8003fc4 <HAL_RCC_ClockConfig>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001efe:	f000 f984 	bl	800220a <Error_Handler>
  }
}
 8001f02:	bf00      	nop
 8001f04:	3740      	adds	r7, #64	; 0x40
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
	...

08001f0c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f10:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <MX_I2C1_Init+0x50>)
 8001f12:	4a13      	ldr	r2, [pc, #76]	; (8001f60 <MX_I2C1_Init+0x54>)
 8001f14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f16:	4b11      	ldr	r3, [pc, #68]	; (8001f5c <MX_I2C1_Init+0x50>)
 8001f18:	4a12      	ldr	r2, [pc, #72]	; (8001f64 <MX_I2C1_Init+0x58>)
 8001f1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f1c:	4b0f      	ldr	r3, [pc, #60]	; (8001f5c <MX_I2C1_Init+0x50>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f22:	4b0e      	ldr	r3, [pc, #56]	; (8001f5c <MX_I2C1_Init+0x50>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f28:	4b0c      	ldr	r3, [pc, #48]	; (8001f5c <MX_I2C1_Init+0x50>)
 8001f2a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f30:	4b0a      	ldr	r3, [pc, #40]	; (8001f5c <MX_I2C1_Init+0x50>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f36:	4b09      	ldr	r3, [pc, #36]	; (8001f5c <MX_I2C1_Init+0x50>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f3c:	4b07      	ldr	r3, [pc, #28]	; (8001f5c <MX_I2C1_Init+0x50>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f42:	4b06      	ldr	r3, [pc, #24]	; (8001f5c <MX_I2C1_Init+0x50>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f48:	4804      	ldr	r0, [pc, #16]	; (8001f5c <MX_I2C1_Init+0x50>)
 8001f4a:	f001 f91f 	bl	800318c <HAL_I2C_Init>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d001      	beq.n	8001f58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f54:	f000 f959 	bl	800220a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f58:	bf00      	nop
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	20000ab0 	.word	0x20000ab0
 8001f60:	40005400 	.word	0x40005400
 8001f64:	000186a0 	.word	0x000186a0

08001f68 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f6e:	f107 0308 	add.w	r3, r7, #8
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	605a      	str	r2, [r3, #4]
 8001f78:	609a      	str	r2, [r3, #8]
 8001f7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f7c:	463b      	mov	r3, r7
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f84:	4b1d      	ldr	r3, [pc, #116]	; (8001ffc <MX_TIM2_Init+0x94>)
 8001f86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001f8a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001f8c:	4b1b      	ldr	r3, [pc, #108]	; (8001ffc <MX_TIM2_Init+0x94>)
 8001f8e:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001f92:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f94:	4b19      	ldr	r3, [pc, #100]	; (8001ffc <MX_TIM2_Init+0x94>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001f9a:	4b18      	ldr	r3, [pc, #96]	; (8001ffc <MX_TIM2_Init+0x94>)
 8001f9c:	2209      	movs	r2, #9
 8001f9e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fa0:	4b16      	ldr	r3, [pc, #88]	; (8001ffc <MX_TIM2_Init+0x94>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fa6:	4b15      	ldr	r3, [pc, #84]	; (8001ffc <MX_TIM2_Init+0x94>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001fac:	4813      	ldr	r0, [pc, #76]	; (8001ffc <MX_TIM2_Init+0x94>)
 8001fae:	f002 f997 	bl	80042e0 <HAL_TIM_Base_Init>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001fb8:	f000 f927 	bl	800220a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fc0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001fc2:	f107 0308 	add.w	r3, r7, #8
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	480c      	ldr	r0, [pc, #48]	; (8001ffc <MX_TIM2_Init+0x94>)
 8001fca:	f002 fb1b 	bl	8004604 <HAL_TIM_ConfigClockSource>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d001      	beq.n	8001fd8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001fd4:	f000 f919 	bl	800220a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fe0:	463b      	mov	r3, r7
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4805      	ldr	r0, [pc, #20]	; (8001ffc <MX_TIM2_Init+0x94>)
 8001fe6:	f002 fcfd 	bl	80049e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001ff0:	f000 f90b 	bl	800220a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001ff4:	bf00      	nop
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	20000b04 	.word	0x20000b04

08002000 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002004:	4b11      	ldr	r3, [pc, #68]	; (800204c <MX_USART2_UART_Init+0x4c>)
 8002006:	4a12      	ldr	r2, [pc, #72]	; (8002050 <MX_USART2_UART_Init+0x50>)
 8002008:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800200a:	4b10      	ldr	r3, [pc, #64]	; (800204c <MX_USART2_UART_Init+0x4c>)
 800200c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002010:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002012:	4b0e      	ldr	r3, [pc, #56]	; (800204c <MX_USART2_UART_Init+0x4c>)
 8002014:	2200      	movs	r2, #0
 8002016:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002018:	4b0c      	ldr	r3, [pc, #48]	; (800204c <MX_USART2_UART_Init+0x4c>)
 800201a:	2200      	movs	r2, #0
 800201c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800201e:	4b0b      	ldr	r3, [pc, #44]	; (800204c <MX_USART2_UART_Init+0x4c>)
 8002020:	2200      	movs	r2, #0
 8002022:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002024:	4b09      	ldr	r3, [pc, #36]	; (800204c <MX_USART2_UART_Init+0x4c>)
 8002026:	220c      	movs	r2, #12
 8002028:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800202a:	4b08      	ldr	r3, [pc, #32]	; (800204c <MX_USART2_UART_Init+0x4c>)
 800202c:	2200      	movs	r2, #0
 800202e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002030:	4b06      	ldr	r3, [pc, #24]	; (800204c <MX_USART2_UART_Init+0x4c>)
 8002032:	2200      	movs	r2, #0
 8002034:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002036:	4805      	ldr	r0, [pc, #20]	; (800204c <MX_USART2_UART_Init+0x4c>)
 8002038:	f002 fd44 	bl	8004ac4 <HAL_UART_Init>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002042:	f000 f8e2 	bl	800220a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	200009ec 	.word	0x200009ec
 8002050:	40004400 	.word	0x40004400

08002054 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002058:	4b11      	ldr	r3, [pc, #68]	; (80020a0 <MX_USART3_UART_Init+0x4c>)
 800205a:	4a12      	ldr	r2, [pc, #72]	; (80020a4 <MX_USART3_UART_Init+0x50>)
 800205c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800205e:	4b10      	ldr	r3, [pc, #64]	; (80020a0 <MX_USART3_UART_Init+0x4c>)
 8002060:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002064:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002066:	4b0e      	ldr	r3, [pc, #56]	; (80020a0 <MX_USART3_UART_Init+0x4c>)
 8002068:	2200      	movs	r2, #0
 800206a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800206c:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <MX_USART3_UART_Init+0x4c>)
 800206e:	2200      	movs	r2, #0
 8002070:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002072:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <MX_USART3_UART_Init+0x4c>)
 8002074:	2200      	movs	r2, #0
 8002076:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002078:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <MX_USART3_UART_Init+0x4c>)
 800207a:	220c      	movs	r2, #12
 800207c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800207e:	4b08      	ldr	r3, [pc, #32]	; (80020a0 <MX_USART3_UART_Init+0x4c>)
 8002080:	2200      	movs	r2, #0
 8002082:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002084:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <MX_USART3_UART_Init+0x4c>)
 8002086:	2200      	movs	r2, #0
 8002088:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800208a:	4805      	ldr	r0, [pc, #20]	; (80020a0 <MX_USART3_UART_Init+0x4c>)
 800208c:	f002 fd1a 	bl	8004ac4 <HAL_UART_Init>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002096:	f000 f8b8 	bl	800220a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	20000a68 	.word	0x20000a68
 80020a4:	40004800 	.word	0x40004800

080020a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b088      	sub	sp, #32
 80020ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ae:	f107 0310 	add.w	r3, r7, #16
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	605a      	str	r2, [r3, #4]
 80020b8:	609a      	str	r2, [r3, #8]
 80020ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020bc:	4b45      	ldr	r3, [pc, #276]	; (80021d4 <MX_GPIO_Init+0x12c>)
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	4a44      	ldr	r2, [pc, #272]	; (80021d4 <MX_GPIO_Init+0x12c>)
 80020c2:	f043 0310 	orr.w	r3, r3, #16
 80020c6:	6193      	str	r3, [r2, #24]
 80020c8:	4b42      	ldr	r3, [pc, #264]	; (80021d4 <MX_GPIO_Init+0x12c>)
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	f003 0310 	and.w	r3, r3, #16
 80020d0:	60fb      	str	r3, [r7, #12]
 80020d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020d4:	4b3f      	ldr	r3, [pc, #252]	; (80021d4 <MX_GPIO_Init+0x12c>)
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	4a3e      	ldr	r2, [pc, #248]	; (80021d4 <MX_GPIO_Init+0x12c>)
 80020da:	f043 0320 	orr.w	r3, r3, #32
 80020de:	6193      	str	r3, [r2, #24]
 80020e0:	4b3c      	ldr	r3, [pc, #240]	; (80021d4 <MX_GPIO_Init+0x12c>)
 80020e2:	699b      	ldr	r3, [r3, #24]
 80020e4:	f003 0320 	and.w	r3, r3, #32
 80020e8:	60bb      	str	r3, [r7, #8]
 80020ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ec:	4b39      	ldr	r3, [pc, #228]	; (80021d4 <MX_GPIO_Init+0x12c>)
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	4a38      	ldr	r2, [pc, #224]	; (80021d4 <MX_GPIO_Init+0x12c>)
 80020f2:	f043 0304 	orr.w	r3, r3, #4
 80020f6:	6193      	str	r3, [r2, #24]
 80020f8:	4b36      	ldr	r3, [pc, #216]	; (80021d4 <MX_GPIO_Init+0x12c>)
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	f003 0304 	and.w	r3, r3, #4
 8002100:	607b      	str	r3, [r7, #4]
 8002102:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002104:	4b33      	ldr	r3, [pc, #204]	; (80021d4 <MX_GPIO_Init+0x12c>)
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	4a32      	ldr	r2, [pc, #200]	; (80021d4 <MX_GPIO_Init+0x12c>)
 800210a:	f043 0308 	orr.w	r3, r3, #8
 800210e:	6193      	str	r3, [r2, #24]
 8002110:	4b30      	ldr	r3, [pc, #192]	; (80021d4 <MX_GPIO_Init+0x12c>)
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	f003 0308 	and.w	r3, r3, #8
 8002118:	603b      	str	r3, [r7, #0]
 800211a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RED_LED1_Pin|AMBER_LED1_Pin|LD2_Pin|GREEN_LED1_Pin
 800211c:	2200      	movs	r2, #0
 800211e:	f240 31f2 	movw	r1, #1010	; 0x3f2
 8002122:	482d      	ldr	r0, [pc, #180]	; (80021d8 <MX_GPIO_Init+0x130>)
 8002124:	f000 ffdf 	bl	80030e6 <HAL_GPIO_WritePin>
                          |RED_LED2_Pin|LED2_A_Pin|LED2_B_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_B_Pin|LED1_A_Pin, GPIO_PIN_RESET);
 8002128:	2200      	movs	r2, #0
 800212a:	f44f 6182 	mov.w	r1, #1040	; 0x410
 800212e:	482b      	ldr	r0, [pc, #172]	; (80021dc <MX_GPIO_Init+0x134>)
 8002130:	f000 ffd9 	bl	80030e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002134:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002138:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800213a:	4b29      	ldr	r3, [pc, #164]	; (80021e0 <MX_GPIO_Init+0x138>)
 800213c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213e:	2300      	movs	r3, #0
 8002140:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002142:	f107 0310 	add.w	r3, r7, #16
 8002146:	4619      	mov	r1, r3
 8002148:	4826      	ldr	r0, [pc, #152]	; (80021e4 <MX_GPIO_Init+0x13c>)
 800214a:	f000 fe31 	bl	8002db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RED_LED1_Pin AMBER_LED1_Pin LD2_Pin GREEN_LED1_Pin
                           RED_LED2_Pin LED2_A_Pin LED2_B_Pin */
  GPIO_InitStruct.Pin = RED_LED1_Pin|AMBER_LED1_Pin|LD2_Pin|GREEN_LED1_Pin
 800214e:	f240 33f2 	movw	r3, #1010	; 0x3f2
 8002152:	613b      	str	r3, [r7, #16]
                          |RED_LED2_Pin|LED2_A_Pin|LED2_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002154:	2301      	movs	r3, #1
 8002156:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800215c:	2302      	movs	r3, #2
 800215e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002160:	f107 0310 	add.w	r3, r7, #16
 8002164:	4619      	mov	r1, r3
 8002166:	481c      	ldr	r0, [pc, #112]	; (80021d8 <MX_GPIO_Init+0x130>)
 8002168:	f000 fe22 	bl	8002db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_B_Pin LED1_A_Pin */
  GPIO_InitStruct.Pin = LED1_B_Pin|LED1_A_Pin;
 800216c:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8002170:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002172:	2301      	movs	r3, #1
 8002174:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002176:	2300      	movs	r3, #0
 8002178:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217a:	2302      	movs	r3, #2
 800217c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800217e:	f107 0310 	add.w	r3, r7, #16
 8002182:	4619      	mov	r1, r3
 8002184:	4815      	ldr	r0, [pc, #84]	; (80021dc <MX_GPIO_Init+0x134>)
 8002186:	f000 fe13 	bl	8002db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTON2_Pin;
 800218a:	2380      	movs	r3, #128	; 0x80
 800218c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800218e:	2300      	movs	r3, #0
 8002190:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002192:	2301      	movs	r3, #1
 8002194:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON2_GPIO_Port, &GPIO_InitStruct);
 8002196:	f107 0310 	add.w	r3, r7, #16
 800219a:	4619      	mov	r1, r3
 800219c:	4811      	ldr	r0, [pc, #68]	; (80021e4 <MX_GPIO_Init+0x13c>)
 800219e:	f000 fe07 	bl	8002db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUTTON3_Pin BUTTON1_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin|BUTTON1_Pin;
 80021a2:	2360      	movs	r3, #96	; 0x60
 80021a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021a6:	2300      	movs	r3, #0
 80021a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021aa:	2301      	movs	r3, #1
 80021ac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ae:	f107 0310 	add.w	r3, r7, #16
 80021b2:	4619      	mov	r1, r3
 80021b4:	4809      	ldr	r0, [pc, #36]	; (80021dc <MX_GPIO_Init+0x134>)
 80021b6:	f000 fdfb 	bl	8002db0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80021ba:	2200      	movs	r2, #0
 80021bc:	2100      	movs	r1, #0
 80021be:	2028      	movs	r0, #40	; 0x28
 80021c0:	f000 fd0d 	bl	8002bde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80021c4:	2028      	movs	r0, #40	; 0x28
 80021c6:	f000 fd26 	bl	8002c16 <HAL_NVIC_EnableIRQ>

}
 80021ca:	bf00      	nop
 80021cc:	3720      	adds	r7, #32
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40021000 	.word	0x40021000
 80021d8:	40010800 	.word	0x40010800
 80021dc:	40010c00 	.word	0x40010c00
 80021e0:	10110000 	.word	0x10110000
 80021e4:	40011000 	.word	0x40011000

080021e8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM2) {
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021f8:	d101      	bne.n	80021fe <HAL_TIM_PeriodElapsedCallback+0x16>
    timerRun(); // G�?i hàm cập nhật bộ đếm th�?i gian của bạn
 80021fa:	f000 f981 	bl	8002500 <timerRun>
  }
  getKeyInput();
 80021fe:	f7ff fc77 	bl	8001af0 <getKeyInput>
}
 8002202:	bf00      	nop
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800220a:	b480      	push	{r7}
 800220c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800220e:	b672      	cpsid	i
}
 8002210:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002212:	e7fe      	b.n	8002212 <Error_Handler+0x8>

08002214 <SCH_Init>:
struct container* container;

#define MAX_TASKS 10  // Giới hạn số lượng task tối đa trong heap

// Hàm khởi tạo container và heap
void SCH_Init(void) {
 8002214:	b598      	push	{r3, r4, r7, lr}
 8002216:	af00      	add	r7, sp, #0
    container = (struct container*)malloc(sizeof(struct container));
 8002218:	200c      	movs	r0, #12
 800221a:	f003 fb29 	bl	8005870 <malloc>
 800221e:	4603      	mov	r3, r0
 8002220:	461a      	mov	r2, r3
 8002222:	4b0c      	ldr	r3, [pc, #48]	; (8002254 <SCH_Init+0x40>)
 8002224:	601a      	str	r2, [r3, #0]
    if (container == NULL) {
 8002226:	4b0b      	ldr	r3, [pc, #44]	; (8002254 <SCH_Init+0x40>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d00f      	beq.n	800224e <SCH_Init+0x3a>
        return;
    }

    container->heap = (struct sTask**)malloc(sizeof(struct sTask*) * MAX_TASKS); // Cấp phát mảng heap
 800222e:	4b09      	ldr	r3, [pc, #36]	; (8002254 <SCH_Init+0x40>)
 8002230:	681c      	ldr	r4, [r3, #0]
 8002232:	2028      	movs	r0, #40	; 0x28
 8002234:	f003 fb1c 	bl	8005870 <malloc>
 8002238:	4603      	mov	r3, r0
 800223a:	6023      	str	r3, [r4, #0]
    container->numSlot = 0;
 800223c:	4b05      	ldr	r3, [pc, #20]	; (8002254 <SCH_Init+0x40>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2200      	movs	r2, #0
 8002242:	605a      	str	r2, [r3, #4]
    container->emptySlot = MAX_TASKS;
 8002244:	4b03      	ldr	r3, [pc, #12]	; (8002254 <SCH_Init+0x40>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	220a      	movs	r2, #10
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	e000      	b.n	8002250 <SCH_Init+0x3c>
        return;
 800224e:	bf00      	nop
}
 8002250:	bd98      	pop	{r3, r4, r7, pc}
 8002252:	bf00      	nop
 8002254:	20000b4c 	.word	0x20000b4c

08002258 <heapifyUp>:

// Hàm giúp duy trì tính chất heap sau khi thêm phần tử mới
void heapifyUp(struct container* cont, int index) {
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
    while (index > 0) {
 8002262:	e031      	b.n	80022c8 <heapifyUp+0x70>
        int parentIndex = (index - 1) / 2;
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	3b01      	subs	r3, #1
 8002268:	0fda      	lsrs	r2, r3, #31
 800226a:	4413      	add	r3, r2
 800226c:	105b      	asrs	r3, r3, #1
 800226e:	60fb      	str	r3, [r7, #12]
        if (cont->heap[parentIndex]->Delay <= cont->heap[index]->Delay) {
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4413      	add	r3, r2
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6819      	ldr	r1, [r3, #0]
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	440b      	add	r3, r1
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	429a      	cmp	r2, r3
 800228e:	d91f      	bls.n	80022d0 <heapifyUp+0x78>
            break;
        }
        // Hoán đổi vị trí
        struct sTask* temp = cont->heap[parentIndex];
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	4413      	add	r3, r2
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	60bb      	str	r3, [r7, #8]
        cont->heap[parentIndex] = cont->heap[index];
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	441a      	add	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6819      	ldr	r1, [r3, #0]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	440b      	add	r3, r1
 80022b2:	6812      	ldr	r2, [r2, #0]
 80022b4:	601a      	str	r2, [r3, #0]
        cont->heap[index] = temp;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	4413      	add	r3, r2
 80022c0:	68ba      	ldr	r2, [r7, #8]
 80022c2:	601a      	str	r2, [r3, #0]
        index = parentIndex;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	603b      	str	r3, [r7, #0]
    while (index > 0) {
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	dcca      	bgt.n	8002264 <heapifyUp+0xc>
    }
}
 80022ce:	e000      	b.n	80022d2 <heapifyUp+0x7a>
            break;
 80022d0:	bf00      	nop
}
 80022d2:	bf00      	nop
 80022d4:	3714      	adds	r7, #20
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bc80      	pop	{r7}
 80022da:	4770      	bx	lr

080022dc <heapifyDown>:

// Hàm duy trì tính chất heap sau khi xóa task
void heapifyDown(struct container* cont, int index) {
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
    int leftChildIndex = 2 * index + 1;
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	3301      	adds	r3, #1
 80022ec:	613b      	str	r3, [r7, #16]
    int rightChildIndex = 2 * index + 2;
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	3301      	adds	r3, #1
 80022f2:	005b      	lsls	r3, r3, #1
 80022f4:	60fb      	str	r3, [r7, #12]
    int smallest = index;
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	617b      	str	r3, [r7, #20]

    // Tìm phần tử con nhỏ hơn
    if (leftChildIndex < cont->numSlot && cont->heap[leftChildIndex]->Delay < cont->heap[smallest]->Delay) {
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	429a      	cmp	r2, r3
 8002302:	da11      	bge.n	8002328 <heapifyDown+0x4c>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	4413      	add	r3, r2
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6819      	ldr	r1, [r3, #0]
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	440b      	add	r3, r1
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	429a      	cmp	r2, r3
 8002322:	d201      	bcs.n	8002328 <heapifyDown+0x4c>
        smallest = leftChildIndex;
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	617b      	str	r3, [r7, #20]
    }

    if (rightChildIndex < cont->numSlot && cont->heap[rightChildIndex]->Delay < cont->heap[smallest]->Delay) {
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	429a      	cmp	r2, r3
 8002330:	da11      	bge.n	8002356 <heapifyDown+0x7a>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	4413      	add	r3, r2
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6819      	ldr	r1, [r3, #0]
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	440b      	add	r3, r1
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	429a      	cmp	r2, r3
 8002350:	d201      	bcs.n	8002356 <heapifyDown+0x7a>
        smallest = rightChildIndex;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	617b      	str	r3, [r7, #20]
    }

    // Nếu nhỏ hơn, hoán đổi và tiếp tục
    if (smallest != index) {
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	429a      	cmp	r2, r3
 800235c:	d01d      	beq.n	800239a <heapifyDown+0xbe>
        struct sTask* temp = cont->heap[index];
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	4413      	add	r3, r2
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	60bb      	str	r3, [r7, #8]
        cont->heap[index] = cont->heap[smallest];
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	441a      	add	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6819      	ldr	r1, [r3, #0]
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	440b      	add	r3, r1
 8002380:	6812      	ldr	r2, [r2, #0]
 8002382:	601a      	str	r2, [r3, #0]
        cont->heap[smallest] = temp;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	601a      	str	r2, [r3, #0]
        heapifyDown(cont, smallest);
 8002392:	6979      	ldr	r1, [r7, #20]
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f7ff ffa1 	bl	80022dc <heapifyDown>
    }
}
 800239a:	bf00      	nop
 800239c:	3718      	adds	r7, #24
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
	...

080023a4 <SCH_Add_Task>:

// Thêm task vào heap
void SCH_Add_Task(void(*pFunction)(), uint32_t DELAY, uint32_t PERIOD) {
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
    if (container->emptySlot <= 0) {
 80023b0:	4b1d      	ldr	r3, [pc, #116]	; (8002428 <SCH_Add_Task+0x84>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	dd2f      	ble.n	800241a <SCH_Add_Task+0x76>
        // Không còn chỗ trống trong heap
        return;
    }

    // Cấp phát bộ nhớ cho task mới
    struct sTask* newTask = (struct sTask*)malloc(sizeof(struct sTask));
 80023ba:	200c      	movs	r0, #12
 80023bc:	f003 fa58 	bl	8005870 <malloc>
 80023c0:	4603      	mov	r3, r0
 80023c2:	617b      	str	r3, [r7, #20]
    if (newTask == NULL) {
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d029      	beq.n	800241e <SCH_Add_Task+0x7a>
        return; // Kiểm tra lỗi malloc
    }

    newTask->pTask = pFunction;
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	601a      	str	r2, [r3, #0]
    newTask->Delay = DELAY;
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	68ba      	ldr	r2, [r7, #8]
 80023d4:	605a      	str	r2, [r3, #4]
    newTask->Period = PERIOD;
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	609a      	str	r2, [r3, #8]

    // Thêm task vào heap (chèn vào cuối heap)
    container->heap[container->numSlot] = newTask;
 80023dc:	4b12      	ldr	r3, [pc, #72]	; (8002428 <SCH_Add_Task+0x84>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	4b11      	ldr	r3, [pc, #68]	; (8002428 <SCH_Add_Task+0x84>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4413      	add	r3, r2
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	601a      	str	r2, [r3, #0]
    container->numSlot++;
 80023f0:	4b0d      	ldr	r3, [pc, #52]	; (8002428 <SCH_Add_Task+0x84>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	3201      	adds	r2, #1
 80023f8:	605a      	str	r2, [r3, #4]
    container->emptySlot--;
 80023fa:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <SCH_Add_Task+0x84>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	3a01      	subs	r2, #1
 8002402:	609a      	str	r2, [r3, #8]

    // Duy trì tính chất min-heap
    heapifyUp(container, container->numSlot - 1);
 8002404:	4b08      	ldr	r3, [pc, #32]	; (8002428 <SCH_Add_Task+0x84>)
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	4b07      	ldr	r3, [pc, #28]	; (8002428 <SCH_Add_Task+0x84>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	3b01      	subs	r3, #1
 8002410:	4619      	mov	r1, r3
 8002412:	4610      	mov	r0, r2
 8002414:	f7ff ff20 	bl	8002258 <heapifyUp>
 8002418:	e002      	b.n	8002420 <SCH_Add_Task+0x7c>
        return;
 800241a:	bf00      	nop
 800241c:	e000      	b.n	8002420 <SCH_Add_Task+0x7c>
        return; // Kiểm tra lỗi malloc
 800241e:	bf00      	nop
}
 8002420:	3718      	adds	r7, #24
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	20000b4c 	.word	0x20000b4c

0800242c <SCH_Dispatch_Tasks>:
        heapifyDown(container, index); // Duy trì tính chất min-heap
    }
}

// Hàm dùng để xử lý task
void SCH_Dispatch_Tasks(void) {
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
    while (container->numSlot > 0 && container->heap[0]->Delay == 0) {
 8002432:	e03a      	b.n	80024aa <SCH_Dispatch_Tasks+0x7e>
        // Khi delay về 0 -> task được thực thi ( như biến cờ )
        (*(container->heap[0]->pTask))(); // Thực thi hàm của task
 8002434:	4b25      	ldr	r3, [pc, #148]	; (80024cc <SCH_Dispatch_Tasks+0xa0>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4798      	blx	r3

        // Lưu lại thông tin task đã xóa
        struct sTask* taskToDelete = container->heap[0];
 8002440:	4b22      	ldr	r3, [pc, #136]	; (80024cc <SCH_Dispatch_Tasks+0xa0>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	607b      	str	r3, [r7, #4]

        // Nếu task có chu kỳ, thêm lại vào heap với độ trễ là chu kỳ của nó
        if (taskToDelete->Period != 0) {
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d008      	beq.n	8002464 <SCH_Dispatch_Tasks+0x38>
            SCH_Add_Task(taskToDelete->pTask, taskToDelete->Period, taskToDelete->Period);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6818      	ldr	r0, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6899      	ldr	r1, [r3, #8]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	461a      	mov	r2, r3
 8002460:	f7ff ffa0 	bl	80023a4 <SCH_Add_Task>
        }

        // Xóa task khỏi heap
        container->heap[0] = container->heap[container->numSlot - 1]; // Di chuyển phần tử cuối cùng lên đầu
 8002464:	4b19      	ldr	r3, [pc, #100]	; (80024cc <SCH_Dispatch_Tasks+0xa0>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	4b18      	ldr	r3, [pc, #96]	; (80024cc <SCH_Dispatch_Tasks+0xa0>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002474:	3b01      	subs	r3, #1
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	441a      	add	r2, r3
 800247a:	4b14      	ldr	r3, [pc, #80]	; (80024cc <SCH_Dispatch_Tasks+0xa0>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6812      	ldr	r2, [r2, #0]
 8002482:	601a      	str	r2, [r3, #0]
        container->numSlot--;  // Giảm số lượng task
 8002484:	4b11      	ldr	r3, [pc, #68]	; (80024cc <SCH_Dispatch_Tasks+0xa0>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	3a01      	subs	r2, #1
 800248c:	605a      	str	r2, [r3, #4]
        container->emptySlot++; // Tăng số lượng slot trống
 800248e:	4b0f      	ldr	r3, [pc, #60]	; (80024cc <SCH_Dispatch_Tasks+0xa0>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	3201      	adds	r2, #1
 8002496:	609a      	str	r2, [r3, #8]

        free(taskToDelete);  // Giải phóng bộ nhớ của task đã xóa
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f003 f9f1 	bl	8005880 <free>
        heapifyDown(container, 0); // Duy trì tính chất min-heap
 800249e:	4b0b      	ldr	r3, [pc, #44]	; (80024cc <SCH_Dispatch_Tasks+0xa0>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	2100      	movs	r1, #0
 80024a4:	4618      	mov	r0, r3
 80024a6:	f7ff ff19 	bl	80022dc <heapifyDown>
    while (container->numSlot > 0 && container->heap[0]->Delay == 0) {
 80024aa:	4b08      	ldr	r3, [pc, #32]	; (80024cc <SCH_Dispatch_Tasks+0xa0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	dd06      	ble.n	80024c2 <SCH_Dispatch_Tasks+0x96>
 80024b4:	4b05      	ldr	r3, [pc, #20]	; (80024cc <SCH_Dispatch_Tasks+0xa0>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d0b8      	beq.n	8002434 <SCH_Dispatch_Tasks+0x8>
    }
}
 80024c2:	bf00      	nop
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	20000b4c 	.word	0x20000b4c

080024d0 <settimer1>:
 */
#include "software_timer.h"

int timerCouter[10];
int timerFlag[10];
void settimer1( int index , int counter){
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
	 timerCouter[index]= counter;
 80024da:	4907      	ldr	r1, [pc, #28]	; (80024f8 <settimer1+0x28>)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	 timerFlag[index]=0;
 80024e4:	4a05      	ldr	r2, [pc, #20]	; (80024fc <settimer1+0x2c>)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2100      	movs	r1, #0
 80024ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc80      	pop	{r7}
 80024f6:	4770      	bx	lr
 80024f8:	20000b78 	.word	0x20000b78
 80024fc:	20000b50 	.word	0x20000b50

08002500 <timerRun>:
void settimer2( int index , int counter){
	 timerCouter[index]= counter;
	 timerFlag[index]=0;
}
void timerRun(){
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
	for( int i=0 ; i < 10 ; i++){
 8002506:	2300      	movs	r3, #0
 8002508:	607b      	str	r3, [r7, #4]
 800250a:	e01c      	b.n	8002546 <timerRun+0x46>
		if(timerCouter[i]>0){
 800250c:	4a12      	ldr	r2, [pc, #72]	; (8002558 <timerRun+0x58>)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002514:	2b00      	cmp	r3, #0
 8002516:	dd08      	ble.n	800252a <timerRun+0x2a>
			timerCouter[i]--;
 8002518:	4a0f      	ldr	r2, [pc, #60]	; (8002558 <timerRun+0x58>)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002520:	1e5a      	subs	r2, r3, #1
 8002522:	490d      	ldr	r1, [pc, #52]	; (8002558 <timerRun+0x58>)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		if(timerCouter[i]<=0){
 800252a:	4a0b      	ldr	r2, [pc, #44]	; (8002558 <timerRun+0x58>)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002532:	2b00      	cmp	r3, #0
 8002534:	dc04      	bgt.n	8002540 <timerRun+0x40>
			timerFlag[i]=1;
 8002536:	4a09      	ldr	r2, [pc, #36]	; (800255c <timerRun+0x5c>)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2101      	movs	r1, #1
 800253c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for( int i=0 ; i < 10 ; i++){
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3301      	adds	r3, #1
 8002544:	607b      	str	r3, [r7, #4]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2b09      	cmp	r3, #9
 800254a:	dddf      	ble.n	800250c <timerRun+0xc>
		}
	}
}
 800254c:	bf00      	nop
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	bc80      	pop	{r7}
 8002556:	4770      	bx	lr
 8002558:	20000b78 	.word	0x20000b78
 800255c:	20000b50 	.word	0x20000b50

08002560 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002560:	b480      	push	{r7}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002566:	4b15      	ldr	r3, [pc, #84]	; (80025bc <HAL_MspInit+0x5c>)
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	4a14      	ldr	r2, [pc, #80]	; (80025bc <HAL_MspInit+0x5c>)
 800256c:	f043 0301 	orr.w	r3, r3, #1
 8002570:	6193      	str	r3, [r2, #24]
 8002572:	4b12      	ldr	r3, [pc, #72]	; (80025bc <HAL_MspInit+0x5c>)
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	f003 0301 	and.w	r3, r3, #1
 800257a:	60bb      	str	r3, [r7, #8]
 800257c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800257e:	4b0f      	ldr	r3, [pc, #60]	; (80025bc <HAL_MspInit+0x5c>)
 8002580:	69db      	ldr	r3, [r3, #28]
 8002582:	4a0e      	ldr	r2, [pc, #56]	; (80025bc <HAL_MspInit+0x5c>)
 8002584:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002588:	61d3      	str	r3, [r2, #28]
 800258a:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <HAL_MspInit+0x5c>)
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002592:	607b      	str	r3, [r7, #4]
 8002594:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002596:	4b0a      	ldr	r3, [pc, #40]	; (80025c0 <HAL_MspInit+0x60>)
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	60fb      	str	r3, [r7, #12]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	4a04      	ldr	r2, [pc, #16]	; (80025c0 <HAL_MspInit+0x60>)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025b2:	bf00      	nop
 80025b4:	3714      	adds	r7, #20
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr
 80025bc:	40021000 	.word	0x40021000
 80025c0:	40010000 	.word	0x40010000

080025c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b08a      	sub	sp, #40	; 0x28
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025cc:	f107 0314 	add.w	r3, r7, #20
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	605a      	str	r2, [r3, #4]
 80025d6:	609a      	str	r2, [r3, #8]
 80025d8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a1d      	ldr	r2, [pc, #116]	; (8002654 <HAL_I2C_MspInit+0x90>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d132      	bne.n	800264a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025e4:	4b1c      	ldr	r3, [pc, #112]	; (8002658 <HAL_I2C_MspInit+0x94>)
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	4a1b      	ldr	r2, [pc, #108]	; (8002658 <HAL_I2C_MspInit+0x94>)
 80025ea:	f043 0308 	orr.w	r3, r3, #8
 80025ee:	6193      	str	r3, [r2, #24]
 80025f0:	4b19      	ldr	r3, [pc, #100]	; (8002658 <HAL_I2C_MspInit+0x94>)
 80025f2:	699b      	ldr	r3, [r3, #24]
 80025f4:	f003 0308 	and.w	r3, r3, #8
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80025fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002602:	2312      	movs	r3, #18
 8002604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002606:	2303      	movs	r3, #3
 8002608:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800260a:	f107 0314 	add.w	r3, r7, #20
 800260e:	4619      	mov	r1, r3
 8002610:	4812      	ldr	r0, [pc, #72]	; (800265c <HAL_I2C_MspInit+0x98>)
 8002612:	f000 fbcd 	bl	8002db0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8002616:	4b12      	ldr	r3, [pc, #72]	; (8002660 <HAL_I2C_MspInit+0x9c>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	627b      	str	r3, [r7, #36]	; 0x24
 800261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002622:	627b      	str	r3, [r7, #36]	; 0x24
 8002624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002626:	f043 0302 	orr.w	r3, r3, #2
 800262a:	627b      	str	r3, [r7, #36]	; 0x24
 800262c:	4a0c      	ldr	r2, [pc, #48]	; (8002660 <HAL_I2C_MspInit+0x9c>)
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002632:	4b09      	ldr	r3, [pc, #36]	; (8002658 <HAL_I2C_MspInit+0x94>)
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	4a08      	ldr	r2, [pc, #32]	; (8002658 <HAL_I2C_MspInit+0x94>)
 8002638:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800263c:	61d3      	str	r3, [r2, #28]
 800263e:	4b06      	ldr	r3, [pc, #24]	; (8002658 <HAL_I2C_MspInit+0x94>)
 8002640:	69db      	ldr	r3, [r3, #28]
 8002642:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800264a:	bf00      	nop
 800264c:	3728      	adds	r7, #40	; 0x28
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40005400 	.word	0x40005400
 8002658:	40021000 	.word	0x40021000
 800265c:	40010c00 	.word	0x40010c00
 8002660:	40010000 	.word	0x40010000

08002664 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002674:	d113      	bne.n	800269e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002676:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <HAL_TIM_Base_MspInit+0x44>)
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	4a0b      	ldr	r2, [pc, #44]	; (80026a8 <HAL_TIM_Base_MspInit+0x44>)
 800267c:	f043 0301 	orr.w	r3, r3, #1
 8002680:	61d3      	str	r3, [r2, #28]
 8002682:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <HAL_TIM_Base_MspInit+0x44>)
 8002684:	69db      	ldr	r3, [r3, #28]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	60fb      	str	r3, [r7, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800268e:	2200      	movs	r2, #0
 8002690:	2100      	movs	r1, #0
 8002692:	201c      	movs	r0, #28
 8002694:	f000 faa3 	bl	8002bde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002698:	201c      	movs	r0, #28
 800269a:	f000 fabc 	bl	8002c16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800269e:	bf00      	nop
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40021000 	.word	0x40021000

080026ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b08c      	sub	sp, #48	; 0x30
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b4:	f107 031c 	add.w	r3, r7, #28
 80026b8:	2200      	movs	r2, #0
 80026ba:	601a      	str	r2, [r3, #0]
 80026bc:	605a      	str	r2, [r3, #4]
 80026be:	609a      	str	r2, [r3, #8]
 80026c0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a3e      	ldr	r2, [pc, #248]	; (80027c0 <HAL_UART_MspInit+0x114>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d124      	bne.n	8002716 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026cc:	4b3d      	ldr	r3, [pc, #244]	; (80027c4 <HAL_UART_MspInit+0x118>)
 80026ce:	69db      	ldr	r3, [r3, #28]
 80026d0:	4a3c      	ldr	r2, [pc, #240]	; (80027c4 <HAL_UART_MspInit+0x118>)
 80026d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026d6:	61d3      	str	r3, [r2, #28]
 80026d8:	4b3a      	ldr	r3, [pc, #232]	; (80027c4 <HAL_UART_MspInit+0x118>)
 80026da:	69db      	ldr	r3, [r3, #28]
 80026dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e0:	61bb      	str	r3, [r7, #24]
 80026e2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e4:	4b37      	ldr	r3, [pc, #220]	; (80027c4 <HAL_UART_MspInit+0x118>)
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	4a36      	ldr	r2, [pc, #216]	; (80027c4 <HAL_UART_MspInit+0x118>)
 80026ea:	f043 0304 	orr.w	r3, r3, #4
 80026ee:	6193      	str	r3, [r2, #24]
 80026f0:	4b34      	ldr	r3, [pc, #208]	; (80027c4 <HAL_UART_MspInit+0x118>)
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	617b      	str	r3, [r7, #20]
 80026fa:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80026fc:	230c      	movs	r3, #12
 80026fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002700:	2302      	movs	r3, #2
 8002702:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002704:	2302      	movs	r3, #2
 8002706:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002708:	f107 031c 	add.w	r3, r7, #28
 800270c:	4619      	mov	r1, r3
 800270e:	482e      	ldr	r0, [pc, #184]	; (80027c8 <HAL_UART_MspInit+0x11c>)
 8002710:	f000 fb4e 	bl	8002db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002714:	e050      	b.n	80027b8 <HAL_UART_MspInit+0x10c>
  else if(huart->Instance==USART3)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a2c      	ldr	r2, [pc, #176]	; (80027cc <HAL_UART_MspInit+0x120>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d14b      	bne.n	80027b8 <HAL_UART_MspInit+0x10c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002720:	4b28      	ldr	r3, [pc, #160]	; (80027c4 <HAL_UART_MspInit+0x118>)
 8002722:	69db      	ldr	r3, [r3, #28]
 8002724:	4a27      	ldr	r2, [pc, #156]	; (80027c4 <HAL_UART_MspInit+0x118>)
 8002726:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800272a:	61d3      	str	r3, [r2, #28]
 800272c:	4b25      	ldr	r3, [pc, #148]	; (80027c4 <HAL_UART_MspInit+0x118>)
 800272e:	69db      	ldr	r3, [r3, #28]
 8002730:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002734:	613b      	str	r3, [r7, #16]
 8002736:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002738:	4b22      	ldr	r3, [pc, #136]	; (80027c4 <HAL_UART_MspInit+0x118>)
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	4a21      	ldr	r2, [pc, #132]	; (80027c4 <HAL_UART_MspInit+0x118>)
 800273e:	f043 0310 	orr.w	r3, r3, #16
 8002742:	6193      	str	r3, [r2, #24]
 8002744:	4b1f      	ldr	r3, [pc, #124]	; (80027c4 <HAL_UART_MspInit+0x118>)
 8002746:	699b      	ldr	r3, [r3, #24]
 8002748:	f003 0310 	and.w	r3, r3, #16
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002750:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002756:	2302      	movs	r3, #2
 8002758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800275a:	2303      	movs	r3, #3
 800275c:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800275e:	f107 031c 	add.w	r3, r7, #28
 8002762:	4619      	mov	r1, r3
 8002764:	481a      	ldr	r0, [pc, #104]	; (80027d0 <HAL_UART_MspInit+0x124>)
 8002766:	f000 fb23 	bl	8002db0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800276a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800276e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002770:	2300      	movs	r3, #0
 8002772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002774:	2300      	movs	r3, #0
 8002776:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002778:	f107 031c 	add.w	r3, r7, #28
 800277c:	4619      	mov	r1, r3
 800277e:	4814      	ldr	r0, [pc, #80]	; (80027d0 <HAL_UART_MspInit+0x124>)
 8002780:	f000 fb16 	bl	8002db0 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8002784:	4b13      	ldr	r3, [pc, #76]	; (80027d4 <HAL_UART_MspInit+0x128>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	62fb      	str	r3, [r7, #44]	; 0x2c
 800278a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800278c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002790:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002794:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8002798:	62fb      	str	r3, [r7, #44]	; 0x2c
 800279a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800279c:	f043 0310 	orr.w	r3, r3, #16
 80027a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027a2:	4a0c      	ldr	r2, [pc, #48]	; (80027d4 <HAL_UART_MspInit+0x128>)
 80027a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a6:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80027a8:	2200      	movs	r2, #0
 80027aa:	2100      	movs	r1, #0
 80027ac:	2027      	movs	r0, #39	; 0x27
 80027ae:	f000 fa16 	bl	8002bde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80027b2:	2027      	movs	r0, #39	; 0x27
 80027b4:	f000 fa2f 	bl	8002c16 <HAL_NVIC_EnableIRQ>
}
 80027b8:	bf00      	nop
 80027ba:	3730      	adds	r7, #48	; 0x30
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	40004400 	.word	0x40004400
 80027c4:	40021000 	.word	0x40021000
 80027c8:	40010800 	.word	0x40010800
 80027cc:	40004800 	.word	0x40004800
 80027d0:	40011000 	.word	0x40011000
 80027d4:	40010000 	.word	0x40010000

080027d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027dc:	e7fe      	b.n	80027dc <NMI_Handler+0x4>

080027de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027de:	b480      	push	{r7}
 80027e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027e2:	e7fe      	b.n	80027e2 <HardFault_Handler+0x4>

080027e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027e8:	e7fe      	b.n	80027e8 <MemManage_Handler+0x4>

080027ea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027ea:	b480      	push	{r7}
 80027ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027ee:	e7fe      	b.n	80027ee <BusFault_Handler+0x4>

080027f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027f4:	e7fe      	b.n	80027f4 <UsageFault_Handler+0x4>

080027f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027f6:	b480      	push	{r7}
 80027f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027fa:	bf00      	nop
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bc80      	pop	{r7}
 8002800:	4770      	bx	lr

08002802 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002802:	b480      	push	{r7}
 8002804:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002806:	bf00      	nop
 8002808:	46bd      	mov	sp, r7
 800280a:	bc80      	pop	{r7}
 800280c:	4770      	bx	lr

0800280e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800280e:	b480      	push	{r7}
 8002810:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002812:	bf00      	nop
 8002814:	46bd      	mov	sp, r7
 8002816:	bc80      	pop	{r7}
 8002818:	4770      	bx	lr

0800281a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800281e:	f000 f8c7 	bl	80029b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002822:	bf00      	nop
 8002824:	bd80      	pop	{r7, pc}
	...

08002828 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800282c:	4802      	ldr	r0, [pc, #8]	; (8002838 <TIM2_IRQHandler+0x10>)
 800282e:	f001 fdf9 	bl	8004424 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002832:	bf00      	nop
 8002834:	bd80      	pop	{r7, pc}
 8002836:	bf00      	nop
 8002838:	20000b04 	.word	0x20000b04

0800283c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002840:	4802      	ldr	r0, [pc, #8]	; (800284c <USART3_IRQHandler+0x10>)
 8002842:	f002 fab1 	bl	8004da8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002846:	bf00      	nop
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	20000a68 	.word	0x20000a68

08002850 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002854:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002858:	f000 fc76 	bl	8003148 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800285c:	bf00      	nop
 800285e:	bd80      	pop	{r7, pc}

08002860 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002868:	4a14      	ldr	r2, [pc, #80]	; (80028bc <_sbrk+0x5c>)
 800286a:	4b15      	ldr	r3, [pc, #84]	; (80028c0 <_sbrk+0x60>)
 800286c:	1ad3      	subs	r3, r2, r3
 800286e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002874:	4b13      	ldr	r3, [pc, #76]	; (80028c4 <_sbrk+0x64>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d102      	bne.n	8002882 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800287c:	4b11      	ldr	r3, [pc, #68]	; (80028c4 <_sbrk+0x64>)
 800287e:	4a12      	ldr	r2, [pc, #72]	; (80028c8 <_sbrk+0x68>)
 8002880:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002882:	4b10      	ldr	r3, [pc, #64]	; (80028c4 <_sbrk+0x64>)
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	4413      	add	r3, r2
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	429a      	cmp	r2, r3
 800288e:	d207      	bcs.n	80028a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002890:	f002 ffc4 	bl	800581c <__errno>
 8002894:	4603      	mov	r3, r0
 8002896:	220c      	movs	r2, #12
 8002898:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800289a:	f04f 33ff 	mov.w	r3, #4294967295
 800289e:	e009      	b.n	80028b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028a0:	4b08      	ldr	r3, [pc, #32]	; (80028c4 <_sbrk+0x64>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028a6:	4b07      	ldr	r3, [pc, #28]	; (80028c4 <_sbrk+0x64>)
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4413      	add	r3, r2
 80028ae:	4a05      	ldr	r2, [pc, #20]	; (80028c4 <_sbrk+0x64>)
 80028b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028b2:	68fb      	ldr	r3, [r7, #12]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3718      	adds	r7, #24
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	20005000 	.word	0x20005000
 80028c0:	00000400 	.word	0x00000400
 80028c4:	20000950 	.word	0x20000950
 80028c8:	20000bb8 	.word	0x20000bb8

080028cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028d0:	bf00      	nop
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr

080028d8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80028d8:	f7ff fff8 	bl	80028cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028dc:	480b      	ldr	r0, [pc, #44]	; (800290c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80028de:	490c      	ldr	r1, [pc, #48]	; (8002910 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80028e0:	4a0c      	ldr	r2, [pc, #48]	; (8002914 <LoopFillZerobss+0x16>)
  movs r3, #0
 80028e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028e4:	e002      	b.n	80028ec <LoopCopyDataInit>

080028e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028ea:	3304      	adds	r3, #4

080028ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028f0:	d3f9      	bcc.n	80028e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028f2:	4a09      	ldr	r2, [pc, #36]	; (8002918 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80028f4:	4c09      	ldr	r4, [pc, #36]	; (800291c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80028f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028f8:	e001      	b.n	80028fe <LoopFillZerobss>

080028fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028fc:	3204      	adds	r2, #4

080028fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002900:	d3fb      	bcc.n	80028fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002902:	f002 ff91 	bl	8005828 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002906:	f7ff fa6d 	bl	8001de4 <main>
  bx lr
 800290a:	4770      	bx	lr
  ldr r0, =_sdata
 800290c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002910:	200000e0 	.word	0x200000e0
  ldr r2, =_sidata
 8002914:	08006a5c 	.word	0x08006a5c
  ldr r2, =_sbss
 8002918:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 800291c:	20000bb4 	.word	0x20000bb4

08002920 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002920:	e7fe      	b.n	8002920 <ADC1_2_IRQHandler>
	...

08002924 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002928:	4b08      	ldr	r3, [pc, #32]	; (800294c <HAL_Init+0x28>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a07      	ldr	r2, [pc, #28]	; (800294c <HAL_Init+0x28>)
 800292e:	f043 0310 	orr.w	r3, r3, #16
 8002932:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002934:	2003      	movs	r0, #3
 8002936:	f000 f947 	bl	8002bc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800293a:	2000      	movs	r0, #0
 800293c:	f000 f808 	bl	8002950 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002940:	f7ff fe0e 	bl	8002560 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40022000 	.word	0x40022000

08002950 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002958:	4b12      	ldr	r3, [pc, #72]	; (80029a4 <HAL_InitTick+0x54>)
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	4b12      	ldr	r3, [pc, #72]	; (80029a8 <HAL_InitTick+0x58>)
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	4619      	mov	r1, r3
 8002962:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002966:	fbb3 f3f1 	udiv	r3, r3, r1
 800296a:	fbb2 f3f3 	udiv	r3, r2, r3
 800296e:	4618      	mov	r0, r3
 8002970:	f000 f95f 	bl	8002c32 <HAL_SYSTICK_Config>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d001      	beq.n	800297e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e00e      	b.n	800299c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2b0f      	cmp	r3, #15
 8002982:	d80a      	bhi.n	800299a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002984:	2200      	movs	r2, #0
 8002986:	6879      	ldr	r1, [r7, #4]
 8002988:	f04f 30ff 	mov.w	r0, #4294967295
 800298c:	f000 f927 	bl	8002bde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002990:	4a06      	ldr	r2, [pc, #24]	; (80029ac <HAL_InitTick+0x5c>)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002996:	2300      	movs	r3, #0
 8002998:	e000      	b.n	800299c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
}
 800299c:	4618      	mov	r0, r3
 800299e:	3708      	adds	r7, #8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	20000070 	.word	0x20000070
 80029a8:	20000078 	.word	0x20000078
 80029ac:	20000074 	.word	0x20000074

080029b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029b4:	4b05      	ldr	r3, [pc, #20]	; (80029cc <HAL_IncTick+0x1c>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	461a      	mov	r2, r3
 80029ba:	4b05      	ldr	r3, [pc, #20]	; (80029d0 <HAL_IncTick+0x20>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4413      	add	r3, r2
 80029c0:	4a03      	ldr	r2, [pc, #12]	; (80029d0 <HAL_IncTick+0x20>)
 80029c2:	6013      	str	r3, [r2, #0]
}
 80029c4:	bf00      	nop
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bc80      	pop	{r7}
 80029ca:	4770      	bx	lr
 80029cc:	20000078 	.word	0x20000078
 80029d0:	20000ba0 	.word	0x20000ba0

080029d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  return uwTick;
 80029d8:	4b02      	ldr	r3, [pc, #8]	; (80029e4 <HAL_GetTick+0x10>)
 80029da:	681b      	ldr	r3, [r3, #0]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr
 80029e4:	20000ba0 	.word	0x20000ba0

080029e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029f0:	f7ff fff0 	bl	80029d4 <HAL_GetTick>
 80029f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a00:	d005      	beq.n	8002a0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a02:	4b0a      	ldr	r3, [pc, #40]	; (8002a2c <HAL_Delay+0x44>)
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	461a      	mov	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a0e:	bf00      	nop
 8002a10:	f7ff ffe0 	bl	80029d4 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d8f7      	bhi.n	8002a10 <HAL_Delay+0x28>
  {
  }
}
 8002a20:	bf00      	nop
 8002a22:	bf00      	nop
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	20000078 	.word	0x20000078

08002a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f003 0307 	and.w	r3, r3, #7
 8002a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a40:	4b0c      	ldr	r3, [pc, #48]	; (8002a74 <__NVIC_SetPriorityGrouping+0x44>)
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a46:	68ba      	ldr	r2, [r7, #8]
 8002a48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a62:	4a04      	ldr	r2, [pc, #16]	; (8002a74 <__NVIC_SetPriorityGrouping+0x44>)
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	60d3      	str	r3, [r2, #12]
}
 8002a68:	bf00      	nop
 8002a6a:	3714      	adds	r7, #20
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bc80      	pop	{r7}
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	e000ed00 	.word	0xe000ed00

08002a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a7c:	4b04      	ldr	r3, [pc, #16]	; (8002a90 <__NVIC_GetPriorityGrouping+0x18>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	0a1b      	lsrs	r3, r3, #8
 8002a82:	f003 0307 	and.w	r3, r3, #7
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bc80      	pop	{r7}
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	e000ed00 	.word	0xe000ed00

08002a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b083      	sub	sp, #12
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	db0b      	blt.n	8002abe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aa6:	79fb      	ldrb	r3, [r7, #7]
 8002aa8:	f003 021f 	and.w	r2, r3, #31
 8002aac:	4906      	ldr	r1, [pc, #24]	; (8002ac8 <__NVIC_EnableIRQ+0x34>)
 8002aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab2:	095b      	lsrs	r3, r3, #5
 8002ab4:	2001      	movs	r0, #1
 8002ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8002aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002abe:	bf00      	nop
 8002ac0:	370c      	adds	r7, #12
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bc80      	pop	{r7}
 8002ac6:	4770      	bx	lr
 8002ac8:	e000e100 	.word	0xe000e100

08002acc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	6039      	str	r1, [r7, #0]
 8002ad6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	db0a      	blt.n	8002af6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	b2da      	uxtb	r2, r3
 8002ae4:	490c      	ldr	r1, [pc, #48]	; (8002b18 <__NVIC_SetPriority+0x4c>)
 8002ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aea:	0112      	lsls	r2, r2, #4
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	440b      	add	r3, r1
 8002af0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002af4:	e00a      	b.n	8002b0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	4908      	ldr	r1, [pc, #32]	; (8002b1c <__NVIC_SetPriority+0x50>)
 8002afc:	79fb      	ldrb	r3, [r7, #7]
 8002afe:	f003 030f 	and.w	r3, r3, #15
 8002b02:	3b04      	subs	r3, #4
 8002b04:	0112      	lsls	r2, r2, #4
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	440b      	add	r3, r1
 8002b0a:	761a      	strb	r2, [r3, #24]
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bc80      	pop	{r7}
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	e000e100 	.word	0xe000e100
 8002b1c:	e000ed00 	.word	0xe000ed00

08002b20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b089      	sub	sp, #36	; 0x24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	f1c3 0307 	rsb	r3, r3, #7
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	bf28      	it	cs
 8002b3e:	2304      	movcs	r3, #4
 8002b40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	3304      	adds	r3, #4
 8002b46:	2b06      	cmp	r3, #6
 8002b48:	d902      	bls.n	8002b50 <NVIC_EncodePriority+0x30>
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	3b03      	subs	r3, #3
 8002b4e:	e000      	b.n	8002b52 <NVIC_EncodePriority+0x32>
 8002b50:	2300      	movs	r3, #0
 8002b52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b54:	f04f 32ff 	mov.w	r2, #4294967295
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43da      	mvns	r2, r3
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	401a      	ands	r2, r3
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b68:	f04f 31ff 	mov.w	r1, #4294967295
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b72:	43d9      	mvns	r1, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b78:	4313      	orrs	r3, r2
         );
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3724      	adds	r7, #36	; 0x24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bc80      	pop	{r7}
 8002b82:	4770      	bx	lr

08002b84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	3b01      	subs	r3, #1
 8002b90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b94:	d301      	bcc.n	8002b9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b96:	2301      	movs	r3, #1
 8002b98:	e00f      	b.n	8002bba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b9a:	4a0a      	ldr	r2, [pc, #40]	; (8002bc4 <SysTick_Config+0x40>)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	3b01      	subs	r3, #1
 8002ba0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ba2:	210f      	movs	r1, #15
 8002ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ba8:	f7ff ff90 	bl	8002acc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bac:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <SysTick_Config+0x40>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bb2:	4b04      	ldr	r3, [pc, #16]	; (8002bc4 <SysTick_Config+0x40>)
 8002bb4:	2207      	movs	r2, #7
 8002bb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3708      	adds	r7, #8
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	e000e010 	.word	0xe000e010

08002bc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f7ff ff2d 	bl	8002a30 <__NVIC_SetPriorityGrouping>
}
 8002bd6:	bf00      	nop
 8002bd8:	3708      	adds	r7, #8
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b086      	sub	sp, #24
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	4603      	mov	r3, r0
 8002be6:	60b9      	str	r1, [r7, #8]
 8002be8:	607a      	str	r2, [r7, #4]
 8002bea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bec:	2300      	movs	r3, #0
 8002bee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bf0:	f7ff ff42 	bl	8002a78 <__NVIC_GetPriorityGrouping>
 8002bf4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	68b9      	ldr	r1, [r7, #8]
 8002bfa:	6978      	ldr	r0, [r7, #20]
 8002bfc:	f7ff ff90 	bl	8002b20 <NVIC_EncodePriority>
 8002c00:	4602      	mov	r2, r0
 8002c02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c06:	4611      	mov	r1, r2
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff ff5f 	bl	8002acc <__NVIC_SetPriority>
}
 8002c0e:	bf00      	nop
 8002c10:	3718      	adds	r7, #24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b082      	sub	sp, #8
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff ff35 	bl	8002a94 <__NVIC_EnableIRQ>
}
 8002c2a:	bf00      	nop
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b082      	sub	sp, #8
 8002c36:	af00      	add	r7, sp, #0
 8002c38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7ff ffa2 	bl	8002b84 <SysTick_Config>
 8002c40:	4603      	mov	r3, r0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3708      	adds	r7, #8
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b085      	sub	sp, #20
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c52:	2300      	movs	r3, #0
 8002c54:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d008      	beq.n	8002c74 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2204      	movs	r2, #4
 8002c66:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e020      	b.n	8002cb6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f022 020e 	bic.w	r2, r2, #14
 8002c82:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f022 0201 	bic.w	r2, r2, #1
 8002c92:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8002ca2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3714      	adds	r7, #20
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr

08002cc0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d005      	beq.n	8002ce4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2204      	movs	r2, #4
 8002cdc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	73fb      	strb	r3, [r7, #15]
 8002ce2:	e051      	b.n	8002d88 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f022 020e 	bic.w	r2, r2, #14
 8002cf2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 0201 	bic.w	r2, r2, #1
 8002d02:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a22      	ldr	r2, [pc, #136]	; (8002d94 <HAL_DMA_Abort_IT+0xd4>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d029      	beq.n	8002d62 <HAL_DMA_Abort_IT+0xa2>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a21      	ldr	r2, [pc, #132]	; (8002d98 <HAL_DMA_Abort_IT+0xd8>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d022      	beq.n	8002d5e <HAL_DMA_Abort_IT+0x9e>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a1f      	ldr	r2, [pc, #124]	; (8002d9c <HAL_DMA_Abort_IT+0xdc>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d01a      	beq.n	8002d58 <HAL_DMA_Abort_IT+0x98>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a1e      	ldr	r2, [pc, #120]	; (8002da0 <HAL_DMA_Abort_IT+0xe0>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d012      	beq.n	8002d52 <HAL_DMA_Abort_IT+0x92>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a1c      	ldr	r2, [pc, #112]	; (8002da4 <HAL_DMA_Abort_IT+0xe4>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d00a      	beq.n	8002d4c <HAL_DMA_Abort_IT+0x8c>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a1b      	ldr	r2, [pc, #108]	; (8002da8 <HAL_DMA_Abort_IT+0xe8>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d102      	bne.n	8002d46 <HAL_DMA_Abort_IT+0x86>
 8002d40:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002d44:	e00e      	b.n	8002d64 <HAL_DMA_Abort_IT+0xa4>
 8002d46:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d4a:	e00b      	b.n	8002d64 <HAL_DMA_Abort_IT+0xa4>
 8002d4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d50:	e008      	b.n	8002d64 <HAL_DMA_Abort_IT+0xa4>
 8002d52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d56:	e005      	b.n	8002d64 <HAL_DMA_Abort_IT+0xa4>
 8002d58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d5c:	e002      	b.n	8002d64 <HAL_DMA_Abort_IT+0xa4>
 8002d5e:	2310      	movs	r3, #16
 8002d60:	e000      	b.n	8002d64 <HAL_DMA_Abort_IT+0xa4>
 8002d62:	2301      	movs	r3, #1
 8002d64:	4a11      	ldr	r2, [pc, #68]	; (8002dac <HAL_DMA_Abort_IT+0xec>)
 8002d66:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d003      	beq.n	8002d88 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	4798      	blx	r3
    } 
  }
  return status;
 8002d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop
 8002d94:	40020008 	.word	0x40020008
 8002d98:	4002001c 	.word	0x4002001c
 8002d9c:	40020030 	.word	0x40020030
 8002da0:	40020044 	.word	0x40020044
 8002da4:	40020058 	.word	0x40020058
 8002da8:	4002006c 	.word	0x4002006c
 8002dac:	40020000 	.word	0x40020000

08002db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b08b      	sub	sp, #44	; 0x2c
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002dc2:	e169      	b.n	8003098 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	69fa      	ldr	r2, [r7, #28]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002dd8:	69ba      	ldr	r2, [r7, #24]
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	429a      	cmp	r2, r3
 8002dde:	f040 8158 	bne.w	8003092 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	4a9a      	ldr	r2, [pc, #616]	; (8003050 <HAL_GPIO_Init+0x2a0>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d05e      	beq.n	8002eaa <HAL_GPIO_Init+0xfa>
 8002dec:	4a98      	ldr	r2, [pc, #608]	; (8003050 <HAL_GPIO_Init+0x2a0>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d875      	bhi.n	8002ede <HAL_GPIO_Init+0x12e>
 8002df2:	4a98      	ldr	r2, [pc, #608]	; (8003054 <HAL_GPIO_Init+0x2a4>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d058      	beq.n	8002eaa <HAL_GPIO_Init+0xfa>
 8002df8:	4a96      	ldr	r2, [pc, #600]	; (8003054 <HAL_GPIO_Init+0x2a4>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d86f      	bhi.n	8002ede <HAL_GPIO_Init+0x12e>
 8002dfe:	4a96      	ldr	r2, [pc, #600]	; (8003058 <HAL_GPIO_Init+0x2a8>)
 8002e00:	4293      	cmp	r3, r2
 8002e02:	d052      	beq.n	8002eaa <HAL_GPIO_Init+0xfa>
 8002e04:	4a94      	ldr	r2, [pc, #592]	; (8003058 <HAL_GPIO_Init+0x2a8>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d869      	bhi.n	8002ede <HAL_GPIO_Init+0x12e>
 8002e0a:	4a94      	ldr	r2, [pc, #592]	; (800305c <HAL_GPIO_Init+0x2ac>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d04c      	beq.n	8002eaa <HAL_GPIO_Init+0xfa>
 8002e10:	4a92      	ldr	r2, [pc, #584]	; (800305c <HAL_GPIO_Init+0x2ac>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d863      	bhi.n	8002ede <HAL_GPIO_Init+0x12e>
 8002e16:	4a92      	ldr	r2, [pc, #584]	; (8003060 <HAL_GPIO_Init+0x2b0>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d046      	beq.n	8002eaa <HAL_GPIO_Init+0xfa>
 8002e1c:	4a90      	ldr	r2, [pc, #576]	; (8003060 <HAL_GPIO_Init+0x2b0>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d85d      	bhi.n	8002ede <HAL_GPIO_Init+0x12e>
 8002e22:	2b12      	cmp	r3, #18
 8002e24:	d82a      	bhi.n	8002e7c <HAL_GPIO_Init+0xcc>
 8002e26:	2b12      	cmp	r3, #18
 8002e28:	d859      	bhi.n	8002ede <HAL_GPIO_Init+0x12e>
 8002e2a:	a201      	add	r2, pc, #4	; (adr r2, 8002e30 <HAL_GPIO_Init+0x80>)
 8002e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e30:	08002eab 	.word	0x08002eab
 8002e34:	08002e85 	.word	0x08002e85
 8002e38:	08002e97 	.word	0x08002e97
 8002e3c:	08002ed9 	.word	0x08002ed9
 8002e40:	08002edf 	.word	0x08002edf
 8002e44:	08002edf 	.word	0x08002edf
 8002e48:	08002edf 	.word	0x08002edf
 8002e4c:	08002edf 	.word	0x08002edf
 8002e50:	08002edf 	.word	0x08002edf
 8002e54:	08002edf 	.word	0x08002edf
 8002e58:	08002edf 	.word	0x08002edf
 8002e5c:	08002edf 	.word	0x08002edf
 8002e60:	08002edf 	.word	0x08002edf
 8002e64:	08002edf 	.word	0x08002edf
 8002e68:	08002edf 	.word	0x08002edf
 8002e6c:	08002edf 	.word	0x08002edf
 8002e70:	08002edf 	.word	0x08002edf
 8002e74:	08002e8d 	.word	0x08002e8d
 8002e78:	08002ea1 	.word	0x08002ea1
 8002e7c:	4a79      	ldr	r2, [pc, #484]	; (8003064 <HAL_GPIO_Init+0x2b4>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d013      	beq.n	8002eaa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002e82:	e02c      	b.n	8002ede <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	623b      	str	r3, [r7, #32]
          break;
 8002e8a:	e029      	b.n	8002ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	3304      	adds	r3, #4
 8002e92:	623b      	str	r3, [r7, #32]
          break;
 8002e94:	e024      	b.n	8002ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	3308      	adds	r3, #8
 8002e9c:	623b      	str	r3, [r7, #32]
          break;
 8002e9e:	e01f      	b.n	8002ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	330c      	adds	r3, #12
 8002ea6:	623b      	str	r3, [r7, #32]
          break;
 8002ea8:	e01a      	b.n	8002ee0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d102      	bne.n	8002eb8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002eb2:	2304      	movs	r3, #4
 8002eb4:	623b      	str	r3, [r7, #32]
          break;
 8002eb6:	e013      	b.n	8002ee0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d105      	bne.n	8002ecc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ec0:	2308      	movs	r3, #8
 8002ec2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	69fa      	ldr	r2, [r7, #28]
 8002ec8:	611a      	str	r2, [r3, #16]
          break;
 8002eca:	e009      	b.n	8002ee0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ecc:	2308      	movs	r3, #8
 8002ece:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	69fa      	ldr	r2, [r7, #28]
 8002ed4:	615a      	str	r2, [r3, #20]
          break;
 8002ed6:	e003      	b.n	8002ee0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	623b      	str	r3, [r7, #32]
          break;
 8002edc:	e000      	b.n	8002ee0 <HAL_GPIO_Init+0x130>
          break;
 8002ede:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	2bff      	cmp	r3, #255	; 0xff
 8002ee4:	d801      	bhi.n	8002eea <HAL_GPIO_Init+0x13a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	e001      	b.n	8002eee <HAL_GPIO_Init+0x13e>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	3304      	adds	r3, #4
 8002eee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	2bff      	cmp	r3, #255	; 0xff
 8002ef4:	d802      	bhi.n	8002efc <HAL_GPIO_Init+0x14c>
 8002ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	e002      	b.n	8002f02 <HAL_GPIO_Init+0x152>
 8002efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efe:	3b08      	subs	r3, #8
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	210f      	movs	r1, #15
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002f10:	43db      	mvns	r3, r3
 8002f12:	401a      	ands	r2, r3
 8002f14:	6a39      	ldr	r1, [r7, #32]
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	fa01 f303 	lsl.w	r3, r1, r3
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 80b1 	beq.w	8003092 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002f30:	4b4d      	ldr	r3, [pc, #308]	; (8003068 <HAL_GPIO_Init+0x2b8>)
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	4a4c      	ldr	r2, [pc, #304]	; (8003068 <HAL_GPIO_Init+0x2b8>)
 8002f36:	f043 0301 	orr.w	r3, r3, #1
 8002f3a:	6193      	str	r3, [r2, #24]
 8002f3c:	4b4a      	ldr	r3, [pc, #296]	; (8003068 <HAL_GPIO_Init+0x2b8>)
 8002f3e:	699b      	ldr	r3, [r3, #24]
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	60bb      	str	r3, [r7, #8]
 8002f46:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002f48:	4a48      	ldr	r2, [pc, #288]	; (800306c <HAL_GPIO_Init+0x2bc>)
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4c:	089b      	lsrs	r3, r3, #2
 8002f4e:	3302      	adds	r3, #2
 8002f50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f54:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f58:	f003 0303 	and.w	r3, r3, #3
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	220f      	movs	r2, #15
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	43db      	mvns	r3, r3
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a40      	ldr	r2, [pc, #256]	; (8003070 <HAL_GPIO_Init+0x2c0>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d013      	beq.n	8002f9c <HAL_GPIO_Init+0x1ec>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a3f      	ldr	r2, [pc, #252]	; (8003074 <HAL_GPIO_Init+0x2c4>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d00d      	beq.n	8002f98 <HAL_GPIO_Init+0x1e8>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4a3e      	ldr	r2, [pc, #248]	; (8003078 <HAL_GPIO_Init+0x2c8>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d007      	beq.n	8002f94 <HAL_GPIO_Init+0x1e4>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4a3d      	ldr	r2, [pc, #244]	; (800307c <HAL_GPIO_Init+0x2cc>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d101      	bne.n	8002f90 <HAL_GPIO_Init+0x1e0>
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e006      	b.n	8002f9e <HAL_GPIO_Init+0x1ee>
 8002f90:	2304      	movs	r3, #4
 8002f92:	e004      	b.n	8002f9e <HAL_GPIO_Init+0x1ee>
 8002f94:	2302      	movs	r3, #2
 8002f96:	e002      	b.n	8002f9e <HAL_GPIO_Init+0x1ee>
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e000      	b.n	8002f9e <HAL_GPIO_Init+0x1ee>
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fa0:	f002 0203 	and.w	r2, r2, #3
 8002fa4:	0092      	lsls	r2, r2, #2
 8002fa6:	4093      	lsls	r3, r2
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002fae:	492f      	ldr	r1, [pc, #188]	; (800306c <HAL_GPIO_Init+0x2bc>)
 8002fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb2:	089b      	lsrs	r3, r3, #2
 8002fb4:	3302      	adds	r3, #2
 8002fb6:	68fa      	ldr	r2, [r7, #12]
 8002fb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d006      	beq.n	8002fd6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002fc8:	4b2d      	ldr	r3, [pc, #180]	; (8003080 <HAL_GPIO_Init+0x2d0>)
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	492c      	ldr	r1, [pc, #176]	; (8003080 <HAL_GPIO_Init+0x2d0>)
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	608b      	str	r3, [r1, #8]
 8002fd4:	e006      	b.n	8002fe4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002fd6:	4b2a      	ldr	r3, [pc, #168]	; (8003080 <HAL_GPIO_Init+0x2d0>)
 8002fd8:	689a      	ldr	r2, [r3, #8]
 8002fda:	69bb      	ldr	r3, [r7, #24]
 8002fdc:	43db      	mvns	r3, r3
 8002fde:	4928      	ldr	r1, [pc, #160]	; (8003080 <HAL_GPIO_Init+0x2d0>)
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d006      	beq.n	8002ffe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ff0:	4b23      	ldr	r3, [pc, #140]	; (8003080 <HAL_GPIO_Init+0x2d0>)
 8002ff2:	68da      	ldr	r2, [r3, #12]
 8002ff4:	4922      	ldr	r1, [pc, #136]	; (8003080 <HAL_GPIO_Init+0x2d0>)
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	60cb      	str	r3, [r1, #12]
 8002ffc:	e006      	b.n	800300c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ffe:	4b20      	ldr	r3, [pc, #128]	; (8003080 <HAL_GPIO_Init+0x2d0>)
 8003000:	68da      	ldr	r2, [r3, #12]
 8003002:	69bb      	ldr	r3, [r7, #24]
 8003004:	43db      	mvns	r3, r3
 8003006:	491e      	ldr	r1, [pc, #120]	; (8003080 <HAL_GPIO_Init+0x2d0>)
 8003008:	4013      	ands	r3, r2
 800300a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d006      	beq.n	8003026 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003018:	4b19      	ldr	r3, [pc, #100]	; (8003080 <HAL_GPIO_Init+0x2d0>)
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	4918      	ldr	r1, [pc, #96]	; (8003080 <HAL_GPIO_Init+0x2d0>)
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	4313      	orrs	r3, r2
 8003022:	604b      	str	r3, [r1, #4]
 8003024:	e006      	b.n	8003034 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003026:	4b16      	ldr	r3, [pc, #88]	; (8003080 <HAL_GPIO_Init+0x2d0>)
 8003028:	685a      	ldr	r2, [r3, #4]
 800302a:	69bb      	ldr	r3, [r7, #24]
 800302c:	43db      	mvns	r3, r3
 800302e:	4914      	ldr	r1, [pc, #80]	; (8003080 <HAL_GPIO_Init+0x2d0>)
 8003030:	4013      	ands	r3, r2
 8003032:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d021      	beq.n	8003084 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003040:	4b0f      	ldr	r3, [pc, #60]	; (8003080 <HAL_GPIO_Init+0x2d0>)
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	490e      	ldr	r1, [pc, #56]	; (8003080 <HAL_GPIO_Init+0x2d0>)
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	4313      	orrs	r3, r2
 800304a:	600b      	str	r3, [r1, #0]
 800304c:	e021      	b.n	8003092 <HAL_GPIO_Init+0x2e2>
 800304e:	bf00      	nop
 8003050:	10320000 	.word	0x10320000
 8003054:	10310000 	.word	0x10310000
 8003058:	10220000 	.word	0x10220000
 800305c:	10210000 	.word	0x10210000
 8003060:	10120000 	.word	0x10120000
 8003064:	10110000 	.word	0x10110000
 8003068:	40021000 	.word	0x40021000
 800306c:	40010000 	.word	0x40010000
 8003070:	40010800 	.word	0x40010800
 8003074:	40010c00 	.word	0x40010c00
 8003078:	40011000 	.word	0x40011000
 800307c:	40011400 	.word	0x40011400
 8003080:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003084:	4b0b      	ldr	r3, [pc, #44]	; (80030b4 <HAL_GPIO_Init+0x304>)
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	43db      	mvns	r3, r3
 800308c:	4909      	ldr	r1, [pc, #36]	; (80030b4 <HAL_GPIO_Init+0x304>)
 800308e:	4013      	ands	r3, r2
 8003090:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003094:	3301      	adds	r3, #1
 8003096:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309e:	fa22 f303 	lsr.w	r3, r2, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	f47f ae8e 	bne.w	8002dc4 <HAL_GPIO_Init+0x14>
  }
}
 80030a8:	bf00      	nop
 80030aa:	bf00      	nop
 80030ac:	372c      	adds	r7, #44	; 0x2c
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bc80      	pop	{r7}
 80030b2:	4770      	bx	lr
 80030b4:	40010400 	.word	0x40010400

080030b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b085      	sub	sp, #20
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	460b      	mov	r3, r1
 80030c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	887b      	ldrh	r3, [r7, #2]
 80030ca:	4013      	ands	r3, r2
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d002      	beq.n	80030d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030d0:	2301      	movs	r3, #1
 80030d2:	73fb      	strb	r3, [r7, #15]
 80030d4:	e001      	b.n	80030da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030d6:	2300      	movs	r3, #0
 80030d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030da:	7bfb      	ldrb	r3, [r7, #15]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3714      	adds	r7, #20
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bc80      	pop	{r7}
 80030e4:	4770      	bx	lr

080030e6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030e6:	b480      	push	{r7}
 80030e8:	b083      	sub	sp, #12
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
 80030ee:	460b      	mov	r3, r1
 80030f0:	807b      	strh	r3, [r7, #2]
 80030f2:	4613      	mov	r3, r2
 80030f4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80030f6:	787b      	ldrb	r3, [r7, #1]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d003      	beq.n	8003104 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030fc:	887a      	ldrh	r2, [r7, #2]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003102:	e003      	b.n	800310c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003104:	887b      	ldrh	r3, [r7, #2]
 8003106:	041a      	lsls	r2, r3, #16
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	611a      	str	r2, [r3, #16]
}
 800310c:	bf00      	nop
 800310e:	370c      	adds	r7, #12
 8003110:	46bd      	mov	sp, r7
 8003112:	bc80      	pop	{r7}
 8003114:	4770      	bx	lr

08003116 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003116:	b480      	push	{r7}
 8003118:	b085      	sub	sp, #20
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
 800311e:	460b      	mov	r3, r1
 8003120:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003128:	887a      	ldrh	r2, [r7, #2]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	4013      	ands	r3, r2
 800312e:	041a      	lsls	r2, r3, #16
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	43d9      	mvns	r1, r3
 8003134:	887b      	ldrh	r3, [r7, #2]
 8003136:	400b      	ands	r3, r1
 8003138:	431a      	orrs	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	611a      	str	r2, [r3, #16]
}
 800313e:	bf00      	nop
 8003140:	3714      	adds	r7, #20
 8003142:	46bd      	mov	sp, r7
 8003144:	bc80      	pop	{r7}
 8003146:	4770      	bx	lr

08003148 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	4603      	mov	r3, r0
 8003150:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003152:	4b08      	ldr	r3, [pc, #32]	; (8003174 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003154:	695a      	ldr	r2, [r3, #20]
 8003156:	88fb      	ldrh	r3, [r7, #6]
 8003158:	4013      	ands	r3, r2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d006      	beq.n	800316c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800315e:	4a05      	ldr	r2, [pc, #20]	; (8003174 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003160:	88fb      	ldrh	r3, [r7, #6]
 8003162:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003164:	88fb      	ldrh	r3, [r7, #6]
 8003166:	4618      	mov	r0, r3
 8003168:	f000 f806 	bl	8003178 <HAL_GPIO_EXTI_Callback>
  }
}
 800316c:	bf00      	nop
 800316e:	3708      	adds	r7, #8
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40010400 	.word	0x40010400

08003178 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	4603      	mov	r3, r0
 8003180:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	bc80      	pop	{r7}
 800318a:	4770      	bx	lr

0800318c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800318c:	b580      	push	{r7, lr}
 800318e:	b084      	sub	sp, #16
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d101      	bne.n	800319e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e12b      	b.n	80033f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d106      	bne.n	80031b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f7ff fa06 	bl	80025c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2224      	movs	r2, #36	; 0x24
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 0201 	bic.w	r2, r2, #1
 80031ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031f0:	f001 f830 	bl	8004254 <HAL_RCC_GetPCLK1Freq>
 80031f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	4a81      	ldr	r2, [pc, #516]	; (8003400 <HAL_I2C_Init+0x274>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d807      	bhi.n	8003210 <HAL_I2C_Init+0x84>
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	4a80      	ldr	r2, [pc, #512]	; (8003404 <HAL_I2C_Init+0x278>)
 8003204:	4293      	cmp	r3, r2
 8003206:	bf94      	ite	ls
 8003208:	2301      	movls	r3, #1
 800320a:	2300      	movhi	r3, #0
 800320c:	b2db      	uxtb	r3, r3
 800320e:	e006      	b.n	800321e <HAL_I2C_Init+0x92>
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	4a7d      	ldr	r2, [pc, #500]	; (8003408 <HAL_I2C_Init+0x27c>)
 8003214:	4293      	cmp	r3, r2
 8003216:	bf94      	ite	ls
 8003218:	2301      	movls	r3, #1
 800321a:	2300      	movhi	r3, #0
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e0e7      	b.n	80033f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	4a78      	ldr	r2, [pc, #480]	; (800340c <HAL_I2C_Init+0x280>)
 800322a:	fba2 2303 	umull	r2, r3, r2, r3
 800322e:	0c9b      	lsrs	r3, r3, #18
 8003230:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	430a      	orrs	r2, r1
 8003244:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	4a6a      	ldr	r2, [pc, #424]	; (8003400 <HAL_I2C_Init+0x274>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d802      	bhi.n	8003260 <HAL_I2C_Init+0xd4>
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	3301      	adds	r3, #1
 800325e:	e009      	b.n	8003274 <HAL_I2C_Init+0xe8>
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003266:	fb02 f303 	mul.w	r3, r2, r3
 800326a:	4a69      	ldr	r2, [pc, #420]	; (8003410 <HAL_I2C_Init+0x284>)
 800326c:	fba2 2303 	umull	r2, r3, r2, r3
 8003270:	099b      	lsrs	r3, r3, #6
 8003272:	3301      	adds	r3, #1
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	6812      	ldr	r2, [r2, #0]
 8003278:	430b      	orrs	r3, r1
 800327a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	69db      	ldr	r3, [r3, #28]
 8003282:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003286:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	495c      	ldr	r1, [pc, #368]	; (8003400 <HAL_I2C_Init+0x274>)
 8003290:	428b      	cmp	r3, r1
 8003292:	d819      	bhi.n	80032c8 <HAL_I2C_Init+0x13c>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	1e59      	subs	r1, r3, #1
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	005b      	lsls	r3, r3, #1
 800329e:	fbb1 f3f3 	udiv	r3, r1, r3
 80032a2:	1c59      	adds	r1, r3, #1
 80032a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80032a8:	400b      	ands	r3, r1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00a      	beq.n	80032c4 <HAL_I2C_Init+0x138>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	1e59      	subs	r1, r3, #1
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80032bc:	3301      	adds	r3, #1
 80032be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032c2:	e051      	b.n	8003368 <HAL_I2C_Init+0x1dc>
 80032c4:	2304      	movs	r3, #4
 80032c6:	e04f      	b.n	8003368 <HAL_I2C_Init+0x1dc>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d111      	bne.n	80032f4 <HAL_I2C_Init+0x168>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	1e58      	subs	r0, r3, #1
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6859      	ldr	r1, [r3, #4]
 80032d8:	460b      	mov	r3, r1
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	440b      	add	r3, r1
 80032de:	fbb0 f3f3 	udiv	r3, r0, r3
 80032e2:	3301      	adds	r3, #1
 80032e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	bf0c      	ite	eq
 80032ec:	2301      	moveq	r3, #1
 80032ee:	2300      	movne	r3, #0
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	e012      	b.n	800331a <HAL_I2C_Init+0x18e>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	1e58      	subs	r0, r3, #1
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6859      	ldr	r1, [r3, #4]
 80032fc:	460b      	mov	r3, r1
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	440b      	add	r3, r1
 8003302:	0099      	lsls	r1, r3, #2
 8003304:	440b      	add	r3, r1
 8003306:	fbb0 f3f3 	udiv	r3, r0, r3
 800330a:	3301      	adds	r3, #1
 800330c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003310:	2b00      	cmp	r3, #0
 8003312:	bf0c      	ite	eq
 8003314:	2301      	moveq	r3, #1
 8003316:	2300      	movne	r3, #0
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <HAL_I2C_Init+0x196>
 800331e:	2301      	movs	r3, #1
 8003320:	e022      	b.n	8003368 <HAL_I2C_Init+0x1dc>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10e      	bne.n	8003348 <HAL_I2C_Init+0x1bc>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	1e58      	subs	r0, r3, #1
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6859      	ldr	r1, [r3, #4]
 8003332:	460b      	mov	r3, r1
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	440b      	add	r3, r1
 8003338:	fbb0 f3f3 	udiv	r3, r0, r3
 800333c:	3301      	adds	r3, #1
 800333e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003342:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003346:	e00f      	b.n	8003368 <HAL_I2C_Init+0x1dc>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	1e58      	subs	r0, r3, #1
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6859      	ldr	r1, [r3, #4]
 8003350:	460b      	mov	r3, r1
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	440b      	add	r3, r1
 8003356:	0099      	lsls	r1, r3, #2
 8003358:	440b      	add	r3, r1
 800335a:	fbb0 f3f3 	udiv	r3, r0, r3
 800335e:	3301      	adds	r3, #1
 8003360:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003364:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003368:	6879      	ldr	r1, [r7, #4]
 800336a:	6809      	ldr	r1, [r1, #0]
 800336c:	4313      	orrs	r3, r2
 800336e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	69da      	ldr	r2, [r3, #28]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	431a      	orrs	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	430a      	orrs	r2, r1
 800338a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003396:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	6911      	ldr	r1, [r2, #16]
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	68d2      	ldr	r2, [r2, #12]
 80033a2:	4311      	orrs	r1, r2
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	6812      	ldr	r2, [r2, #0]
 80033a8:	430b      	orrs	r3, r1
 80033aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	695a      	ldr	r2, [r3, #20]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	431a      	orrs	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	430a      	orrs	r2, r1
 80033c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f042 0201 	orr.w	r2, r2, #1
 80033d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2220      	movs	r2, #32
 80033e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	000186a0 	.word	0x000186a0
 8003404:	001e847f 	.word	0x001e847f
 8003408:	003d08ff 	.word	0x003d08ff
 800340c:	431bde83 	.word	0x431bde83
 8003410:	10624dd3 	.word	0x10624dd3

08003414 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b088      	sub	sp, #32
 8003418:	af02      	add	r7, sp, #8
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	607a      	str	r2, [r7, #4]
 800341e:	461a      	mov	r2, r3
 8003420:	460b      	mov	r3, r1
 8003422:	817b      	strh	r3, [r7, #10]
 8003424:	4613      	mov	r3, r2
 8003426:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003428:	f7ff fad4 	bl	80029d4 <HAL_GetTick>
 800342c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b20      	cmp	r3, #32
 8003438:	f040 80e0 	bne.w	80035fc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	9300      	str	r3, [sp, #0]
 8003440:	2319      	movs	r3, #25
 8003442:	2201      	movs	r2, #1
 8003444:	4970      	ldr	r1, [pc, #448]	; (8003608 <HAL_I2C_Master_Transmit+0x1f4>)
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f000 f964 	bl	8003714 <I2C_WaitOnFlagUntilTimeout>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d001      	beq.n	8003456 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003452:	2302      	movs	r3, #2
 8003454:	e0d3      	b.n	80035fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800345c:	2b01      	cmp	r3, #1
 800345e:	d101      	bne.n	8003464 <HAL_I2C_Master_Transmit+0x50>
 8003460:	2302      	movs	r3, #2
 8003462:	e0cc      	b.n	80035fe <HAL_I2C_Master_Transmit+0x1ea>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0301 	and.w	r3, r3, #1
 8003476:	2b01      	cmp	r3, #1
 8003478:	d007      	beq.n	800348a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f042 0201 	orr.w	r2, r2, #1
 8003488:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003498:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2221      	movs	r2, #33	; 0x21
 800349e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2210      	movs	r2, #16
 80034a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	687a      	ldr	r2, [r7, #4]
 80034b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	893a      	ldrh	r2, [r7, #8]
 80034ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c0:	b29a      	uxth	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	4a50      	ldr	r2, [pc, #320]	; (800360c <HAL_I2C_Master_Transmit+0x1f8>)
 80034ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80034cc:	8979      	ldrh	r1, [r7, #10]
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	6a3a      	ldr	r2, [r7, #32]
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f000 f89c 	bl	8003610 <I2C_MasterRequestWrite>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e08d      	b.n	80035fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034e2:	2300      	movs	r3, #0
 80034e4:	613b      	str	r3, [r7, #16]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	613b      	str	r3, [r7, #16]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	613b      	str	r3, [r7, #16]
 80034f6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80034f8:	e066      	b.n	80035c8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	6a39      	ldr	r1, [r7, #32]
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f000 fa22 	bl	8003948 <I2C_WaitOnTXEFlagUntilTimeout>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00d      	beq.n	8003526 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	2b04      	cmp	r3, #4
 8003510:	d107      	bne.n	8003522 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003520:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e06b      	b.n	80035fe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352a:	781a      	ldrb	r2, [r3, #0]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003536:	1c5a      	adds	r2, r3, #1
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003540:	b29b      	uxth	r3, r3
 8003542:	3b01      	subs	r3, #1
 8003544:	b29a      	uxth	r2, r3
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800354e:	3b01      	subs	r3, #1
 8003550:	b29a      	uxth	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	695b      	ldr	r3, [r3, #20]
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b04      	cmp	r3, #4
 8003562:	d11b      	bne.n	800359c <HAL_I2C_Master_Transmit+0x188>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003568:	2b00      	cmp	r3, #0
 800356a:	d017      	beq.n	800359c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003570:	781a      	ldrb	r2, [r3, #0]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357c:	1c5a      	adds	r2, r3, #1
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003586:	b29b      	uxth	r3, r3
 8003588:	3b01      	subs	r3, #1
 800358a:	b29a      	uxth	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003594:	3b01      	subs	r3, #1
 8003596:	b29a      	uxth	r2, r3
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	6a39      	ldr	r1, [r7, #32]
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f000 fa19 	bl	80039d8 <I2C_WaitOnBTFFlagUntilTimeout>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00d      	beq.n	80035c8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b0:	2b04      	cmp	r3, #4
 80035b2:	d107      	bne.n	80035c4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035c2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e01a      	b.n	80035fe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d194      	bne.n	80034fa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2220      	movs	r2, #32
 80035e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2200      	movs	r2, #0
 80035f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80035f8:	2300      	movs	r3, #0
 80035fa:	e000      	b.n	80035fe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80035fc:	2302      	movs	r3, #2
  }
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3718      	adds	r7, #24
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	00100002 	.word	0x00100002
 800360c:	ffff0000 	.word	0xffff0000

08003610 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b088      	sub	sp, #32
 8003614:	af02      	add	r7, sp, #8
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	607a      	str	r2, [r7, #4]
 800361a:	603b      	str	r3, [r7, #0]
 800361c:	460b      	mov	r3, r1
 800361e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003624:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	2b08      	cmp	r3, #8
 800362a:	d006      	beq.n	800363a <I2C_MasterRequestWrite+0x2a>
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d003      	beq.n	800363a <I2C_MasterRequestWrite+0x2a>
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003638:	d108      	bne.n	800364c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003648:	601a      	str	r2, [r3, #0]
 800364a:	e00b      	b.n	8003664 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003650:	2b12      	cmp	r3, #18
 8003652:	d107      	bne.n	8003664 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003662:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	9300      	str	r3, [sp, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f000 f84f 	bl	8003714 <I2C_WaitOnFlagUntilTimeout>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00d      	beq.n	8003698 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003686:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800368a:	d103      	bne.n	8003694 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003692:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e035      	b.n	8003704 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036a0:	d108      	bne.n	80036b4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80036a2:	897b      	ldrh	r3, [r7, #10]
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	461a      	mov	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036b0:	611a      	str	r2, [r3, #16]
 80036b2:	e01b      	b.n	80036ec <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80036b4:	897b      	ldrh	r3, [r7, #10]
 80036b6:	11db      	asrs	r3, r3, #7
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	f003 0306 	and.w	r3, r3, #6
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	f063 030f 	orn	r3, r3, #15
 80036c4:	b2da      	uxtb	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	687a      	ldr	r2, [r7, #4]
 80036d0:	490e      	ldr	r1, [pc, #56]	; (800370c <I2C_MasterRequestWrite+0xfc>)
 80036d2:	68f8      	ldr	r0, [r7, #12]
 80036d4:	f000 f898 	bl	8003808 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80036de:	2301      	movs	r3, #1
 80036e0:	e010      	b.n	8003704 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80036e2:	897b      	ldrh	r3, [r7, #10]
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	4907      	ldr	r1, [pc, #28]	; (8003710 <I2C_MasterRequestWrite+0x100>)
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f000 f888 	bl	8003808 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d001      	beq.n	8003702 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e000      	b.n	8003704 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003702:	2300      	movs	r3, #0
}
 8003704:	4618      	mov	r0, r3
 8003706:	3718      	adds	r7, #24
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	00010008 	.word	0x00010008
 8003710:	00010002 	.word	0x00010002

08003714 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	603b      	str	r3, [r7, #0]
 8003720:	4613      	mov	r3, r2
 8003722:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003724:	e048      	b.n	80037b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800372c:	d044      	beq.n	80037b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800372e:	f7ff f951 	bl	80029d4 <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	1ad3      	subs	r3, r2, r3
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	429a      	cmp	r2, r3
 800373c:	d302      	bcc.n	8003744 <I2C_WaitOnFlagUntilTimeout+0x30>
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d139      	bne.n	80037b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	0c1b      	lsrs	r3, r3, #16
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b01      	cmp	r3, #1
 800374c:	d10d      	bne.n	800376a <I2C_WaitOnFlagUntilTimeout+0x56>
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	43da      	mvns	r2, r3
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	4013      	ands	r3, r2
 800375a:	b29b      	uxth	r3, r3
 800375c:	2b00      	cmp	r3, #0
 800375e:	bf0c      	ite	eq
 8003760:	2301      	moveq	r3, #1
 8003762:	2300      	movne	r3, #0
 8003764:	b2db      	uxtb	r3, r3
 8003766:	461a      	mov	r2, r3
 8003768:	e00c      	b.n	8003784 <I2C_WaitOnFlagUntilTimeout+0x70>
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	43da      	mvns	r2, r3
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	4013      	ands	r3, r2
 8003776:	b29b      	uxth	r3, r3
 8003778:	2b00      	cmp	r3, #0
 800377a:	bf0c      	ite	eq
 800377c:	2301      	moveq	r3, #1
 800377e:	2300      	movne	r3, #0
 8003780:	b2db      	uxtb	r3, r3
 8003782:	461a      	mov	r2, r3
 8003784:	79fb      	ldrb	r3, [r7, #7]
 8003786:	429a      	cmp	r2, r3
 8003788:	d116      	bne.n	80037b8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2220      	movs	r2, #32
 8003794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a4:	f043 0220 	orr.w	r2, r3, #32
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e023      	b.n	8003800 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	0c1b      	lsrs	r3, r3, #16
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d10d      	bne.n	80037de <I2C_WaitOnFlagUntilTimeout+0xca>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	695b      	ldr	r3, [r3, #20]
 80037c8:	43da      	mvns	r2, r3
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	4013      	ands	r3, r2
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	bf0c      	ite	eq
 80037d4:	2301      	moveq	r3, #1
 80037d6:	2300      	movne	r3, #0
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	461a      	mov	r2, r3
 80037dc:	e00c      	b.n	80037f8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	43da      	mvns	r2, r3
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	4013      	ands	r3, r2
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	bf0c      	ite	eq
 80037f0:	2301      	moveq	r3, #1
 80037f2:	2300      	movne	r3, #0
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	461a      	mov	r2, r3
 80037f8:	79fb      	ldrb	r3, [r7, #7]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d093      	beq.n	8003726 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3710      	adds	r7, #16
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}

08003808 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]
 8003814:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003816:	e071      	b.n	80038fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003822:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003826:	d123      	bne.n	8003870 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003836:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003840:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2200      	movs	r2, #0
 8003846:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2220      	movs	r2, #32
 800384c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385c:	f043 0204 	orr.w	r2, r3, #4
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e067      	b.n	8003940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003876:	d041      	beq.n	80038fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003878:	f7ff f8ac 	bl	80029d4 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	429a      	cmp	r2, r3
 8003886:	d302      	bcc.n	800388e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d136      	bne.n	80038fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	0c1b      	lsrs	r3, r3, #16
 8003892:	b2db      	uxtb	r3, r3
 8003894:	2b01      	cmp	r3, #1
 8003896:	d10c      	bne.n	80038b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	695b      	ldr	r3, [r3, #20]
 800389e:	43da      	mvns	r2, r3
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	4013      	ands	r3, r2
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	bf14      	ite	ne
 80038aa:	2301      	movne	r3, #1
 80038ac:	2300      	moveq	r3, #0
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	e00b      	b.n	80038ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	699b      	ldr	r3, [r3, #24]
 80038b8:	43da      	mvns	r2, r3
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	4013      	ands	r3, r2
 80038be:	b29b      	uxth	r3, r3
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	bf14      	ite	ne
 80038c4:	2301      	movne	r3, #1
 80038c6:	2300      	moveq	r3, #0
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d016      	beq.n	80038fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2220      	movs	r2, #32
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e8:	f043 0220 	orr.w	r2, r3, #32
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e021      	b.n	8003940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	0c1b      	lsrs	r3, r3, #16
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b01      	cmp	r3, #1
 8003904:	d10c      	bne.n	8003920 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	695b      	ldr	r3, [r3, #20]
 800390c:	43da      	mvns	r2, r3
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	4013      	ands	r3, r2
 8003912:	b29b      	uxth	r3, r3
 8003914:	2b00      	cmp	r3, #0
 8003916:	bf14      	ite	ne
 8003918:	2301      	movne	r3, #1
 800391a:	2300      	moveq	r3, #0
 800391c:	b2db      	uxtb	r3, r3
 800391e:	e00b      	b.n	8003938 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	699b      	ldr	r3, [r3, #24]
 8003926:	43da      	mvns	r2, r3
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	4013      	ands	r3, r2
 800392c:	b29b      	uxth	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	bf14      	ite	ne
 8003932:	2301      	movne	r3, #1
 8003934:	2300      	moveq	r3, #0
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2b00      	cmp	r3, #0
 800393a:	f47f af6d 	bne.w	8003818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	3710      	adds	r7, #16
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003954:	e034      	b.n	80039c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f000 f886 	bl	8003a68 <I2C_IsAcknowledgeFailed>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e034      	b.n	80039d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800396c:	d028      	beq.n	80039c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800396e:	f7ff f831 	bl	80029d4 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	68ba      	ldr	r2, [r7, #8]
 800397a:	429a      	cmp	r2, r3
 800397c:	d302      	bcc.n	8003984 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d11d      	bne.n	80039c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	695b      	ldr	r3, [r3, #20]
 800398a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800398e:	2b80      	cmp	r3, #128	; 0x80
 8003990:	d016      	beq.n	80039c0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2220      	movs	r2, #32
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ac:	f043 0220 	orr.w	r2, r3, #32
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	e007      	b.n	80039d0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	695b      	ldr	r3, [r3, #20]
 80039c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ca:	2b80      	cmp	r3, #128	; 0x80
 80039cc:	d1c3      	bne.n	8003956 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80039ce:	2300      	movs	r3, #0
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3710      	adds	r7, #16
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039e4:	e034      	b.n	8003a50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039e6:	68f8      	ldr	r0, [r7, #12]
 80039e8:	f000 f83e 	bl	8003a68 <I2C_IsAcknowledgeFailed>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e034      	b.n	8003a60 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039fc:	d028      	beq.n	8003a50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039fe:	f7fe ffe9 	bl	80029d4 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	68ba      	ldr	r2, [r7, #8]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d302      	bcc.n	8003a14 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d11d      	bne.n	8003a50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	f003 0304 	and.w	r3, r3, #4
 8003a1e:	2b04      	cmp	r3, #4
 8003a20:	d016      	beq.n	8003a50 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3c:	f043 0220 	orr.w	r2, r3, #32
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e007      	b.n	8003a60 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	f003 0304 	and.w	r3, r3, #4
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	d1c3      	bne.n	80039e6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3710      	adds	r7, #16
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a7e:	d11b      	bne.n	8003ab8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a88:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2220      	movs	r2, #32
 8003a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa4:	f043 0204 	orr.w	r2, r3, #4
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e000      	b.n	8003aba <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bc80      	pop	{r7}
 8003ac2:	4770      	bx	lr

08003ac4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b086      	sub	sp, #24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d101      	bne.n	8003ad6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ad2:	2301      	movs	r3, #1
 8003ad4:	e26c      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0301 	and.w	r3, r3, #1
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	f000 8087 	beq.w	8003bf2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ae4:	4b92      	ldr	r3, [pc, #584]	; (8003d30 <HAL_RCC_OscConfig+0x26c>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f003 030c 	and.w	r3, r3, #12
 8003aec:	2b04      	cmp	r3, #4
 8003aee:	d00c      	beq.n	8003b0a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003af0:	4b8f      	ldr	r3, [pc, #572]	; (8003d30 <HAL_RCC_OscConfig+0x26c>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f003 030c 	and.w	r3, r3, #12
 8003af8:	2b08      	cmp	r3, #8
 8003afa:	d112      	bne.n	8003b22 <HAL_RCC_OscConfig+0x5e>
 8003afc:	4b8c      	ldr	r3, [pc, #560]	; (8003d30 <HAL_RCC_OscConfig+0x26c>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b08:	d10b      	bne.n	8003b22 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b0a:	4b89      	ldr	r3, [pc, #548]	; (8003d30 <HAL_RCC_OscConfig+0x26c>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d06c      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x12c>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d168      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e246      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b2a:	d106      	bne.n	8003b3a <HAL_RCC_OscConfig+0x76>
 8003b2c:	4b80      	ldr	r3, [pc, #512]	; (8003d30 <HAL_RCC_OscConfig+0x26c>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a7f      	ldr	r2, [pc, #508]	; (8003d30 <HAL_RCC_OscConfig+0x26c>)
 8003b32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b36:	6013      	str	r3, [r2, #0]
 8003b38:	e02e      	b.n	8003b98 <HAL_RCC_OscConfig+0xd4>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10c      	bne.n	8003b5c <HAL_RCC_OscConfig+0x98>
 8003b42:	4b7b      	ldr	r3, [pc, #492]	; (8003d30 <HAL_RCC_OscConfig+0x26c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a7a      	ldr	r2, [pc, #488]	; (8003d30 <HAL_RCC_OscConfig+0x26c>)
 8003b48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b4c:	6013      	str	r3, [r2, #0]
 8003b4e:	4b78      	ldr	r3, [pc, #480]	; (8003d30 <HAL_RCC_OscConfig+0x26c>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a77      	ldr	r2, [pc, #476]	; (8003d30 <HAL_RCC_OscConfig+0x26c>)
 8003b54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b58:	6013      	str	r3, [r2, #0]
 8003b5a:	e01d      	b.n	8003b98 <HAL_RCC_OscConfig+0xd4>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b64:	d10c      	bne.n	8003b80 <HAL_RCC_OscConfig+0xbc>
 8003b66:	4b72      	ldr	r3, [pc, #456]	; (8003d30 <HAL_RCC_OscConfig+0x26c>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a71      	ldr	r2, [pc, #452]	; (8003d30 <HAL_RCC_OscConfig+0x26c>)
 8003b6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b70:	6013      	str	r3, [r2, #0]
 8003b72:	4b6f      	ldr	r3, [pc, #444]	; (8003d30 <HAL_RCC_OscConfig+0x26c>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a6e      	ldr	r2, [pc, #440]	; (8003d30 <HAL_RCC_OscConfig+0x26c>)
 8003b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b7c:	6013      	str	r3, [r2, #0]
 8003b7e:	e00b      	b.n	8003b98 <HAL_RCC_OscConfig+0xd4>
 8003b80:	4b6b      	ldr	r3, [pc, #428]	; (8003d30 <HAL_RCC_OscConfig+0x26c>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a6a      	ldr	r2, [pc, #424]	; (8003d30 <HAL_RCC_OscConfig+0x26c>)
 8003b86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b8a:	6013      	str	r3, [r2, #0]
 8003b8c:	4b68      	ldr	r3, [pc, #416]	; (8003d30 <HAL_RCC_OscConfig+0x26c>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a67      	ldr	r2, [pc, #412]	; (8003d30 <HAL_RCC_OscConfig+0x26c>)
 8003b92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b96:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d013      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba0:	f7fe ff18 	bl	80029d4 <HAL_GetTick>
 8003ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ba6:	e008      	b.n	8003bba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ba8:	f7fe ff14 	bl	80029d4 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	693b      	ldr	r3, [r7, #16]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b64      	cmp	r3, #100	; 0x64
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e1fa      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bba:	4b5d      	ldr	r3, [pc, #372]	; (8003d30 <HAL_RCC_OscConfig+0x26c>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d0f0      	beq.n	8003ba8 <HAL_RCC_OscConfig+0xe4>
 8003bc6:	e014      	b.n	8003bf2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bc8:	f7fe ff04 	bl	80029d4 <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003bd0:	f7fe ff00 	bl	80029d4 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b64      	cmp	r3, #100	; 0x64
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e1e6      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003be2:	4b53      	ldr	r3, [pc, #332]	; (8003d30 <HAL_RCC_OscConfig+0x26c>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1f0      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x10c>
 8003bee:	e000      	b.n	8003bf2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d063      	beq.n	8003cc6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003bfe:	4b4c      	ldr	r3, [pc, #304]	; (8003d30 <HAL_RCC_OscConfig+0x26c>)
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f003 030c 	and.w	r3, r3, #12
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00b      	beq.n	8003c22 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003c0a:	4b49      	ldr	r3, [pc, #292]	; (8003d30 <HAL_RCC_OscConfig+0x26c>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f003 030c 	and.w	r3, r3, #12
 8003c12:	2b08      	cmp	r3, #8
 8003c14:	d11c      	bne.n	8003c50 <HAL_RCC_OscConfig+0x18c>
 8003c16:	4b46      	ldr	r3, [pc, #280]	; (8003d30 <HAL_RCC_OscConfig+0x26c>)
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d116      	bne.n	8003c50 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c22:	4b43      	ldr	r3, [pc, #268]	; (8003d30 <HAL_RCC_OscConfig+0x26c>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0302 	and.w	r3, r3, #2
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d005      	beq.n	8003c3a <HAL_RCC_OscConfig+0x176>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d001      	beq.n	8003c3a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003c36:	2301      	movs	r3, #1
 8003c38:	e1ba      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c3a:	4b3d      	ldr	r3, [pc, #244]	; (8003d30 <HAL_RCC_OscConfig+0x26c>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	695b      	ldr	r3, [r3, #20]
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	4939      	ldr	r1, [pc, #228]	; (8003d30 <HAL_RCC_OscConfig+0x26c>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c4e:	e03a      	b.n	8003cc6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d020      	beq.n	8003c9a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c58:	4b36      	ldr	r3, [pc, #216]	; (8003d34 <HAL_RCC_OscConfig+0x270>)
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c5e:	f7fe feb9 	bl	80029d4 <HAL_GetTick>
 8003c62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c64:	e008      	b.n	8003c78 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c66:	f7fe feb5 	bl	80029d4 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d901      	bls.n	8003c78 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e19b      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c78:	4b2d      	ldr	r3, [pc, #180]	; (8003d30 <HAL_RCC_OscConfig+0x26c>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d0f0      	beq.n	8003c66 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c84:	4b2a      	ldr	r3, [pc, #168]	; (8003d30 <HAL_RCC_OscConfig+0x26c>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	00db      	lsls	r3, r3, #3
 8003c92:	4927      	ldr	r1, [pc, #156]	; (8003d30 <HAL_RCC_OscConfig+0x26c>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	600b      	str	r3, [r1, #0]
 8003c98:	e015      	b.n	8003cc6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c9a:	4b26      	ldr	r3, [pc, #152]	; (8003d34 <HAL_RCC_OscConfig+0x270>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca0:	f7fe fe98 	bl	80029d4 <HAL_GetTick>
 8003ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ca8:	f7fe fe94 	bl	80029d4 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d901      	bls.n	8003cba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	e17a      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cba:	4b1d      	ldr	r3, [pc, #116]	; (8003d30 <HAL_RCC_OscConfig+0x26c>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1f0      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0308 	and.w	r3, r3, #8
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d03a      	beq.n	8003d48 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d019      	beq.n	8003d0e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cda:	4b17      	ldr	r3, [pc, #92]	; (8003d38 <HAL_RCC_OscConfig+0x274>)
 8003cdc:	2201      	movs	r2, #1
 8003cde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ce0:	f7fe fe78 	bl	80029d4 <HAL_GetTick>
 8003ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ce6:	e008      	b.n	8003cfa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ce8:	f7fe fe74 	bl	80029d4 <HAL_GetTick>
 8003cec:	4602      	mov	r2, r0
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d901      	bls.n	8003cfa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e15a      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cfa:	4b0d      	ldr	r3, [pc, #52]	; (8003d30 <HAL_RCC_OscConfig+0x26c>)
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfe:	f003 0302 	and.w	r3, r3, #2
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d0f0      	beq.n	8003ce8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003d06:	2001      	movs	r0, #1
 8003d08:	f000 facc 	bl	80042a4 <RCC_Delay>
 8003d0c:	e01c      	b.n	8003d48 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d0e:	4b0a      	ldr	r3, [pc, #40]	; (8003d38 <HAL_RCC_OscConfig+0x274>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d14:	f7fe fe5e 	bl	80029d4 <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d1a:	e00f      	b.n	8003d3c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d1c:	f7fe fe5a 	bl	80029d4 <HAL_GetTick>
 8003d20:	4602      	mov	r2, r0
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	1ad3      	subs	r3, r2, r3
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d908      	bls.n	8003d3c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e140      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4ec>
 8003d2e:	bf00      	nop
 8003d30:	40021000 	.word	0x40021000
 8003d34:	42420000 	.word	0x42420000
 8003d38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d3c:	4b9e      	ldr	r3, [pc, #632]	; (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d1e9      	bne.n	8003d1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0304 	and.w	r3, r3, #4
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f000 80a6 	beq.w	8003ea2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d56:	2300      	movs	r3, #0
 8003d58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d5a:	4b97      	ldr	r3, [pc, #604]	; (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003d5c:	69db      	ldr	r3, [r3, #28]
 8003d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d10d      	bne.n	8003d82 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d66:	4b94      	ldr	r3, [pc, #592]	; (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003d68:	69db      	ldr	r3, [r3, #28]
 8003d6a:	4a93      	ldr	r2, [pc, #588]	; (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d70:	61d3      	str	r3, [r2, #28]
 8003d72:	4b91      	ldr	r3, [pc, #580]	; (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003d74:	69db      	ldr	r3, [r3, #28]
 8003d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d7a:	60bb      	str	r3, [r7, #8]
 8003d7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d82:	4b8e      	ldr	r3, [pc, #568]	; (8003fbc <HAL_RCC_OscConfig+0x4f8>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d118      	bne.n	8003dc0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d8e:	4b8b      	ldr	r3, [pc, #556]	; (8003fbc <HAL_RCC_OscConfig+0x4f8>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a8a      	ldr	r2, [pc, #552]	; (8003fbc <HAL_RCC_OscConfig+0x4f8>)
 8003d94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d9a:	f7fe fe1b 	bl	80029d4 <HAL_GetTick>
 8003d9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003da0:	e008      	b.n	8003db4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003da2:	f7fe fe17 	bl	80029d4 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	2b64      	cmp	r3, #100	; 0x64
 8003dae:	d901      	bls.n	8003db4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e0fd      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003db4:	4b81      	ldr	r3, [pc, #516]	; (8003fbc <HAL_RCC_OscConfig+0x4f8>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d0f0      	beq.n	8003da2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	68db      	ldr	r3, [r3, #12]
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	d106      	bne.n	8003dd6 <HAL_RCC_OscConfig+0x312>
 8003dc8:	4b7b      	ldr	r3, [pc, #492]	; (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	4a7a      	ldr	r2, [pc, #488]	; (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003dce:	f043 0301 	orr.w	r3, r3, #1
 8003dd2:	6213      	str	r3, [r2, #32]
 8003dd4:	e02d      	b.n	8003e32 <HAL_RCC_OscConfig+0x36e>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d10c      	bne.n	8003df8 <HAL_RCC_OscConfig+0x334>
 8003dde:	4b76      	ldr	r3, [pc, #472]	; (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	4a75      	ldr	r2, [pc, #468]	; (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003de4:	f023 0301 	bic.w	r3, r3, #1
 8003de8:	6213      	str	r3, [r2, #32]
 8003dea:	4b73      	ldr	r3, [pc, #460]	; (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	4a72      	ldr	r2, [pc, #456]	; (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003df0:	f023 0304 	bic.w	r3, r3, #4
 8003df4:	6213      	str	r3, [r2, #32]
 8003df6:	e01c      	b.n	8003e32 <HAL_RCC_OscConfig+0x36e>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	2b05      	cmp	r3, #5
 8003dfe:	d10c      	bne.n	8003e1a <HAL_RCC_OscConfig+0x356>
 8003e00:	4b6d      	ldr	r3, [pc, #436]	; (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003e02:	6a1b      	ldr	r3, [r3, #32]
 8003e04:	4a6c      	ldr	r2, [pc, #432]	; (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003e06:	f043 0304 	orr.w	r3, r3, #4
 8003e0a:	6213      	str	r3, [r2, #32]
 8003e0c:	4b6a      	ldr	r3, [pc, #424]	; (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	4a69      	ldr	r2, [pc, #420]	; (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003e12:	f043 0301 	orr.w	r3, r3, #1
 8003e16:	6213      	str	r3, [r2, #32]
 8003e18:	e00b      	b.n	8003e32 <HAL_RCC_OscConfig+0x36e>
 8003e1a:	4b67      	ldr	r3, [pc, #412]	; (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	4a66      	ldr	r2, [pc, #408]	; (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003e20:	f023 0301 	bic.w	r3, r3, #1
 8003e24:	6213      	str	r3, [r2, #32]
 8003e26:	4b64      	ldr	r3, [pc, #400]	; (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	4a63      	ldr	r2, [pc, #396]	; (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003e2c:	f023 0304 	bic.w	r3, r3, #4
 8003e30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d015      	beq.n	8003e66 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e3a:	f7fe fdcb 	bl	80029d4 <HAL_GetTick>
 8003e3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e40:	e00a      	b.n	8003e58 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e42:	f7fe fdc7 	bl	80029d4 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d901      	bls.n	8003e58 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e0ab      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e58:	4b57      	ldr	r3, [pc, #348]	; (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d0ee      	beq.n	8003e42 <HAL_RCC_OscConfig+0x37e>
 8003e64:	e014      	b.n	8003e90 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e66:	f7fe fdb5 	bl	80029d4 <HAL_GetTick>
 8003e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e6c:	e00a      	b.n	8003e84 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e6e:	f7fe fdb1 	bl	80029d4 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d901      	bls.n	8003e84 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003e80:	2303      	movs	r3, #3
 8003e82:	e095      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e84:	4b4c      	ldr	r3, [pc, #304]	; (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003e86:	6a1b      	ldr	r3, [r3, #32]
 8003e88:	f003 0302 	and.w	r3, r3, #2
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d1ee      	bne.n	8003e6e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003e90:	7dfb      	ldrb	r3, [r7, #23]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d105      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e96:	4b48      	ldr	r3, [pc, #288]	; (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	4a47      	ldr	r2, [pc, #284]	; (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003e9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ea0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	69db      	ldr	r3, [r3, #28]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	f000 8081 	beq.w	8003fae <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003eac:	4b42      	ldr	r3, [pc, #264]	; (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f003 030c 	and.w	r3, r3, #12
 8003eb4:	2b08      	cmp	r3, #8
 8003eb6:	d061      	beq.n	8003f7c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	69db      	ldr	r3, [r3, #28]
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d146      	bne.n	8003f4e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ec0:	4b3f      	ldr	r3, [pc, #252]	; (8003fc0 <HAL_RCC_OscConfig+0x4fc>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec6:	f7fe fd85 	bl	80029d4 <HAL_GetTick>
 8003eca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ecc:	e008      	b.n	8003ee0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ece:	f7fe fd81 	bl	80029d4 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d901      	bls.n	8003ee0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e067      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ee0:	4b35      	ldr	r3, [pc, #212]	; (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1f0      	bne.n	8003ece <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ef4:	d108      	bne.n	8003f08 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ef6:	4b30      	ldr	r3, [pc, #192]	; (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	492d      	ldr	r1, [pc, #180]	; (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f08:	4b2b      	ldr	r3, [pc, #172]	; (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a19      	ldr	r1, [r3, #32]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f18:	430b      	orrs	r3, r1
 8003f1a:	4927      	ldr	r1, [pc, #156]	; (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f20:	4b27      	ldr	r3, [pc, #156]	; (8003fc0 <HAL_RCC_OscConfig+0x4fc>)
 8003f22:	2201      	movs	r2, #1
 8003f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f26:	f7fe fd55 	bl	80029d4 <HAL_GetTick>
 8003f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f2c:	e008      	b.n	8003f40 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f2e:	f7fe fd51 	bl	80029d4 <HAL_GetTick>
 8003f32:	4602      	mov	r2, r0
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	2b02      	cmp	r3, #2
 8003f3a:	d901      	bls.n	8003f40 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e037      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f40:	4b1d      	ldr	r3, [pc, #116]	; (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d0f0      	beq.n	8003f2e <HAL_RCC_OscConfig+0x46a>
 8003f4c:	e02f      	b.n	8003fae <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f4e:	4b1c      	ldr	r3, [pc, #112]	; (8003fc0 <HAL_RCC_OscConfig+0x4fc>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f54:	f7fe fd3e 	bl	80029d4 <HAL_GetTick>
 8003f58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f5a:	e008      	b.n	8003f6e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f5c:	f7fe fd3a 	bl	80029d4 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e020      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f6e:	4b12      	ldr	r3, [pc, #72]	; (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1f0      	bne.n	8003f5c <HAL_RCC_OscConfig+0x498>
 8003f7a:	e018      	b.n	8003fae <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	69db      	ldr	r3, [r3, #28]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d101      	bne.n	8003f88 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e013      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003f88:	4b0b      	ldr	r3, [pc, #44]	; (8003fb8 <HAL_RCC_OscConfig+0x4f4>)
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a1b      	ldr	r3, [r3, #32]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d106      	bne.n	8003faa <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d001      	beq.n	8003fae <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e000      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003fae:	2300      	movs	r3, #0
}
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	3718      	adds	r7, #24
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	40021000 	.word	0x40021000
 8003fbc:	40007000 	.word	0x40007000
 8003fc0:	42420060 	.word	0x42420060

08003fc4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d101      	bne.n	8003fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e0d0      	b.n	800417a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fd8:	4b6a      	ldr	r3, [pc, #424]	; (8004184 <HAL_RCC_ClockConfig+0x1c0>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0307 	and.w	r3, r3, #7
 8003fe0:	683a      	ldr	r2, [r7, #0]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d910      	bls.n	8004008 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fe6:	4b67      	ldr	r3, [pc, #412]	; (8004184 <HAL_RCC_ClockConfig+0x1c0>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f023 0207 	bic.w	r2, r3, #7
 8003fee:	4965      	ldr	r1, [pc, #404]	; (8004184 <HAL_RCC_ClockConfig+0x1c0>)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ff6:	4b63      	ldr	r3, [pc, #396]	; (8004184 <HAL_RCC_ClockConfig+0x1c0>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0307 	and.w	r3, r3, #7
 8003ffe:	683a      	ldr	r2, [r7, #0]
 8004000:	429a      	cmp	r2, r3
 8004002:	d001      	beq.n	8004008 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e0b8      	b.n	800417a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	2b00      	cmp	r3, #0
 8004012:	d020      	beq.n	8004056 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0304 	and.w	r3, r3, #4
 800401c:	2b00      	cmp	r3, #0
 800401e:	d005      	beq.n	800402c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004020:	4b59      	ldr	r3, [pc, #356]	; (8004188 <HAL_RCC_ClockConfig+0x1c4>)
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	4a58      	ldr	r2, [pc, #352]	; (8004188 <HAL_RCC_ClockConfig+0x1c4>)
 8004026:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800402a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 0308 	and.w	r3, r3, #8
 8004034:	2b00      	cmp	r3, #0
 8004036:	d005      	beq.n	8004044 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004038:	4b53      	ldr	r3, [pc, #332]	; (8004188 <HAL_RCC_ClockConfig+0x1c4>)
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	4a52      	ldr	r2, [pc, #328]	; (8004188 <HAL_RCC_ClockConfig+0x1c4>)
 800403e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004042:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004044:	4b50      	ldr	r3, [pc, #320]	; (8004188 <HAL_RCC_ClockConfig+0x1c4>)
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	494d      	ldr	r1, [pc, #308]	; (8004188 <HAL_RCC_ClockConfig+0x1c4>)
 8004052:	4313      	orrs	r3, r2
 8004054:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0301 	and.w	r3, r3, #1
 800405e:	2b00      	cmp	r3, #0
 8004060:	d040      	beq.n	80040e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	2b01      	cmp	r3, #1
 8004068:	d107      	bne.n	800407a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800406a:	4b47      	ldr	r3, [pc, #284]	; (8004188 <HAL_RCC_ClockConfig+0x1c4>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004072:	2b00      	cmp	r3, #0
 8004074:	d115      	bne.n	80040a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e07f      	b.n	800417a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	2b02      	cmp	r3, #2
 8004080:	d107      	bne.n	8004092 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004082:	4b41      	ldr	r3, [pc, #260]	; (8004188 <HAL_RCC_ClockConfig+0x1c4>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d109      	bne.n	80040a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e073      	b.n	800417a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004092:	4b3d      	ldr	r3, [pc, #244]	; (8004188 <HAL_RCC_ClockConfig+0x1c4>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d101      	bne.n	80040a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800409e:	2301      	movs	r3, #1
 80040a0:	e06b      	b.n	800417a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040a2:	4b39      	ldr	r3, [pc, #228]	; (8004188 <HAL_RCC_ClockConfig+0x1c4>)
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f023 0203 	bic.w	r2, r3, #3
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	4936      	ldr	r1, [pc, #216]	; (8004188 <HAL_RCC_ClockConfig+0x1c4>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040b4:	f7fe fc8e 	bl	80029d4 <HAL_GetTick>
 80040b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ba:	e00a      	b.n	80040d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040bc:	f7fe fc8a 	bl	80029d4 <HAL_GetTick>
 80040c0:	4602      	mov	r2, r0
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	1ad3      	subs	r3, r2, r3
 80040c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e053      	b.n	800417a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040d2:	4b2d      	ldr	r3, [pc, #180]	; (8004188 <HAL_RCC_ClockConfig+0x1c4>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f003 020c 	and.w	r2, r3, #12
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d1eb      	bne.n	80040bc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040e4:	4b27      	ldr	r3, [pc, #156]	; (8004184 <HAL_RCC_ClockConfig+0x1c0>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0307 	and.w	r3, r3, #7
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d210      	bcs.n	8004114 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040f2:	4b24      	ldr	r3, [pc, #144]	; (8004184 <HAL_RCC_ClockConfig+0x1c0>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f023 0207 	bic.w	r2, r3, #7
 80040fa:	4922      	ldr	r1, [pc, #136]	; (8004184 <HAL_RCC_ClockConfig+0x1c0>)
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	4313      	orrs	r3, r2
 8004100:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004102:	4b20      	ldr	r3, [pc, #128]	; (8004184 <HAL_RCC_ClockConfig+0x1c0>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0307 	and.w	r3, r3, #7
 800410a:	683a      	ldr	r2, [r7, #0]
 800410c:	429a      	cmp	r2, r3
 800410e:	d001      	beq.n	8004114 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e032      	b.n	800417a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0304 	and.w	r3, r3, #4
 800411c:	2b00      	cmp	r3, #0
 800411e:	d008      	beq.n	8004132 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004120:	4b19      	ldr	r3, [pc, #100]	; (8004188 <HAL_RCC_ClockConfig+0x1c4>)
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	4916      	ldr	r1, [pc, #88]	; (8004188 <HAL_RCC_ClockConfig+0x1c4>)
 800412e:	4313      	orrs	r3, r2
 8004130:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0308 	and.w	r3, r3, #8
 800413a:	2b00      	cmp	r3, #0
 800413c:	d009      	beq.n	8004152 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800413e:	4b12      	ldr	r3, [pc, #72]	; (8004188 <HAL_RCC_ClockConfig+0x1c4>)
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	691b      	ldr	r3, [r3, #16]
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	490e      	ldr	r1, [pc, #56]	; (8004188 <HAL_RCC_ClockConfig+0x1c4>)
 800414e:	4313      	orrs	r3, r2
 8004150:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004152:	f000 f821 	bl	8004198 <HAL_RCC_GetSysClockFreq>
 8004156:	4602      	mov	r2, r0
 8004158:	4b0b      	ldr	r3, [pc, #44]	; (8004188 <HAL_RCC_ClockConfig+0x1c4>)
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	091b      	lsrs	r3, r3, #4
 800415e:	f003 030f 	and.w	r3, r3, #15
 8004162:	490a      	ldr	r1, [pc, #40]	; (800418c <HAL_RCC_ClockConfig+0x1c8>)
 8004164:	5ccb      	ldrb	r3, [r1, r3]
 8004166:	fa22 f303 	lsr.w	r3, r2, r3
 800416a:	4a09      	ldr	r2, [pc, #36]	; (8004190 <HAL_RCC_ClockConfig+0x1cc>)
 800416c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800416e:	4b09      	ldr	r3, [pc, #36]	; (8004194 <HAL_RCC_ClockConfig+0x1d0>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4618      	mov	r0, r3
 8004174:	f7fe fbec 	bl	8002950 <HAL_InitTick>

  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	40022000 	.word	0x40022000
 8004188:	40021000 	.word	0x40021000
 800418c:	080069f4 	.word	0x080069f4
 8004190:	20000070 	.word	0x20000070
 8004194:	20000074 	.word	0x20000074

08004198 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004198:	b480      	push	{r7}
 800419a:	b087      	sub	sp, #28
 800419c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800419e:	2300      	movs	r3, #0
 80041a0:	60fb      	str	r3, [r7, #12]
 80041a2:	2300      	movs	r3, #0
 80041a4:	60bb      	str	r3, [r7, #8]
 80041a6:	2300      	movs	r3, #0
 80041a8:	617b      	str	r3, [r7, #20]
 80041aa:	2300      	movs	r3, #0
 80041ac:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80041ae:	2300      	movs	r3, #0
 80041b0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80041b2:	4b1e      	ldr	r3, [pc, #120]	; (800422c <HAL_RCC_GetSysClockFreq+0x94>)
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f003 030c 	and.w	r3, r3, #12
 80041be:	2b04      	cmp	r3, #4
 80041c0:	d002      	beq.n	80041c8 <HAL_RCC_GetSysClockFreq+0x30>
 80041c2:	2b08      	cmp	r3, #8
 80041c4:	d003      	beq.n	80041ce <HAL_RCC_GetSysClockFreq+0x36>
 80041c6:	e027      	b.n	8004218 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80041c8:	4b19      	ldr	r3, [pc, #100]	; (8004230 <HAL_RCC_GetSysClockFreq+0x98>)
 80041ca:	613b      	str	r3, [r7, #16]
      break;
 80041cc:	e027      	b.n	800421e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	0c9b      	lsrs	r3, r3, #18
 80041d2:	f003 030f 	and.w	r3, r3, #15
 80041d6:	4a17      	ldr	r2, [pc, #92]	; (8004234 <HAL_RCC_GetSysClockFreq+0x9c>)
 80041d8:	5cd3      	ldrb	r3, [r2, r3]
 80041da:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d010      	beq.n	8004208 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80041e6:	4b11      	ldr	r3, [pc, #68]	; (800422c <HAL_RCC_GetSysClockFreq+0x94>)
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	0c5b      	lsrs	r3, r3, #17
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	4a11      	ldr	r2, [pc, #68]	; (8004238 <HAL_RCC_GetSysClockFreq+0xa0>)
 80041f2:	5cd3      	ldrb	r3, [r2, r3]
 80041f4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a0d      	ldr	r2, [pc, #52]	; (8004230 <HAL_RCC_GetSysClockFreq+0x98>)
 80041fa:	fb02 f203 	mul.w	r2, r2, r3
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	fbb2 f3f3 	udiv	r3, r2, r3
 8004204:	617b      	str	r3, [r7, #20]
 8004206:	e004      	b.n	8004212 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	4a0c      	ldr	r2, [pc, #48]	; (800423c <HAL_RCC_GetSysClockFreq+0xa4>)
 800420c:	fb02 f303 	mul.w	r3, r2, r3
 8004210:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	613b      	str	r3, [r7, #16]
      break;
 8004216:	e002      	b.n	800421e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004218:	4b05      	ldr	r3, [pc, #20]	; (8004230 <HAL_RCC_GetSysClockFreq+0x98>)
 800421a:	613b      	str	r3, [r7, #16]
      break;
 800421c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800421e:	693b      	ldr	r3, [r7, #16]
}
 8004220:	4618      	mov	r0, r3
 8004222:	371c      	adds	r7, #28
 8004224:	46bd      	mov	sp, r7
 8004226:	bc80      	pop	{r7}
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	40021000 	.word	0x40021000
 8004230:	007a1200 	.word	0x007a1200
 8004234:	08006a0c 	.word	0x08006a0c
 8004238:	08006a1c 	.word	0x08006a1c
 800423c:	003d0900 	.word	0x003d0900

08004240 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004240:	b480      	push	{r7}
 8004242:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004244:	4b02      	ldr	r3, [pc, #8]	; (8004250 <HAL_RCC_GetHCLKFreq+0x10>)
 8004246:	681b      	ldr	r3, [r3, #0]
}
 8004248:	4618      	mov	r0, r3
 800424a:	46bd      	mov	sp, r7
 800424c:	bc80      	pop	{r7}
 800424e:	4770      	bx	lr
 8004250:	20000070 	.word	0x20000070

08004254 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004258:	f7ff fff2 	bl	8004240 <HAL_RCC_GetHCLKFreq>
 800425c:	4602      	mov	r2, r0
 800425e:	4b05      	ldr	r3, [pc, #20]	; (8004274 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	0a1b      	lsrs	r3, r3, #8
 8004264:	f003 0307 	and.w	r3, r3, #7
 8004268:	4903      	ldr	r1, [pc, #12]	; (8004278 <HAL_RCC_GetPCLK1Freq+0x24>)
 800426a:	5ccb      	ldrb	r3, [r1, r3]
 800426c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004270:	4618      	mov	r0, r3
 8004272:	bd80      	pop	{r7, pc}
 8004274:	40021000 	.word	0x40021000
 8004278:	08006a04 	.word	0x08006a04

0800427c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004280:	f7ff ffde 	bl	8004240 <HAL_RCC_GetHCLKFreq>
 8004284:	4602      	mov	r2, r0
 8004286:	4b05      	ldr	r3, [pc, #20]	; (800429c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	0adb      	lsrs	r3, r3, #11
 800428c:	f003 0307 	and.w	r3, r3, #7
 8004290:	4903      	ldr	r1, [pc, #12]	; (80042a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004292:	5ccb      	ldrb	r3, [r1, r3]
 8004294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004298:	4618      	mov	r0, r3
 800429a:	bd80      	pop	{r7, pc}
 800429c:	40021000 	.word	0x40021000
 80042a0:	08006a04 	.word	0x08006a04

080042a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80042ac:	4b0a      	ldr	r3, [pc, #40]	; (80042d8 <RCC_Delay+0x34>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a0a      	ldr	r2, [pc, #40]	; (80042dc <RCC_Delay+0x38>)
 80042b2:	fba2 2303 	umull	r2, r3, r2, r3
 80042b6:	0a5b      	lsrs	r3, r3, #9
 80042b8:	687a      	ldr	r2, [r7, #4]
 80042ba:	fb02 f303 	mul.w	r3, r2, r3
 80042be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80042c0:	bf00      	nop
  }
  while (Delay --);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	1e5a      	subs	r2, r3, #1
 80042c6:	60fa      	str	r2, [r7, #12]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d1f9      	bne.n	80042c0 <RCC_Delay+0x1c>
}
 80042cc:	bf00      	nop
 80042ce:	bf00      	nop
 80042d0:	3714      	adds	r7, #20
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bc80      	pop	{r7}
 80042d6:	4770      	bx	lr
 80042d8:	20000070 	.word	0x20000070
 80042dc:	10624dd3 	.word	0x10624dd3

080042e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d101      	bne.n	80042f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e041      	b.n	8004376 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d106      	bne.n	800430c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7fe f9ac 	bl	8002664 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2202      	movs	r2, #2
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3304      	adds	r3, #4
 800431c:	4619      	mov	r1, r3
 800431e:	4610      	mov	r0, r2
 8004320:	f000 fa5c 	bl	80047dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
	...

08004380 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004380:	b480      	push	{r7}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800438e:	b2db      	uxtb	r3, r3
 8004390:	2b01      	cmp	r3, #1
 8004392:	d001      	beq.n	8004398 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e03a      	b.n	800440e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2202      	movs	r2, #2
 800439c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68da      	ldr	r2, [r3, #12]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f042 0201 	orr.w	r2, r2, #1
 80043ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a18      	ldr	r2, [pc, #96]	; (8004418 <HAL_TIM_Base_Start_IT+0x98>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d00e      	beq.n	80043d8 <HAL_TIM_Base_Start_IT+0x58>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043c2:	d009      	beq.n	80043d8 <HAL_TIM_Base_Start_IT+0x58>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a14      	ldr	r2, [pc, #80]	; (800441c <HAL_TIM_Base_Start_IT+0x9c>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d004      	beq.n	80043d8 <HAL_TIM_Base_Start_IT+0x58>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a13      	ldr	r2, [pc, #76]	; (8004420 <HAL_TIM_Base_Start_IT+0xa0>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d111      	bne.n	80043fc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f003 0307 	and.w	r3, r3, #7
 80043e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2b06      	cmp	r3, #6
 80043e8:	d010      	beq.n	800440c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f042 0201 	orr.w	r2, r2, #1
 80043f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043fa:	e007      	b.n	800440c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f042 0201 	orr.w	r2, r2, #1
 800440a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3714      	adds	r7, #20
 8004412:	46bd      	mov	sp, r7
 8004414:	bc80      	pop	{r7}
 8004416:	4770      	bx	lr
 8004418:	40012c00 	.word	0x40012c00
 800441c:	40000400 	.word	0x40000400
 8004420:	40000800 	.word	0x40000800

08004424 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b00      	cmp	r3, #0
 8004444:	d020      	beq.n	8004488 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f003 0302 	and.w	r3, r3, #2
 800444c:	2b00      	cmp	r3, #0
 800444e:	d01b      	beq.n	8004488 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f06f 0202 	mvn.w	r2, #2
 8004458:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	f003 0303 	and.w	r3, r3, #3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d003      	beq.n	8004476 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f000 f998 	bl	80047a4 <HAL_TIM_IC_CaptureCallback>
 8004474:	e005      	b.n	8004482 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f000 f98b 	bl	8004792 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 f99a 	bl	80047b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	f003 0304 	and.w	r3, r3, #4
 800448e:	2b00      	cmp	r3, #0
 8004490:	d020      	beq.n	80044d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	f003 0304 	and.w	r3, r3, #4
 8004498:	2b00      	cmp	r3, #0
 800449a:	d01b      	beq.n	80044d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f06f 0204 	mvn.w	r2, #4
 80044a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2202      	movs	r2, #2
 80044aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d003      	beq.n	80044c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f972 	bl	80047a4 <HAL_TIM_IC_CaptureCallback>
 80044c0:	e005      	b.n	80044ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 f965 	bl	8004792 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 f974 	bl	80047b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	f003 0308 	and.w	r3, r3, #8
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d020      	beq.n	8004520 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f003 0308 	and.w	r3, r3, #8
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d01b      	beq.n	8004520 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f06f 0208 	mvn.w	r2, #8
 80044f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2204      	movs	r2, #4
 80044f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	69db      	ldr	r3, [r3, #28]
 80044fe:	f003 0303 	and.w	r3, r3, #3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d003      	beq.n	800450e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f000 f94c 	bl	80047a4 <HAL_TIM_IC_CaptureCallback>
 800450c:	e005      	b.n	800451a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 f93f 	bl	8004792 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004514:	6878      	ldr	r0, [r7, #4]
 8004516:	f000 f94e 	bl	80047b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	f003 0310 	and.w	r3, r3, #16
 8004526:	2b00      	cmp	r3, #0
 8004528:	d020      	beq.n	800456c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f003 0310 	and.w	r3, r3, #16
 8004530:	2b00      	cmp	r3, #0
 8004532:	d01b      	beq.n	800456c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f06f 0210 	mvn.w	r2, #16
 800453c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2208      	movs	r2, #8
 8004542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800454e:	2b00      	cmp	r3, #0
 8004550:	d003      	beq.n	800455a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 f926 	bl	80047a4 <HAL_TIM_IC_CaptureCallback>
 8004558:	e005      	b.n	8004566 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800455a:	6878      	ldr	r0, [r7, #4]
 800455c:	f000 f919 	bl	8004792 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 f928 	bl	80047b6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	f003 0301 	and.w	r3, r3, #1
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00c      	beq.n	8004590 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f003 0301 	and.w	r3, r3, #1
 800457c:	2b00      	cmp	r3, #0
 800457e:	d007      	beq.n	8004590 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f06f 0201 	mvn.w	r2, #1
 8004588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7fd fe2c 	bl	80021e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00c      	beq.n	80045b4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d007      	beq.n	80045b4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80045ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 fa7f 	bl	8004ab2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d00c      	beq.n	80045d8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d007      	beq.n	80045d8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f8f8 	bl	80047c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	f003 0320 	and.w	r3, r3, #32
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00c      	beq.n	80045fc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f003 0320 	and.w	r3, r3, #32
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d007      	beq.n	80045fc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f06f 0220 	mvn.w	r2, #32
 80045f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 fa52 	bl	8004aa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045fc:	bf00      	nop
 80045fe:	3710      	adds	r7, #16
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800460e:	2300      	movs	r3, #0
 8004610:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004618:	2b01      	cmp	r3, #1
 800461a:	d101      	bne.n	8004620 <HAL_TIM_ConfigClockSource+0x1c>
 800461c:	2302      	movs	r3, #2
 800461e:	e0b4      	b.n	800478a <HAL_TIM_ConfigClockSource+0x186>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2202      	movs	r2, #2
 800462c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800463e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004646:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68ba      	ldr	r2, [r7, #8]
 800464e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004658:	d03e      	beq.n	80046d8 <HAL_TIM_ConfigClockSource+0xd4>
 800465a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800465e:	f200 8087 	bhi.w	8004770 <HAL_TIM_ConfigClockSource+0x16c>
 8004662:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004666:	f000 8086 	beq.w	8004776 <HAL_TIM_ConfigClockSource+0x172>
 800466a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800466e:	d87f      	bhi.n	8004770 <HAL_TIM_ConfigClockSource+0x16c>
 8004670:	2b70      	cmp	r3, #112	; 0x70
 8004672:	d01a      	beq.n	80046aa <HAL_TIM_ConfigClockSource+0xa6>
 8004674:	2b70      	cmp	r3, #112	; 0x70
 8004676:	d87b      	bhi.n	8004770 <HAL_TIM_ConfigClockSource+0x16c>
 8004678:	2b60      	cmp	r3, #96	; 0x60
 800467a:	d050      	beq.n	800471e <HAL_TIM_ConfigClockSource+0x11a>
 800467c:	2b60      	cmp	r3, #96	; 0x60
 800467e:	d877      	bhi.n	8004770 <HAL_TIM_ConfigClockSource+0x16c>
 8004680:	2b50      	cmp	r3, #80	; 0x50
 8004682:	d03c      	beq.n	80046fe <HAL_TIM_ConfigClockSource+0xfa>
 8004684:	2b50      	cmp	r3, #80	; 0x50
 8004686:	d873      	bhi.n	8004770 <HAL_TIM_ConfigClockSource+0x16c>
 8004688:	2b40      	cmp	r3, #64	; 0x40
 800468a:	d058      	beq.n	800473e <HAL_TIM_ConfigClockSource+0x13a>
 800468c:	2b40      	cmp	r3, #64	; 0x40
 800468e:	d86f      	bhi.n	8004770 <HAL_TIM_ConfigClockSource+0x16c>
 8004690:	2b30      	cmp	r3, #48	; 0x30
 8004692:	d064      	beq.n	800475e <HAL_TIM_ConfigClockSource+0x15a>
 8004694:	2b30      	cmp	r3, #48	; 0x30
 8004696:	d86b      	bhi.n	8004770 <HAL_TIM_ConfigClockSource+0x16c>
 8004698:	2b20      	cmp	r3, #32
 800469a:	d060      	beq.n	800475e <HAL_TIM_ConfigClockSource+0x15a>
 800469c:	2b20      	cmp	r3, #32
 800469e:	d867      	bhi.n	8004770 <HAL_TIM_ConfigClockSource+0x16c>
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d05c      	beq.n	800475e <HAL_TIM_ConfigClockSource+0x15a>
 80046a4:	2b10      	cmp	r3, #16
 80046a6:	d05a      	beq.n	800475e <HAL_TIM_ConfigClockSource+0x15a>
 80046a8:	e062      	b.n	8004770 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6818      	ldr	r0, [r3, #0]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	6899      	ldr	r1, [r3, #8]
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	f000 f974 	bl	80049a6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68ba      	ldr	r2, [r7, #8]
 80046d4:	609a      	str	r2, [r3, #8]
      break;
 80046d6:	e04f      	b.n	8004778 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6818      	ldr	r0, [r3, #0]
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	6899      	ldr	r1, [r3, #8]
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685a      	ldr	r2, [r3, #4]
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	f000 f95d 	bl	80049a6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	689a      	ldr	r2, [r3, #8]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046fa:	609a      	str	r2, [r3, #8]
      break;
 80046fc:	e03c      	b.n	8004778 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6818      	ldr	r0, [r3, #0]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	6859      	ldr	r1, [r3, #4]
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	461a      	mov	r2, r3
 800470c:	f000 f8d4 	bl	80048b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2150      	movs	r1, #80	; 0x50
 8004716:	4618      	mov	r0, r3
 8004718:	f000 f92b 	bl	8004972 <TIM_ITRx_SetConfig>
      break;
 800471c:	e02c      	b.n	8004778 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6818      	ldr	r0, [r3, #0]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	6859      	ldr	r1, [r3, #4]
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	461a      	mov	r2, r3
 800472c:	f000 f8f2 	bl	8004914 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2160      	movs	r1, #96	; 0x60
 8004736:	4618      	mov	r0, r3
 8004738:	f000 f91b 	bl	8004972 <TIM_ITRx_SetConfig>
      break;
 800473c:	e01c      	b.n	8004778 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6818      	ldr	r0, [r3, #0]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	6859      	ldr	r1, [r3, #4]
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	461a      	mov	r2, r3
 800474c:	f000 f8b4 	bl	80048b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2140      	movs	r1, #64	; 0x40
 8004756:	4618      	mov	r0, r3
 8004758:	f000 f90b 	bl	8004972 <TIM_ITRx_SetConfig>
      break;
 800475c:	e00c      	b.n	8004778 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4619      	mov	r1, r3
 8004768:	4610      	mov	r0, r2
 800476a:	f000 f902 	bl	8004972 <TIM_ITRx_SetConfig>
      break;
 800476e:	e003      	b.n	8004778 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	73fb      	strb	r3, [r7, #15]
      break;
 8004774:	e000      	b.n	8004778 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004776:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004788:	7bfb      	ldrb	r3, [r7, #15]
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}

08004792 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004792:	b480      	push	{r7}
 8004794:	b083      	sub	sp, #12
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800479a:	bf00      	nop
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	bc80      	pop	{r7}
 80047a2:	4770      	bx	lr

080047a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047ac:	bf00      	nop
 80047ae:	370c      	adds	r7, #12
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bc80      	pop	{r7}
 80047b4:	4770      	bx	lr

080047b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047b6:	b480      	push	{r7}
 80047b8:	b083      	sub	sp, #12
 80047ba:	af00      	add	r7, sp, #0
 80047bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047be:	bf00      	nop
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bc80      	pop	{r7}
 80047c6:	4770      	bx	lr

080047c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bc80      	pop	{r7}
 80047d8:	4770      	bx	lr
	...

080047dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a2f      	ldr	r2, [pc, #188]	; (80048ac <TIM_Base_SetConfig+0xd0>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d00b      	beq.n	800480c <TIM_Base_SetConfig+0x30>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047fa:	d007      	beq.n	800480c <TIM_Base_SetConfig+0x30>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a2c      	ldr	r2, [pc, #176]	; (80048b0 <TIM_Base_SetConfig+0xd4>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d003      	beq.n	800480c <TIM_Base_SetConfig+0x30>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a2b      	ldr	r2, [pc, #172]	; (80048b4 <TIM_Base_SetConfig+0xd8>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d108      	bne.n	800481e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004812:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	68fa      	ldr	r2, [r7, #12]
 800481a:	4313      	orrs	r3, r2
 800481c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a22      	ldr	r2, [pc, #136]	; (80048ac <TIM_Base_SetConfig+0xd0>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d00b      	beq.n	800483e <TIM_Base_SetConfig+0x62>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800482c:	d007      	beq.n	800483e <TIM_Base_SetConfig+0x62>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a1f      	ldr	r2, [pc, #124]	; (80048b0 <TIM_Base_SetConfig+0xd4>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d003      	beq.n	800483e <TIM_Base_SetConfig+0x62>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a1e      	ldr	r2, [pc, #120]	; (80048b4 <TIM_Base_SetConfig+0xd8>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d108      	bne.n	8004850 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004844:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	4313      	orrs	r3, r2
 800484e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	4313      	orrs	r3, r2
 800485c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	689a      	ldr	r2, [r3, #8]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a0d      	ldr	r2, [pc, #52]	; (80048ac <TIM_Base_SetConfig+0xd0>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d103      	bne.n	8004884 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	691a      	ldr	r2, [r3, #16]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b00      	cmp	r3, #0
 8004894:	d005      	beq.n	80048a2 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	f023 0201 	bic.w	r2, r3, #1
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	611a      	str	r2, [r3, #16]
  }
}
 80048a2:	bf00      	nop
 80048a4:	3714      	adds	r7, #20
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bc80      	pop	{r7}
 80048aa:	4770      	bx	lr
 80048ac:	40012c00 	.word	0x40012c00
 80048b0:	40000400 	.word	0x40000400
 80048b4:	40000800 	.word	0x40000800

080048b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b087      	sub	sp, #28
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6a1b      	ldr	r3, [r3, #32]
 80048c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	f023 0201 	bic.w	r2, r3, #1
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	011b      	lsls	r3, r3, #4
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	f023 030a 	bic.w	r3, r3, #10
 80048f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048f6:	697a      	ldr	r2, [r7, #20]
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	693a      	ldr	r2, [r7, #16]
 8004902:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	697a      	ldr	r2, [r7, #20]
 8004908:	621a      	str	r2, [r3, #32]
}
 800490a:	bf00      	nop
 800490c:	371c      	adds	r7, #28
 800490e:	46bd      	mov	sp, r7
 8004910:	bc80      	pop	{r7}
 8004912:	4770      	bx	lr

08004914 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004914:	b480      	push	{r7}
 8004916:	b087      	sub	sp, #28
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	f023 0210 	bic.w	r2, r3, #16
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800493e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	031b      	lsls	r3, r3, #12
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	4313      	orrs	r3, r2
 8004948:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800494a:	697b      	ldr	r3, [r7, #20]
 800494c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004950:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	011b      	lsls	r3, r3, #4
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	4313      	orrs	r3, r2
 800495a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	621a      	str	r2, [r3, #32]
}
 8004968:	bf00      	nop
 800496a:	371c      	adds	r7, #28
 800496c:	46bd      	mov	sp, r7
 800496e:	bc80      	pop	{r7}
 8004970:	4770      	bx	lr

08004972 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004972:	b480      	push	{r7}
 8004974:	b085      	sub	sp, #20
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
 800497a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	689b      	ldr	r3, [r3, #8]
 8004980:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004988:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800498a:	683a      	ldr	r2, [r7, #0]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	4313      	orrs	r3, r2
 8004990:	f043 0307 	orr.w	r3, r3, #7
 8004994:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	609a      	str	r2, [r3, #8]
}
 800499c:	bf00      	nop
 800499e:	3714      	adds	r7, #20
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bc80      	pop	{r7}
 80049a4:	4770      	bx	lr

080049a6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049a6:	b480      	push	{r7}
 80049a8:	b087      	sub	sp, #28
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	60f8      	str	r0, [r7, #12]
 80049ae:	60b9      	str	r1, [r7, #8]
 80049b0:	607a      	str	r2, [r7, #4]
 80049b2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049c0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	021a      	lsls	r2, r3, #8
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	431a      	orrs	r2, r3
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	697a      	ldr	r2, [r7, #20]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	697a      	ldr	r2, [r7, #20]
 80049d8:	609a      	str	r2, [r3, #8]
}
 80049da:	bf00      	nop
 80049dc:	371c      	adds	r7, #28
 80049de:	46bd      	mov	sp, r7
 80049e0:	bc80      	pop	{r7}
 80049e2:	4770      	bx	lr

080049e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d101      	bne.n	80049fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049f8:	2302      	movs	r3, #2
 80049fa:	e046      	b.n	8004a8a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2202      	movs	r2, #2
 8004a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	68fa      	ldr	r2, [r7, #12]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a16      	ldr	r2, [pc, #88]	; (8004a94 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d00e      	beq.n	8004a5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a48:	d009      	beq.n	8004a5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a12      	ldr	r2, [pc, #72]	; (8004a98 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d004      	beq.n	8004a5e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a10      	ldr	r2, [pc, #64]	; (8004a9c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d10c      	bne.n	8004a78 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	68ba      	ldr	r2, [r7, #8]
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68ba      	ldr	r2, [r7, #8]
 8004a76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3714      	adds	r7, #20
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bc80      	pop	{r7}
 8004a92:	4770      	bx	lr
 8004a94:	40012c00 	.word	0x40012c00
 8004a98:	40000400 	.word	0x40000400
 8004a9c:	40000800 	.word	0x40000800

08004aa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bc80      	pop	{r7}
 8004ab0:	4770      	bx	lr

08004ab2 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b083      	sub	sp, #12
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004aba:	bf00      	nop
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bc80      	pop	{r7}
 8004ac2:	4770      	bx	lr

08004ac4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b082      	sub	sp, #8
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d101      	bne.n	8004ad6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e042      	b.n	8004b5c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d106      	bne.n	8004af0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f7fd fdde 	bl	80026ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2224      	movs	r2, #36	; 0x24
 8004af4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68da      	ldr	r2, [r3, #12]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 fdf9 	bl	8005700 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	691a      	ldr	r2, [r3, #16]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	695a      	ldr	r2, [r3, #20]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	68da      	ldr	r2, [r3, #12]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2220      	movs	r2, #32
 8004b48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2220      	movs	r2, #32
 8004b50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3708      	adds	r7, #8
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b08a      	sub	sp, #40	; 0x28
 8004b68:	af02      	add	r7, sp, #8
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	603b      	str	r3, [r7, #0]
 8004b70:	4613      	mov	r3, r2
 8004b72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b74:	2300      	movs	r3, #0
 8004b76:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b20      	cmp	r3, #32
 8004b82:	d175      	bne.n	8004c70 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d002      	beq.n	8004b90 <HAL_UART_Transmit+0x2c>
 8004b8a:	88fb      	ldrh	r3, [r7, #6]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d101      	bne.n	8004b94 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e06e      	b.n	8004c72 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2200      	movs	r2, #0
 8004b98:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2221      	movs	r2, #33	; 0x21
 8004b9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ba2:	f7fd ff17 	bl	80029d4 <HAL_GetTick>
 8004ba6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	88fa      	ldrh	r2, [r7, #6]
 8004bac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	88fa      	ldrh	r2, [r7, #6]
 8004bb2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bbc:	d108      	bne.n	8004bd0 <HAL_UART_Transmit+0x6c>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d104      	bne.n	8004bd0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	61bb      	str	r3, [r7, #24]
 8004bce:	e003      	b.n	8004bd8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004bd8:	e02e      	b.n	8004c38 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	9300      	str	r3, [sp, #0]
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	2200      	movs	r2, #0
 8004be2:	2180      	movs	r1, #128	; 0x80
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 fb97 	bl	8005318 <UART_WaitOnFlagUntilTimeout>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d005      	beq.n	8004bfc <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e03a      	b.n	8004c72 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d10b      	bne.n	8004c1a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	881b      	ldrh	r3, [r3, #0]
 8004c06:	461a      	mov	r2, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c10:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	3302      	adds	r3, #2
 8004c16:	61bb      	str	r3, [r7, #24]
 8004c18:	e007      	b.n	8004c2a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	781a      	ldrb	r2, [r3, #0]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	3301      	adds	r3, #1
 8004c28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	3b01      	subs	r3, #1
 8004c32:	b29a      	uxth	r2, r3
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1cb      	bne.n	8004bda <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	2140      	movs	r1, #64	; 0x40
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f000 fb63 	bl	8005318 <UART_WaitOnFlagUntilTimeout>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d005      	beq.n	8004c64 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2220      	movs	r2, #32
 8004c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e006      	b.n	8004c72 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2220      	movs	r2, #32
 8004c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	e000      	b.n	8004c72 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004c70:	2302      	movs	r3, #2
  }
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3720      	adds	r7, #32
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b08a      	sub	sp, #40	; 0x28
 8004c7e:	af02      	add	r7, sp, #8
 8004c80:	60f8      	str	r0, [r7, #12]
 8004c82:	60b9      	str	r1, [r7, #8]
 8004c84:	603b      	str	r3, [r7, #0]
 8004c86:	4613      	mov	r3, r2
 8004c88:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	2b20      	cmp	r3, #32
 8004c98:	f040 8081 	bne.w	8004d9e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d002      	beq.n	8004ca8 <HAL_UART_Receive+0x2e>
 8004ca2:	88fb      	ldrh	r3, [r7, #6]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d101      	bne.n	8004cac <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e079      	b.n	8004da0 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	2222      	movs	r2, #34	; 0x22
 8004cb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004cc0:	f7fd fe88 	bl	80029d4 <HAL_GetTick>
 8004cc4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	88fa      	ldrh	r2, [r7, #6]
 8004cca:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	88fa      	ldrh	r2, [r7, #6]
 8004cd0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cda:	d108      	bne.n	8004cee <HAL_UART_Receive+0x74>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	691b      	ldr	r3, [r3, #16]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d104      	bne.n	8004cee <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	61bb      	str	r3, [r7, #24]
 8004cec:	e003      	b.n	8004cf6 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004cf6:	e047      	b.n	8004d88 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	9300      	str	r3, [sp, #0]
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	2120      	movs	r1, #32
 8004d02:	68f8      	ldr	r0, [r7, #12]
 8004d04:	f000 fb08 	bl	8005318 <UART_WaitOnFlagUntilTimeout>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d005      	beq.n	8004d1a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2220      	movs	r2, #32
 8004d12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e042      	b.n	8004da0 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d10c      	bne.n	8004d3a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	69bb      	ldr	r3, [r7, #24]
 8004d30:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	3302      	adds	r3, #2
 8004d36:	61bb      	str	r3, [r7, #24]
 8004d38:	e01f      	b.n	8004d7a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d42:	d007      	beq.n	8004d54 <HAL_UART_Receive+0xda>
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d10a      	bne.n	8004d62 <HAL_UART_Receive+0xe8>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d106      	bne.n	8004d62 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	b2da      	uxtb	r2, r3
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	701a      	strb	r2, [r3, #0]
 8004d60:	e008      	b.n	8004d74 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d6e:	b2da      	uxtb	r2, r3
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004d74:	69fb      	ldr	r3, [r7, #28]
 8004d76:	3301      	adds	r3, #1
 8004d78:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	3b01      	subs	r3, #1
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1b2      	bne.n	8004cf8 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2220      	movs	r2, #32
 8004d96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	e000      	b.n	8004da0 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004d9e:	2302      	movs	r3, #2
  }
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3720      	adds	r7, #32
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b0ba      	sub	sp, #232	; 0xe8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	695b      	ldr	r3, [r3, #20]
 8004dca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004dda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dde:	f003 030f 	and.w	r3, r3, #15
 8004de2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004de6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d10f      	bne.n	8004e0e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004dee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004df2:	f003 0320 	and.w	r3, r3, #32
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d009      	beq.n	8004e0e <HAL_UART_IRQHandler+0x66>
 8004dfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dfe:	f003 0320 	and.w	r3, r3, #32
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d003      	beq.n	8004e0e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 fbbc 	bl	8005584 <UART_Receive_IT>
      return;
 8004e0c:	e25b      	b.n	80052c6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004e0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	f000 80de 	beq.w	8004fd4 <HAL_UART_IRQHandler+0x22c>
 8004e18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e1c:	f003 0301 	and.w	r3, r3, #1
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d106      	bne.n	8004e32 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004e24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e28:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	f000 80d1 	beq.w	8004fd4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e36:	f003 0301 	and.w	r3, r3, #1
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00b      	beq.n	8004e56 <HAL_UART_IRQHandler+0xae>
 8004e3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d005      	beq.n	8004e56 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e4e:	f043 0201 	orr.w	r2, r3, #1
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e5a:	f003 0304 	and.w	r3, r3, #4
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00b      	beq.n	8004e7a <HAL_UART_IRQHandler+0xd2>
 8004e62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e66:	f003 0301 	and.w	r3, r3, #1
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d005      	beq.n	8004e7a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e72:	f043 0202 	orr.w	r2, r3, #2
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00b      	beq.n	8004e9e <HAL_UART_IRQHandler+0xf6>
 8004e86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d005      	beq.n	8004e9e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e96:	f043 0204 	orr.w	r2, r3, #4
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ea2:	f003 0308 	and.w	r3, r3, #8
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d011      	beq.n	8004ece <HAL_UART_IRQHandler+0x126>
 8004eaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eae:	f003 0320 	and.w	r3, r3, #32
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d105      	bne.n	8004ec2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004eb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d005      	beq.n	8004ece <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec6:	f043 0208 	orr.w	r2, r3, #8
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	f000 81f2 	beq.w	80052bc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004edc:	f003 0320 	and.w	r3, r3, #32
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d008      	beq.n	8004ef6 <HAL_UART_IRQHandler+0x14e>
 8004ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ee8:	f003 0320 	and.w	r3, r3, #32
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d002      	beq.n	8004ef6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 fb47 	bl	8005584 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	695b      	ldr	r3, [r3, #20]
 8004efc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	bf14      	ite	ne
 8004f04:	2301      	movne	r3, #1
 8004f06:	2300      	moveq	r3, #0
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f12:	f003 0308 	and.w	r3, r3, #8
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d103      	bne.n	8004f22 <HAL_UART_IRQHandler+0x17a>
 8004f1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d04f      	beq.n	8004fc2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f000 fa51 	bl	80053ca <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	695b      	ldr	r3, [r3, #20]
 8004f2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d041      	beq.n	8004fba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	3314      	adds	r3, #20
 8004f3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f40:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f44:	e853 3f00 	ldrex	r3, [r3]
 8004f48:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004f4c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004f50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f54:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	3314      	adds	r3, #20
 8004f5e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004f62:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004f66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004f6e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004f72:	e841 2300 	strex	r3, r2, [r1]
 8004f76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004f7a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1d9      	bne.n	8004f36 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d013      	beq.n	8004fb2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f8e:	4a7e      	ldr	r2, [pc, #504]	; (8005188 <HAL_UART_IRQHandler+0x3e0>)
 8004f90:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7fd fe92 	bl	8002cc0 <HAL_DMA_Abort_IT>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d016      	beq.n	8004fd0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fa8:	687a      	ldr	r2, [r7, #4]
 8004faa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004fac:	4610      	mov	r0, r2
 8004fae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fb0:	e00e      	b.n	8004fd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 f99c 	bl	80052f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fb8:	e00a      	b.n	8004fd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f998 	bl	80052f0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fc0:	e006      	b.n	8004fd0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f994 	bl	80052f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004fce:	e175      	b.n	80052bc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fd0:	bf00      	nop
    return;
 8004fd2:	e173      	b.n	80052bc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd8:	2b01      	cmp	r3, #1
 8004fda:	f040 814f 	bne.w	800527c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004fde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fe2:	f003 0310 	and.w	r3, r3, #16
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	f000 8148 	beq.w	800527c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ff0:	f003 0310 	and.w	r3, r3, #16
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	f000 8141 	beq.w	800527c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	60bb      	str	r3, [r7, #8]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	60bb      	str	r3, [r7, #8]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	60bb      	str	r3, [r7, #8]
 800500e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	695b      	ldr	r3, [r3, #20]
 8005016:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800501a:	2b00      	cmp	r3, #0
 800501c:	f000 80b6 	beq.w	800518c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800502c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005030:	2b00      	cmp	r3, #0
 8005032:	f000 8145 	beq.w	80052c0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800503a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800503e:	429a      	cmp	r2, r3
 8005040:	f080 813e 	bcs.w	80052c0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800504a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	2b20      	cmp	r3, #32
 8005054:	f000 8088 	beq.w	8005168 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	330c      	adds	r3, #12
 800505e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005062:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005066:	e853 3f00 	ldrex	r3, [r3]
 800506a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800506e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005072:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005076:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	330c      	adds	r3, #12
 8005080:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005084:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005088:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005090:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005094:	e841 2300 	strex	r3, r2, [r1]
 8005098:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800509c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1d9      	bne.n	8005058 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	3314      	adds	r3, #20
 80050aa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050ae:	e853 3f00 	ldrex	r3, [r3]
 80050b2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80050b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050b6:	f023 0301 	bic.w	r3, r3, #1
 80050ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	3314      	adds	r3, #20
 80050c4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80050c8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80050cc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ce:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80050d0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80050d4:	e841 2300 	strex	r3, r2, [r1]
 80050d8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80050da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d1e1      	bne.n	80050a4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	3314      	adds	r3, #20
 80050e6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050ea:	e853 3f00 	ldrex	r3, [r3]
 80050ee:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80050f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	3314      	adds	r3, #20
 8005100:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005104:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005106:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005108:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800510a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800510c:	e841 2300 	strex	r3, r2, [r1]
 8005110:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005112:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005114:	2b00      	cmp	r3, #0
 8005116:	d1e3      	bne.n	80050e0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2220      	movs	r2, #32
 800511c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2200      	movs	r2, #0
 8005124:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	330c      	adds	r3, #12
 800512c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800512e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005130:	e853 3f00 	ldrex	r3, [r3]
 8005134:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005136:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005138:	f023 0310 	bic.w	r3, r3, #16
 800513c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	330c      	adds	r3, #12
 8005146:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800514a:	65ba      	str	r2, [r7, #88]	; 0x58
 800514c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005150:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005152:	e841 2300 	strex	r3, r2, [r1]
 8005156:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005158:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1e3      	bne.n	8005126 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005162:	4618      	mov	r0, r3
 8005164:	f7fd fd71 	bl	8002c4a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2202      	movs	r2, #2
 800516c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005176:	b29b      	uxth	r3, r3
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	b29b      	uxth	r3, r3
 800517c:	4619      	mov	r1, r3
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f8bf 	bl	8005302 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005184:	e09c      	b.n	80052c0 <HAL_UART_IRQHandler+0x518>
 8005186:	bf00      	nop
 8005188:	0800548f 	.word	0x0800548f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005194:	b29b      	uxth	r3, r3
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051a0:	b29b      	uxth	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	f000 808e 	beq.w	80052c4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80051a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f000 8089 	beq.w	80052c4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	330c      	adds	r3, #12
 80051b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051bc:	e853 3f00 	ldrex	r3, [r3]
 80051c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80051c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80051c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	330c      	adds	r3, #12
 80051d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80051d6:	647a      	str	r2, [r7, #68]	; 0x44
 80051d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80051dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051de:	e841 2300 	strex	r3, r2, [r1]
 80051e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80051e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1e3      	bne.n	80051b2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	3314      	adds	r3, #20
 80051f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f4:	e853 3f00 	ldrex	r3, [r3]
 80051f8:	623b      	str	r3, [r7, #32]
   return(result);
 80051fa:	6a3b      	ldr	r3, [r7, #32]
 80051fc:	f023 0301 	bic.w	r3, r3, #1
 8005200:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	3314      	adds	r3, #20
 800520a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800520e:	633a      	str	r2, [r7, #48]	; 0x30
 8005210:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005212:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005214:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005216:	e841 2300 	strex	r3, r2, [r1]
 800521a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800521c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1e3      	bne.n	80051ea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2220      	movs	r2, #32
 8005226:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	330c      	adds	r3, #12
 8005236:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	e853 3f00 	ldrex	r3, [r3]
 800523e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f023 0310 	bic.w	r3, r3, #16
 8005246:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	330c      	adds	r3, #12
 8005250:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005254:	61fa      	str	r2, [r7, #28]
 8005256:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005258:	69b9      	ldr	r1, [r7, #24]
 800525a:	69fa      	ldr	r2, [r7, #28]
 800525c:	e841 2300 	strex	r3, r2, [r1]
 8005260:	617b      	str	r3, [r7, #20]
   return(result);
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d1e3      	bne.n	8005230 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2202      	movs	r2, #2
 800526c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800526e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005272:	4619      	mov	r1, r3
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 f844 	bl	8005302 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800527a:	e023      	b.n	80052c4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800527c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005284:	2b00      	cmp	r3, #0
 8005286:	d009      	beq.n	800529c <HAL_UART_IRQHandler+0x4f4>
 8005288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800528c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005290:	2b00      	cmp	r3, #0
 8005292:	d003      	beq.n	800529c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f000 f90e 	bl	80054b6 <UART_Transmit_IT>
    return;
 800529a:	e014      	b.n	80052c6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800529c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d00e      	beq.n	80052c6 <HAL_UART_IRQHandler+0x51e>
 80052a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d008      	beq.n	80052c6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 f94d 	bl	8005554 <UART_EndTransmit_IT>
    return;
 80052ba:	e004      	b.n	80052c6 <HAL_UART_IRQHandler+0x51e>
    return;
 80052bc:	bf00      	nop
 80052be:	e002      	b.n	80052c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80052c0:	bf00      	nop
 80052c2:	e000      	b.n	80052c6 <HAL_UART_IRQHandler+0x51e>
      return;
 80052c4:	bf00      	nop
  }
}
 80052c6:	37e8      	adds	r7, #232	; 0xe8
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	bc80      	pop	{r7}
 80052dc:	4770      	bx	lr

080052de <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80052de:	b480      	push	{r7}
 80052e0:	b083      	sub	sp, #12
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80052e6:	bf00      	nop
 80052e8:	370c      	adds	r7, #12
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bc80      	pop	{r7}
 80052ee:	4770      	bx	lr

080052f0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80052f8:	bf00      	nop
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bc80      	pop	{r7}
 8005300:	4770      	bx	lr

08005302 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005302:	b480      	push	{r7}
 8005304:	b083      	sub	sp, #12
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
 800530a:	460b      	mov	r3, r1
 800530c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800530e:	bf00      	nop
 8005310:	370c      	adds	r7, #12
 8005312:	46bd      	mov	sp, r7
 8005314:	bc80      	pop	{r7}
 8005316:	4770      	bx	lr

08005318 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b086      	sub	sp, #24
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	603b      	str	r3, [r7, #0]
 8005324:	4613      	mov	r3, r2
 8005326:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005328:	e03b      	b.n	80053a2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800532a:	6a3b      	ldr	r3, [r7, #32]
 800532c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005330:	d037      	beq.n	80053a2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005332:	f7fd fb4f 	bl	80029d4 <HAL_GetTick>
 8005336:	4602      	mov	r2, r0
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	1ad3      	subs	r3, r2, r3
 800533c:	6a3a      	ldr	r2, [r7, #32]
 800533e:	429a      	cmp	r2, r3
 8005340:	d302      	bcc.n	8005348 <UART_WaitOnFlagUntilTimeout+0x30>
 8005342:	6a3b      	ldr	r3, [r7, #32]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d101      	bne.n	800534c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e03a      	b.n	80053c2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	f003 0304 	and.w	r3, r3, #4
 8005356:	2b00      	cmp	r3, #0
 8005358:	d023      	beq.n	80053a2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	2b80      	cmp	r3, #128	; 0x80
 800535e:	d020      	beq.n	80053a2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	2b40      	cmp	r3, #64	; 0x40
 8005364:	d01d      	beq.n	80053a2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f003 0308 	and.w	r3, r3, #8
 8005370:	2b08      	cmp	r3, #8
 8005372:	d116      	bne.n	80053a2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005374:	2300      	movs	r3, #0
 8005376:	617b      	str	r3, [r7, #20]
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	617b      	str	r3, [r7, #20]
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	617b      	str	r3, [r7, #20]
 8005388:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f000 f81d 	bl	80053ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2208      	movs	r2, #8
 8005394:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e00f      	b.n	80053c2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	4013      	ands	r3, r2
 80053ac:	68ba      	ldr	r2, [r7, #8]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	bf0c      	ite	eq
 80053b2:	2301      	moveq	r3, #1
 80053b4:	2300      	movne	r3, #0
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	461a      	mov	r2, r3
 80053ba:	79fb      	ldrb	r3, [r7, #7]
 80053bc:	429a      	cmp	r2, r3
 80053be:	d0b4      	beq.n	800532a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3718      	adds	r7, #24
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}

080053ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053ca:	b480      	push	{r7}
 80053cc:	b095      	sub	sp, #84	; 0x54
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	330c      	adds	r3, #12
 80053d8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053dc:	e853 3f00 	ldrex	r3, [r3]
 80053e0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80053e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	330c      	adds	r3, #12
 80053f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053f2:	643a      	str	r2, [r7, #64]	; 0x40
 80053f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80053f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053fa:	e841 2300 	strex	r3, r2, [r1]
 80053fe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1e5      	bne.n	80053d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	3314      	adds	r3, #20
 800540c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800540e:	6a3b      	ldr	r3, [r7, #32]
 8005410:	e853 3f00 	ldrex	r3, [r3]
 8005414:	61fb      	str	r3, [r7, #28]
   return(result);
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	f023 0301 	bic.w	r3, r3, #1
 800541c:	64bb      	str	r3, [r7, #72]	; 0x48
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	3314      	adds	r3, #20
 8005424:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005426:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005428:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800542c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800542e:	e841 2300 	strex	r3, r2, [r1]
 8005432:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1e5      	bne.n	8005406 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543e:	2b01      	cmp	r3, #1
 8005440:	d119      	bne.n	8005476 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	330c      	adds	r3, #12
 8005448:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	e853 3f00 	ldrex	r3, [r3]
 8005450:	60bb      	str	r3, [r7, #8]
   return(result);
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	f023 0310 	bic.w	r3, r3, #16
 8005458:	647b      	str	r3, [r7, #68]	; 0x44
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	330c      	adds	r3, #12
 8005460:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005462:	61ba      	str	r2, [r7, #24]
 8005464:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005466:	6979      	ldr	r1, [r7, #20]
 8005468:	69ba      	ldr	r2, [r7, #24]
 800546a:	e841 2300 	strex	r3, r2, [r1]
 800546e:	613b      	str	r3, [r7, #16]
   return(result);
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1e5      	bne.n	8005442 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2220      	movs	r2, #32
 800547a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005484:	bf00      	nop
 8005486:	3754      	adds	r7, #84	; 0x54
 8005488:	46bd      	mov	sp, r7
 800548a:	bc80      	pop	{r7}
 800548c:	4770      	bx	lr

0800548e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800548e:	b580      	push	{r7, lr}
 8005490:	b084      	sub	sp, #16
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054a8:	68f8      	ldr	r0, [r7, #12]
 80054aa:	f7ff ff21 	bl	80052f0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054ae:	bf00      	nop
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80054b6:	b480      	push	{r7}
 80054b8:	b085      	sub	sp, #20
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b21      	cmp	r3, #33	; 0x21
 80054c8:	d13e      	bne.n	8005548 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054d2:	d114      	bne.n	80054fe <UART_Transmit_IT+0x48>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	691b      	ldr	r3, [r3, #16]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d110      	bne.n	80054fe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a1b      	ldr	r3, [r3, #32]
 80054e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	881b      	ldrh	r3, [r3, #0]
 80054e6:	461a      	mov	r2, r3
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6a1b      	ldr	r3, [r3, #32]
 80054f6:	1c9a      	adds	r2, r3, #2
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	621a      	str	r2, [r3, #32]
 80054fc:	e008      	b.n	8005510 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	1c59      	adds	r1, r3, #1
 8005504:	687a      	ldr	r2, [r7, #4]
 8005506:	6211      	str	r1, [r2, #32]
 8005508:	781a      	ldrb	r2, [r3, #0]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005514:	b29b      	uxth	r3, r3
 8005516:	3b01      	subs	r3, #1
 8005518:	b29b      	uxth	r3, r3
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	4619      	mov	r1, r3
 800551e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005520:	2b00      	cmp	r3, #0
 8005522:	d10f      	bne.n	8005544 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68da      	ldr	r2, [r3, #12]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005532:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68da      	ldr	r2, [r3, #12]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005542:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005544:	2300      	movs	r3, #0
 8005546:	e000      	b.n	800554a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005548:	2302      	movs	r3, #2
  }
}
 800554a:	4618      	mov	r0, r3
 800554c:	3714      	adds	r7, #20
 800554e:	46bd      	mov	sp, r7
 8005550:	bc80      	pop	{r7}
 8005552:	4770      	bx	lr

08005554 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b082      	sub	sp, #8
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68da      	ldr	r2, [r3, #12]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800556a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2220      	movs	r2, #32
 8005570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f7ff fea9 	bl	80052cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3708      	adds	r7, #8
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b08c      	sub	sp, #48	; 0x30
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b22      	cmp	r3, #34	; 0x22
 8005596:	f040 80ae 	bne.w	80056f6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055a2:	d117      	bne.n	80055d4 <UART_Receive_IT+0x50>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d113      	bne.n	80055d4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80055ac:	2300      	movs	r3, #0
 80055ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b4:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	b29b      	uxth	r3, r3
 80055be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055c2:	b29a      	uxth	r2, r3
 80055c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055c6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055cc:	1c9a      	adds	r2, r3, #2
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	629a      	str	r2, [r3, #40]	; 0x28
 80055d2:	e026      	b.n	8005622 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80055da:	2300      	movs	r3, #0
 80055dc:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055e6:	d007      	beq.n	80055f8 <UART_Receive_IT+0x74>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d10a      	bne.n	8005606 <UART_Receive_IT+0x82>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d106      	bne.n	8005606 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	b2da      	uxtb	r2, r3
 8005600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005602:	701a      	strb	r2, [r3, #0]
 8005604:	e008      	b.n	8005618 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	b2db      	uxtb	r3, r3
 800560e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005612:	b2da      	uxtb	r2, r3
 8005614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005616:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800561c:	1c5a      	adds	r2, r3, #1
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005626:	b29b      	uxth	r3, r3
 8005628:	3b01      	subs	r3, #1
 800562a:	b29b      	uxth	r3, r3
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	4619      	mov	r1, r3
 8005630:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005632:	2b00      	cmp	r3, #0
 8005634:	d15d      	bne.n	80056f2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68da      	ldr	r2, [r3, #12]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f022 0220 	bic.w	r2, r2, #32
 8005644:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68da      	ldr	r2, [r3, #12]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005654:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	695a      	ldr	r2, [r3, #20]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f022 0201 	bic.w	r2, r2, #1
 8005664:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2220      	movs	r2, #32
 800566a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005678:	2b01      	cmp	r3, #1
 800567a:	d135      	bne.n	80056e8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	330c      	adds	r3, #12
 8005688:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	e853 3f00 	ldrex	r3, [r3]
 8005690:	613b      	str	r3, [r7, #16]
   return(result);
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	f023 0310 	bic.w	r3, r3, #16
 8005698:	627b      	str	r3, [r7, #36]	; 0x24
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	330c      	adds	r3, #12
 80056a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056a2:	623a      	str	r2, [r7, #32]
 80056a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a6:	69f9      	ldr	r1, [r7, #28]
 80056a8:	6a3a      	ldr	r2, [r7, #32]
 80056aa:	e841 2300 	strex	r3, r2, [r1]
 80056ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1e5      	bne.n	8005682 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0310 	and.w	r3, r3, #16
 80056c0:	2b10      	cmp	r3, #16
 80056c2:	d10a      	bne.n	80056da <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056c4:	2300      	movs	r3, #0
 80056c6:	60fb      	str	r3, [r7, #12]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	60fb      	str	r3, [r7, #12]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	60fb      	str	r3, [r7, #12]
 80056d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80056de:	4619      	mov	r1, r3
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f7ff fe0e 	bl	8005302 <HAL_UARTEx_RxEventCallback>
 80056e6:	e002      	b.n	80056ee <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f7ff fdf8 	bl	80052de <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80056ee:	2300      	movs	r3, #0
 80056f0:	e002      	b.n	80056f8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80056f2:	2300      	movs	r3, #0
 80056f4:	e000      	b.n	80056f8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80056f6:	2302      	movs	r3, #2
  }
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3730      	adds	r7, #48	; 0x30
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	68da      	ldr	r2, [r3, #12]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	430a      	orrs	r2, r1
 800571c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	689a      	ldr	r2, [r3, #8]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	691b      	ldr	r3, [r3, #16]
 8005726:	431a      	orrs	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	695b      	ldr	r3, [r3, #20]
 800572c:	4313      	orrs	r3, r2
 800572e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800573a:	f023 030c 	bic.w	r3, r3, #12
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	6812      	ldr	r2, [r2, #0]
 8005742:	68b9      	ldr	r1, [r7, #8]
 8005744:	430b      	orrs	r3, r1
 8005746:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	699a      	ldr	r2, [r3, #24]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	430a      	orrs	r2, r1
 800575c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4a2c      	ldr	r2, [pc, #176]	; (8005814 <UART_SetConfig+0x114>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d103      	bne.n	8005770 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005768:	f7fe fd88 	bl	800427c <HAL_RCC_GetPCLK2Freq>
 800576c:	60f8      	str	r0, [r7, #12]
 800576e:	e002      	b.n	8005776 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005770:	f7fe fd70 	bl	8004254 <HAL_RCC_GetPCLK1Freq>
 8005774:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	4613      	mov	r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4413      	add	r3, r2
 800577e:	009a      	lsls	r2, r3, #2
 8005780:	441a      	add	r2, r3
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	fbb2 f3f3 	udiv	r3, r2, r3
 800578c:	4a22      	ldr	r2, [pc, #136]	; (8005818 <UART_SetConfig+0x118>)
 800578e:	fba2 2303 	umull	r2, r3, r2, r3
 8005792:	095b      	lsrs	r3, r3, #5
 8005794:	0119      	lsls	r1, r3, #4
 8005796:	68fa      	ldr	r2, [r7, #12]
 8005798:	4613      	mov	r3, r2
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	4413      	add	r3, r2
 800579e:	009a      	lsls	r2, r3, #2
 80057a0:	441a      	add	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80057ac:	4b1a      	ldr	r3, [pc, #104]	; (8005818 <UART_SetConfig+0x118>)
 80057ae:	fba3 0302 	umull	r0, r3, r3, r2
 80057b2:	095b      	lsrs	r3, r3, #5
 80057b4:	2064      	movs	r0, #100	; 0x64
 80057b6:	fb00 f303 	mul.w	r3, r0, r3
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	011b      	lsls	r3, r3, #4
 80057be:	3332      	adds	r3, #50	; 0x32
 80057c0:	4a15      	ldr	r2, [pc, #84]	; (8005818 <UART_SetConfig+0x118>)
 80057c2:	fba2 2303 	umull	r2, r3, r2, r3
 80057c6:	095b      	lsrs	r3, r3, #5
 80057c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057cc:	4419      	add	r1, r3
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	4613      	mov	r3, r2
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	4413      	add	r3, r2
 80057d6:	009a      	lsls	r2, r3, #2
 80057d8:	441a      	add	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80057e4:	4b0c      	ldr	r3, [pc, #48]	; (8005818 <UART_SetConfig+0x118>)
 80057e6:	fba3 0302 	umull	r0, r3, r3, r2
 80057ea:	095b      	lsrs	r3, r3, #5
 80057ec:	2064      	movs	r0, #100	; 0x64
 80057ee:	fb00 f303 	mul.w	r3, r0, r3
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	011b      	lsls	r3, r3, #4
 80057f6:	3332      	adds	r3, #50	; 0x32
 80057f8:	4a07      	ldr	r2, [pc, #28]	; (8005818 <UART_SetConfig+0x118>)
 80057fa:	fba2 2303 	umull	r2, r3, r2, r3
 80057fe:	095b      	lsrs	r3, r3, #5
 8005800:	f003 020f 	and.w	r2, r3, #15
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	440a      	add	r2, r1
 800580a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800580c:	bf00      	nop
 800580e:	3710      	adds	r7, #16
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	40013800 	.word	0x40013800
 8005818:	51eb851f 	.word	0x51eb851f

0800581c <__errno>:
 800581c:	4b01      	ldr	r3, [pc, #4]	; (8005824 <__errno+0x8>)
 800581e:	6818      	ldr	r0, [r3, #0]
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	2000007c 	.word	0x2000007c

08005828 <__libc_init_array>:
 8005828:	b570      	push	{r4, r5, r6, lr}
 800582a:	2600      	movs	r6, #0
 800582c:	4d0c      	ldr	r5, [pc, #48]	; (8005860 <__libc_init_array+0x38>)
 800582e:	4c0d      	ldr	r4, [pc, #52]	; (8005864 <__libc_init_array+0x3c>)
 8005830:	1b64      	subs	r4, r4, r5
 8005832:	10a4      	asrs	r4, r4, #2
 8005834:	42a6      	cmp	r6, r4
 8005836:	d109      	bne.n	800584c <__libc_init_array+0x24>
 8005838:	f000 fcc6 	bl	80061c8 <_init>
 800583c:	2600      	movs	r6, #0
 800583e:	4d0a      	ldr	r5, [pc, #40]	; (8005868 <__libc_init_array+0x40>)
 8005840:	4c0a      	ldr	r4, [pc, #40]	; (800586c <__libc_init_array+0x44>)
 8005842:	1b64      	subs	r4, r4, r5
 8005844:	10a4      	asrs	r4, r4, #2
 8005846:	42a6      	cmp	r6, r4
 8005848:	d105      	bne.n	8005856 <__libc_init_array+0x2e>
 800584a:	bd70      	pop	{r4, r5, r6, pc}
 800584c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005850:	4798      	blx	r3
 8005852:	3601      	adds	r6, #1
 8005854:	e7ee      	b.n	8005834 <__libc_init_array+0xc>
 8005856:	f855 3b04 	ldr.w	r3, [r5], #4
 800585a:	4798      	blx	r3
 800585c:	3601      	adds	r6, #1
 800585e:	e7f2      	b.n	8005846 <__libc_init_array+0x1e>
 8005860:	08006a54 	.word	0x08006a54
 8005864:	08006a54 	.word	0x08006a54
 8005868:	08006a54 	.word	0x08006a54
 800586c:	08006a58 	.word	0x08006a58

08005870 <malloc>:
 8005870:	4b02      	ldr	r3, [pc, #8]	; (800587c <malloc+0xc>)
 8005872:	4601      	mov	r1, r0
 8005874:	6818      	ldr	r0, [r3, #0]
 8005876:	f000 b85f 	b.w	8005938 <_malloc_r>
 800587a:	bf00      	nop
 800587c:	2000007c 	.word	0x2000007c

08005880 <free>:
 8005880:	4b02      	ldr	r3, [pc, #8]	; (800588c <free+0xc>)
 8005882:	4601      	mov	r1, r0
 8005884:	6818      	ldr	r0, [r3, #0]
 8005886:	f000 b80b 	b.w	80058a0 <_free_r>
 800588a:	bf00      	nop
 800588c:	2000007c 	.word	0x2000007c

08005890 <memset>:
 8005890:	4603      	mov	r3, r0
 8005892:	4402      	add	r2, r0
 8005894:	4293      	cmp	r3, r2
 8005896:	d100      	bne.n	800589a <memset+0xa>
 8005898:	4770      	bx	lr
 800589a:	f803 1b01 	strb.w	r1, [r3], #1
 800589e:	e7f9      	b.n	8005894 <memset+0x4>

080058a0 <_free_r>:
 80058a0:	b538      	push	{r3, r4, r5, lr}
 80058a2:	4605      	mov	r5, r0
 80058a4:	2900      	cmp	r1, #0
 80058a6:	d043      	beq.n	8005930 <_free_r+0x90>
 80058a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058ac:	1f0c      	subs	r4, r1, #4
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	bfb8      	it	lt
 80058b2:	18e4      	addlt	r4, r4, r3
 80058b4:	f000 f924 	bl	8005b00 <__malloc_lock>
 80058b8:	4a1e      	ldr	r2, [pc, #120]	; (8005934 <_free_r+0x94>)
 80058ba:	6813      	ldr	r3, [r2, #0]
 80058bc:	4610      	mov	r0, r2
 80058be:	b933      	cbnz	r3, 80058ce <_free_r+0x2e>
 80058c0:	6063      	str	r3, [r4, #4]
 80058c2:	6014      	str	r4, [r2, #0]
 80058c4:	4628      	mov	r0, r5
 80058c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058ca:	f000 b91f 	b.w	8005b0c <__malloc_unlock>
 80058ce:	42a3      	cmp	r3, r4
 80058d0:	d90a      	bls.n	80058e8 <_free_r+0x48>
 80058d2:	6821      	ldr	r1, [r4, #0]
 80058d4:	1862      	adds	r2, r4, r1
 80058d6:	4293      	cmp	r3, r2
 80058d8:	bf01      	itttt	eq
 80058da:	681a      	ldreq	r2, [r3, #0]
 80058dc:	685b      	ldreq	r3, [r3, #4]
 80058de:	1852      	addeq	r2, r2, r1
 80058e0:	6022      	streq	r2, [r4, #0]
 80058e2:	6063      	str	r3, [r4, #4]
 80058e4:	6004      	str	r4, [r0, #0]
 80058e6:	e7ed      	b.n	80058c4 <_free_r+0x24>
 80058e8:	461a      	mov	r2, r3
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	b10b      	cbz	r3, 80058f2 <_free_r+0x52>
 80058ee:	42a3      	cmp	r3, r4
 80058f0:	d9fa      	bls.n	80058e8 <_free_r+0x48>
 80058f2:	6811      	ldr	r1, [r2, #0]
 80058f4:	1850      	adds	r0, r2, r1
 80058f6:	42a0      	cmp	r0, r4
 80058f8:	d10b      	bne.n	8005912 <_free_r+0x72>
 80058fa:	6820      	ldr	r0, [r4, #0]
 80058fc:	4401      	add	r1, r0
 80058fe:	1850      	adds	r0, r2, r1
 8005900:	4283      	cmp	r3, r0
 8005902:	6011      	str	r1, [r2, #0]
 8005904:	d1de      	bne.n	80058c4 <_free_r+0x24>
 8005906:	6818      	ldr	r0, [r3, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	4401      	add	r1, r0
 800590c:	6011      	str	r1, [r2, #0]
 800590e:	6053      	str	r3, [r2, #4]
 8005910:	e7d8      	b.n	80058c4 <_free_r+0x24>
 8005912:	d902      	bls.n	800591a <_free_r+0x7a>
 8005914:	230c      	movs	r3, #12
 8005916:	602b      	str	r3, [r5, #0]
 8005918:	e7d4      	b.n	80058c4 <_free_r+0x24>
 800591a:	6820      	ldr	r0, [r4, #0]
 800591c:	1821      	adds	r1, r4, r0
 800591e:	428b      	cmp	r3, r1
 8005920:	bf01      	itttt	eq
 8005922:	6819      	ldreq	r1, [r3, #0]
 8005924:	685b      	ldreq	r3, [r3, #4]
 8005926:	1809      	addeq	r1, r1, r0
 8005928:	6021      	streq	r1, [r4, #0]
 800592a:	6063      	str	r3, [r4, #4]
 800592c:	6054      	str	r4, [r2, #4]
 800592e:	e7c9      	b.n	80058c4 <_free_r+0x24>
 8005930:	bd38      	pop	{r3, r4, r5, pc}
 8005932:	bf00      	nop
 8005934:	20000954 	.word	0x20000954

08005938 <_malloc_r>:
 8005938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800593a:	1ccd      	adds	r5, r1, #3
 800593c:	f025 0503 	bic.w	r5, r5, #3
 8005940:	3508      	adds	r5, #8
 8005942:	2d0c      	cmp	r5, #12
 8005944:	bf38      	it	cc
 8005946:	250c      	movcc	r5, #12
 8005948:	2d00      	cmp	r5, #0
 800594a:	4606      	mov	r6, r0
 800594c:	db01      	blt.n	8005952 <_malloc_r+0x1a>
 800594e:	42a9      	cmp	r1, r5
 8005950:	d903      	bls.n	800595a <_malloc_r+0x22>
 8005952:	230c      	movs	r3, #12
 8005954:	6033      	str	r3, [r6, #0]
 8005956:	2000      	movs	r0, #0
 8005958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800595a:	f000 f8d1 	bl	8005b00 <__malloc_lock>
 800595e:	4921      	ldr	r1, [pc, #132]	; (80059e4 <_malloc_r+0xac>)
 8005960:	680a      	ldr	r2, [r1, #0]
 8005962:	4614      	mov	r4, r2
 8005964:	b99c      	cbnz	r4, 800598e <_malloc_r+0x56>
 8005966:	4f20      	ldr	r7, [pc, #128]	; (80059e8 <_malloc_r+0xb0>)
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	b923      	cbnz	r3, 8005976 <_malloc_r+0x3e>
 800596c:	4621      	mov	r1, r4
 800596e:	4630      	mov	r0, r6
 8005970:	f000 f83c 	bl	80059ec <_sbrk_r>
 8005974:	6038      	str	r0, [r7, #0]
 8005976:	4629      	mov	r1, r5
 8005978:	4630      	mov	r0, r6
 800597a:	f000 f837 	bl	80059ec <_sbrk_r>
 800597e:	1c43      	adds	r3, r0, #1
 8005980:	d123      	bne.n	80059ca <_malloc_r+0x92>
 8005982:	230c      	movs	r3, #12
 8005984:	4630      	mov	r0, r6
 8005986:	6033      	str	r3, [r6, #0]
 8005988:	f000 f8c0 	bl	8005b0c <__malloc_unlock>
 800598c:	e7e3      	b.n	8005956 <_malloc_r+0x1e>
 800598e:	6823      	ldr	r3, [r4, #0]
 8005990:	1b5b      	subs	r3, r3, r5
 8005992:	d417      	bmi.n	80059c4 <_malloc_r+0x8c>
 8005994:	2b0b      	cmp	r3, #11
 8005996:	d903      	bls.n	80059a0 <_malloc_r+0x68>
 8005998:	6023      	str	r3, [r4, #0]
 800599a:	441c      	add	r4, r3
 800599c:	6025      	str	r5, [r4, #0]
 800599e:	e004      	b.n	80059aa <_malloc_r+0x72>
 80059a0:	6863      	ldr	r3, [r4, #4]
 80059a2:	42a2      	cmp	r2, r4
 80059a4:	bf0c      	ite	eq
 80059a6:	600b      	streq	r3, [r1, #0]
 80059a8:	6053      	strne	r3, [r2, #4]
 80059aa:	4630      	mov	r0, r6
 80059ac:	f000 f8ae 	bl	8005b0c <__malloc_unlock>
 80059b0:	f104 000b 	add.w	r0, r4, #11
 80059b4:	1d23      	adds	r3, r4, #4
 80059b6:	f020 0007 	bic.w	r0, r0, #7
 80059ba:	1ac2      	subs	r2, r0, r3
 80059bc:	d0cc      	beq.n	8005958 <_malloc_r+0x20>
 80059be:	1a1b      	subs	r3, r3, r0
 80059c0:	50a3      	str	r3, [r4, r2]
 80059c2:	e7c9      	b.n	8005958 <_malloc_r+0x20>
 80059c4:	4622      	mov	r2, r4
 80059c6:	6864      	ldr	r4, [r4, #4]
 80059c8:	e7cc      	b.n	8005964 <_malloc_r+0x2c>
 80059ca:	1cc4      	adds	r4, r0, #3
 80059cc:	f024 0403 	bic.w	r4, r4, #3
 80059d0:	42a0      	cmp	r0, r4
 80059d2:	d0e3      	beq.n	800599c <_malloc_r+0x64>
 80059d4:	1a21      	subs	r1, r4, r0
 80059d6:	4630      	mov	r0, r6
 80059d8:	f000 f808 	bl	80059ec <_sbrk_r>
 80059dc:	3001      	adds	r0, #1
 80059de:	d1dd      	bne.n	800599c <_malloc_r+0x64>
 80059e0:	e7cf      	b.n	8005982 <_malloc_r+0x4a>
 80059e2:	bf00      	nop
 80059e4:	20000954 	.word	0x20000954
 80059e8:	20000958 	.word	0x20000958

080059ec <_sbrk_r>:
 80059ec:	b538      	push	{r3, r4, r5, lr}
 80059ee:	2300      	movs	r3, #0
 80059f0:	4d05      	ldr	r5, [pc, #20]	; (8005a08 <_sbrk_r+0x1c>)
 80059f2:	4604      	mov	r4, r0
 80059f4:	4608      	mov	r0, r1
 80059f6:	602b      	str	r3, [r5, #0]
 80059f8:	f7fc ff32 	bl	8002860 <_sbrk>
 80059fc:	1c43      	adds	r3, r0, #1
 80059fe:	d102      	bne.n	8005a06 <_sbrk_r+0x1a>
 8005a00:	682b      	ldr	r3, [r5, #0]
 8005a02:	b103      	cbz	r3, 8005a06 <_sbrk_r+0x1a>
 8005a04:	6023      	str	r3, [r4, #0]
 8005a06:	bd38      	pop	{r3, r4, r5, pc}
 8005a08:	20000ba4 	.word	0x20000ba4

08005a0c <sniprintf>:
 8005a0c:	b40c      	push	{r2, r3}
 8005a0e:	b530      	push	{r4, r5, lr}
 8005a10:	4b17      	ldr	r3, [pc, #92]	; (8005a70 <sniprintf+0x64>)
 8005a12:	1e0c      	subs	r4, r1, #0
 8005a14:	681d      	ldr	r5, [r3, #0]
 8005a16:	b09d      	sub	sp, #116	; 0x74
 8005a18:	da08      	bge.n	8005a2c <sniprintf+0x20>
 8005a1a:	238b      	movs	r3, #139	; 0x8b
 8005a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a20:	602b      	str	r3, [r5, #0]
 8005a22:	b01d      	add	sp, #116	; 0x74
 8005a24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a28:	b002      	add	sp, #8
 8005a2a:	4770      	bx	lr
 8005a2c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005a30:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005a34:	bf0c      	ite	eq
 8005a36:	4623      	moveq	r3, r4
 8005a38:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005a3c:	9304      	str	r3, [sp, #16]
 8005a3e:	9307      	str	r3, [sp, #28]
 8005a40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005a44:	9002      	str	r0, [sp, #8]
 8005a46:	9006      	str	r0, [sp, #24]
 8005a48:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005a4c:	4628      	mov	r0, r5
 8005a4e:	ab21      	add	r3, sp, #132	; 0x84
 8005a50:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005a52:	a902      	add	r1, sp, #8
 8005a54:	9301      	str	r3, [sp, #4]
 8005a56:	f000 f8bb 	bl	8005bd0 <_svfiprintf_r>
 8005a5a:	1c43      	adds	r3, r0, #1
 8005a5c:	bfbc      	itt	lt
 8005a5e:	238b      	movlt	r3, #139	; 0x8b
 8005a60:	602b      	strlt	r3, [r5, #0]
 8005a62:	2c00      	cmp	r4, #0
 8005a64:	d0dd      	beq.n	8005a22 <sniprintf+0x16>
 8005a66:	2200      	movs	r2, #0
 8005a68:	9b02      	ldr	r3, [sp, #8]
 8005a6a:	701a      	strb	r2, [r3, #0]
 8005a6c:	e7d9      	b.n	8005a22 <sniprintf+0x16>
 8005a6e:	bf00      	nop
 8005a70:	2000007c 	.word	0x2000007c

08005a74 <siprintf>:
 8005a74:	b40e      	push	{r1, r2, r3}
 8005a76:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005a7a:	b500      	push	{lr}
 8005a7c:	b09c      	sub	sp, #112	; 0x70
 8005a7e:	ab1d      	add	r3, sp, #116	; 0x74
 8005a80:	9002      	str	r0, [sp, #8]
 8005a82:	9006      	str	r0, [sp, #24]
 8005a84:	9107      	str	r1, [sp, #28]
 8005a86:	9104      	str	r1, [sp, #16]
 8005a88:	4808      	ldr	r0, [pc, #32]	; (8005aac <siprintf+0x38>)
 8005a8a:	4909      	ldr	r1, [pc, #36]	; (8005ab0 <siprintf+0x3c>)
 8005a8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a90:	9105      	str	r1, [sp, #20]
 8005a92:	6800      	ldr	r0, [r0, #0]
 8005a94:	a902      	add	r1, sp, #8
 8005a96:	9301      	str	r3, [sp, #4]
 8005a98:	f000 f89a 	bl	8005bd0 <_svfiprintf_r>
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	9b02      	ldr	r3, [sp, #8]
 8005aa0:	701a      	strb	r2, [r3, #0]
 8005aa2:	b01c      	add	sp, #112	; 0x70
 8005aa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005aa8:	b003      	add	sp, #12
 8005aaa:	4770      	bx	lr
 8005aac:	2000007c 	.word	0x2000007c
 8005ab0:	ffff0208 	.word	0xffff0208

08005ab4 <strcat>:
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	b510      	push	{r4, lr}
 8005ab8:	7814      	ldrb	r4, [r2, #0]
 8005aba:	4613      	mov	r3, r2
 8005abc:	3201      	adds	r2, #1
 8005abe:	2c00      	cmp	r4, #0
 8005ac0:	d1fa      	bne.n	8005ab8 <strcat+0x4>
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005ac8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005acc:	2a00      	cmp	r2, #0
 8005ace:	d1f9      	bne.n	8005ac4 <strcat+0x10>
 8005ad0:	bd10      	pop	{r4, pc}

08005ad2 <strstr>:
 8005ad2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ad4:	780c      	ldrb	r4, [r1, #0]
 8005ad6:	b164      	cbz	r4, 8005af2 <strstr+0x20>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	781a      	ldrb	r2, [r3, #0]
 8005adc:	4618      	mov	r0, r3
 8005ade:	1c5e      	adds	r6, r3, #1
 8005ae0:	b90a      	cbnz	r2, 8005ae6 <strstr+0x14>
 8005ae2:	4610      	mov	r0, r2
 8005ae4:	e005      	b.n	8005af2 <strstr+0x20>
 8005ae6:	4294      	cmp	r4, r2
 8005ae8:	d108      	bne.n	8005afc <strstr+0x2a>
 8005aea:	460d      	mov	r5, r1
 8005aec:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8005af0:	b902      	cbnz	r2, 8005af4 <strstr+0x22>
 8005af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005af4:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8005af8:	4297      	cmp	r7, r2
 8005afa:	d0f7      	beq.n	8005aec <strstr+0x1a>
 8005afc:	4633      	mov	r3, r6
 8005afe:	e7ec      	b.n	8005ada <strstr+0x8>

08005b00 <__malloc_lock>:
 8005b00:	4801      	ldr	r0, [pc, #4]	; (8005b08 <__malloc_lock+0x8>)
 8005b02:	f000 bafb 	b.w	80060fc <__retarget_lock_acquire_recursive>
 8005b06:	bf00      	nop
 8005b08:	20000bac 	.word	0x20000bac

08005b0c <__malloc_unlock>:
 8005b0c:	4801      	ldr	r0, [pc, #4]	; (8005b14 <__malloc_unlock+0x8>)
 8005b0e:	f000 baf6 	b.w	80060fe <__retarget_lock_release_recursive>
 8005b12:	bf00      	nop
 8005b14:	20000bac 	.word	0x20000bac

08005b18 <__ssputs_r>:
 8005b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b1c:	688e      	ldr	r6, [r1, #8]
 8005b1e:	4682      	mov	sl, r0
 8005b20:	429e      	cmp	r6, r3
 8005b22:	460c      	mov	r4, r1
 8005b24:	4690      	mov	r8, r2
 8005b26:	461f      	mov	r7, r3
 8005b28:	d838      	bhi.n	8005b9c <__ssputs_r+0x84>
 8005b2a:	898a      	ldrh	r2, [r1, #12]
 8005b2c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005b30:	d032      	beq.n	8005b98 <__ssputs_r+0x80>
 8005b32:	6825      	ldr	r5, [r4, #0]
 8005b34:	6909      	ldr	r1, [r1, #16]
 8005b36:	3301      	adds	r3, #1
 8005b38:	eba5 0901 	sub.w	r9, r5, r1
 8005b3c:	6965      	ldr	r5, [r4, #20]
 8005b3e:	444b      	add	r3, r9
 8005b40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005b48:	106d      	asrs	r5, r5, #1
 8005b4a:	429d      	cmp	r5, r3
 8005b4c:	bf38      	it	cc
 8005b4e:	461d      	movcc	r5, r3
 8005b50:	0553      	lsls	r3, r2, #21
 8005b52:	d531      	bpl.n	8005bb8 <__ssputs_r+0xa0>
 8005b54:	4629      	mov	r1, r5
 8005b56:	f7ff feef 	bl	8005938 <_malloc_r>
 8005b5a:	4606      	mov	r6, r0
 8005b5c:	b950      	cbnz	r0, 8005b74 <__ssputs_r+0x5c>
 8005b5e:	230c      	movs	r3, #12
 8005b60:	f04f 30ff 	mov.w	r0, #4294967295
 8005b64:	f8ca 3000 	str.w	r3, [sl]
 8005b68:	89a3      	ldrh	r3, [r4, #12]
 8005b6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b6e:	81a3      	strh	r3, [r4, #12]
 8005b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b74:	464a      	mov	r2, r9
 8005b76:	6921      	ldr	r1, [r4, #16]
 8005b78:	f000 fad0 	bl	800611c <memcpy>
 8005b7c:	89a3      	ldrh	r3, [r4, #12]
 8005b7e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005b82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b86:	81a3      	strh	r3, [r4, #12]
 8005b88:	6126      	str	r6, [r4, #16]
 8005b8a:	444e      	add	r6, r9
 8005b8c:	6026      	str	r6, [r4, #0]
 8005b8e:	463e      	mov	r6, r7
 8005b90:	6165      	str	r5, [r4, #20]
 8005b92:	eba5 0509 	sub.w	r5, r5, r9
 8005b96:	60a5      	str	r5, [r4, #8]
 8005b98:	42be      	cmp	r6, r7
 8005b9a:	d900      	bls.n	8005b9e <__ssputs_r+0x86>
 8005b9c:	463e      	mov	r6, r7
 8005b9e:	4632      	mov	r2, r6
 8005ba0:	4641      	mov	r1, r8
 8005ba2:	6820      	ldr	r0, [r4, #0]
 8005ba4:	f000 fac8 	bl	8006138 <memmove>
 8005ba8:	68a3      	ldr	r3, [r4, #8]
 8005baa:	6822      	ldr	r2, [r4, #0]
 8005bac:	1b9b      	subs	r3, r3, r6
 8005bae:	4432      	add	r2, r6
 8005bb0:	2000      	movs	r0, #0
 8005bb2:	60a3      	str	r3, [r4, #8]
 8005bb4:	6022      	str	r2, [r4, #0]
 8005bb6:	e7db      	b.n	8005b70 <__ssputs_r+0x58>
 8005bb8:	462a      	mov	r2, r5
 8005bba:	f000 fad7 	bl	800616c <_realloc_r>
 8005bbe:	4606      	mov	r6, r0
 8005bc0:	2800      	cmp	r0, #0
 8005bc2:	d1e1      	bne.n	8005b88 <__ssputs_r+0x70>
 8005bc4:	4650      	mov	r0, sl
 8005bc6:	6921      	ldr	r1, [r4, #16]
 8005bc8:	f7ff fe6a 	bl	80058a0 <_free_r>
 8005bcc:	e7c7      	b.n	8005b5e <__ssputs_r+0x46>
	...

08005bd0 <_svfiprintf_r>:
 8005bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bd4:	4698      	mov	r8, r3
 8005bd6:	898b      	ldrh	r3, [r1, #12]
 8005bd8:	4607      	mov	r7, r0
 8005bda:	061b      	lsls	r3, r3, #24
 8005bdc:	460d      	mov	r5, r1
 8005bde:	4614      	mov	r4, r2
 8005be0:	b09d      	sub	sp, #116	; 0x74
 8005be2:	d50e      	bpl.n	8005c02 <_svfiprintf_r+0x32>
 8005be4:	690b      	ldr	r3, [r1, #16]
 8005be6:	b963      	cbnz	r3, 8005c02 <_svfiprintf_r+0x32>
 8005be8:	2140      	movs	r1, #64	; 0x40
 8005bea:	f7ff fea5 	bl	8005938 <_malloc_r>
 8005bee:	6028      	str	r0, [r5, #0]
 8005bf0:	6128      	str	r0, [r5, #16]
 8005bf2:	b920      	cbnz	r0, 8005bfe <_svfiprintf_r+0x2e>
 8005bf4:	230c      	movs	r3, #12
 8005bf6:	603b      	str	r3, [r7, #0]
 8005bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bfc:	e0d1      	b.n	8005da2 <_svfiprintf_r+0x1d2>
 8005bfe:	2340      	movs	r3, #64	; 0x40
 8005c00:	616b      	str	r3, [r5, #20]
 8005c02:	2300      	movs	r3, #0
 8005c04:	9309      	str	r3, [sp, #36]	; 0x24
 8005c06:	2320      	movs	r3, #32
 8005c08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c0c:	2330      	movs	r3, #48	; 0x30
 8005c0e:	f04f 0901 	mov.w	r9, #1
 8005c12:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c16:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005dbc <_svfiprintf_r+0x1ec>
 8005c1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c1e:	4623      	mov	r3, r4
 8005c20:	469a      	mov	sl, r3
 8005c22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c26:	b10a      	cbz	r2, 8005c2c <_svfiprintf_r+0x5c>
 8005c28:	2a25      	cmp	r2, #37	; 0x25
 8005c2a:	d1f9      	bne.n	8005c20 <_svfiprintf_r+0x50>
 8005c2c:	ebba 0b04 	subs.w	fp, sl, r4
 8005c30:	d00b      	beq.n	8005c4a <_svfiprintf_r+0x7a>
 8005c32:	465b      	mov	r3, fp
 8005c34:	4622      	mov	r2, r4
 8005c36:	4629      	mov	r1, r5
 8005c38:	4638      	mov	r0, r7
 8005c3a:	f7ff ff6d 	bl	8005b18 <__ssputs_r>
 8005c3e:	3001      	adds	r0, #1
 8005c40:	f000 80aa 	beq.w	8005d98 <_svfiprintf_r+0x1c8>
 8005c44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c46:	445a      	add	r2, fp
 8005c48:	9209      	str	r2, [sp, #36]	; 0x24
 8005c4a:	f89a 3000 	ldrb.w	r3, [sl]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	f000 80a2 	beq.w	8005d98 <_svfiprintf_r+0x1c8>
 8005c54:	2300      	movs	r3, #0
 8005c56:	f04f 32ff 	mov.w	r2, #4294967295
 8005c5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c5e:	f10a 0a01 	add.w	sl, sl, #1
 8005c62:	9304      	str	r3, [sp, #16]
 8005c64:	9307      	str	r3, [sp, #28]
 8005c66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c6a:	931a      	str	r3, [sp, #104]	; 0x68
 8005c6c:	4654      	mov	r4, sl
 8005c6e:	2205      	movs	r2, #5
 8005c70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c74:	4851      	ldr	r0, [pc, #324]	; (8005dbc <_svfiprintf_r+0x1ec>)
 8005c76:	f000 fa43 	bl	8006100 <memchr>
 8005c7a:	9a04      	ldr	r2, [sp, #16]
 8005c7c:	b9d8      	cbnz	r0, 8005cb6 <_svfiprintf_r+0xe6>
 8005c7e:	06d0      	lsls	r0, r2, #27
 8005c80:	bf44      	itt	mi
 8005c82:	2320      	movmi	r3, #32
 8005c84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c88:	0711      	lsls	r1, r2, #28
 8005c8a:	bf44      	itt	mi
 8005c8c:	232b      	movmi	r3, #43	; 0x2b
 8005c8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c92:	f89a 3000 	ldrb.w	r3, [sl]
 8005c96:	2b2a      	cmp	r3, #42	; 0x2a
 8005c98:	d015      	beq.n	8005cc6 <_svfiprintf_r+0xf6>
 8005c9a:	4654      	mov	r4, sl
 8005c9c:	2000      	movs	r0, #0
 8005c9e:	f04f 0c0a 	mov.w	ip, #10
 8005ca2:	9a07      	ldr	r2, [sp, #28]
 8005ca4:	4621      	mov	r1, r4
 8005ca6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005caa:	3b30      	subs	r3, #48	; 0x30
 8005cac:	2b09      	cmp	r3, #9
 8005cae:	d94e      	bls.n	8005d4e <_svfiprintf_r+0x17e>
 8005cb0:	b1b0      	cbz	r0, 8005ce0 <_svfiprintf_r+0x110>
 8005cb2:	9207      	str	r2, [sp, #28]
 8005cb4:	e014      	b.n	8005ce0 <_svfiprintf_r+0x110>
 8005cb6:	eba0 0308 	sub.w	r3, r0, r8
 8005cba:	fa09 f303 	lsl.w	r3, r9, r3
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	46a2      	mov	sl, r4
 8005cc2:	9304      	str	r3, [sp, #16]
 8005cc4:	e7d2      	b.n	8005c6c <_svfiprintf_r+0x9c>
 8005cc6:	9b03      	ldr	r3, [sp, #12]
 8005cc8:	1d19      	adds	r1, r3, #4
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	9103      	str	r1, [sp, #12]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	bfbb      	ittet	lt
 8005cd2:	425b      	neglt	r3, r3
 8005cd4:	f042 0202 	orrlt.w	r2, r2, #2
 8005cd8:	9307      	strge	r3, [sp, #28]
 8005cda:	9307      	strlt	r3, [sp, #28]
 8005cdc:	bfb8      	it	lt
 8005cde:	9204      	strlt	r2, [sp, #16]
 8005ce0:	7823      	ldrb	r3, [r4, #0]
 8005ce2:	2b2e      	cmp	r3, #46	; 0x2e
 8005ce4:	d10c      	bne.n	8005d00 <_svfiprintf_r+0x130>
 8005ce6:	7863      	ldrb	r3, [r4, #1]
 8005ce8:	2b2a      	cmp	r3, #42	; 0x2a
 8005cea:	d135      	bne.n	8005d58 <_svfiprintf_r+0x188>
 8005cec:	9b03      	ldr	r3, [sp, #12]
 8005cee:	3402      	adds	r4, #2
 8005cf0:	1d1a      	adds	r2, r3, #4
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	9203      	str	r2, [sp, #12]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	bfb8      	it	lt
 8005cfa:	f04f 33ff 	movlt.w	r3, #4294967295
 8005cfe:	9305      	str	r3, [sp, #20]
 8005d00:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005dcc <_svfiprintf_r+0x1fc>
 8005d04:	2203      	movs	r2, #3
 8005d06:	4650      	mov	r0, sl
 8005d08:	7821      	ldrb	r1, [r4, #0]
 8005d0a:	f000 f9f9 	bl	8006100 <memchr>
 8005d0e:	b140      	cbz	r0, 8005d22 <_svfiprintf_r+0x152>
 8005d10:	2340      	movs	r3, #64	; 0x40
 8005d12:	eba0 000a 	sub.w	r0, r0, sl
 8005d16:	fa03 f000 	lsl.w	r0, r3, r0
 8005d1a:	9b04      	ldr	r3, [sp, #16]
 8005d1c:	3401      	adds	r4, #1
 8005d1e:	4303      	orrs	r3, r0
 8005d20:	9304      	str	r3, [sp, #16]
 8005d22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d26:	2206      	movs	r2, #6
 8005d28:	4825      	ldr	r0, [pc, #148]	; (8005dc0 <_svfiprintf_r+0x1f0>)
 8005d2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d2e:	f000 f9e7 	bl	8006100 <memchr>
 8005d32:	2800      	cmp	r0, #0
 8005d34:	d038      	beq.n	8005da8 <_svfiprintf_r+0x1d8>
 8005d36:	4b23      	ldr	r3, [pc, #140]	; (8005dc4 <_svfiprintf_r+0x1f4>)
 8005d38:	bb1b      	cbnz	r3, 8005d82 <_svfiprintf_r+0x1b2>
 8005d3a:	9b03      	ldr	r3, [sp, #12]
 8005d3c:	3307      	adds	r3, #7
 8005d3e:	f023 0307 	bic.w	r3, r3, #7
 8005d42:	3308      	adds	r3, #8
 8005d44:	9303      	str	r3, [sp, #12]
 8005d46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d48:	4433      	add	r3, r6
 8005d4a:	9309      	str	r3, [sp, #36]	; 0x24
 8005d4c:	e767      	b.n	8005c1e <_svfiprintf_r+0x4e>
 8005d4e:	460c      	mov	r4, r1
 8005d50:	2001      	movs	r0, #1
 8005d52:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d56:	e7a5      	b.n	8005ca4 <_svfiprintf_r+0xd4>
 8005d58:	2300      	movs	r3, #0
 8005d5a:	f04f 0c0a 	mov.w	ip, #10
 8005d5e:	4619      	mov	r1, r3
 8005d60:	3401      	adds	r4, #1
 8005d62:	9305      	str	r3, [sp, #20]
 8005d64:	4620      	mov	r0, r4
 8005d66:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d6a:	3a30      	subs	r2, #48	; 0x30
 8005d6c:	2a09      	cmp	r2, #9
 8005d6e:	d903      	bls.n	8005d78 <_svfiprintf_r+0x1a8>
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d0c5      	beq.n	8005d00 <_svfiprintf_r+0x130>
 8005d74:	9105      	str	r1, [sp, #20]
 8005d76:	e7c3      	b.n	8005d00 <_svfiprintf_r+0x130>
 8005d78:	4604      	mov	r4, r0
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d80:	e7f0      	b.n	8005d64 <_svfiprintf_r+0x194>
 8005d82:	ab03      	add	r3, sp, #12
 8005d84:	9300      	str	r3, [sp, #0]
 8005d86:	462a      	mov	r2, r5
 8005d88:	4638      	mov	r0, r7
 8005d8a:	4b0f      	ldr	r3, [pc, #60]	; (8005dc8 <_svfiprintf_r+0x1f8>)
 8005d8c:	a904      	add	r1, sp, #16
 8005d8e:	f3af 8000 	nop.w
 8005d92:	1c42      	adds	r2, r0, #1
 8005d94:	4606      	mov	r6, r0
 8005d96:	d1d6      	bne.n	8005d46 <_svfiprintf_r+0x176>
 8005d98:	89ab      	ldrh	r3, [r5, #12]
 8005d9a:	065b      	lsls	r3, r3, #25
 8005d9c:	f53f af2c 	bmi.w	8005bf8 <_svfiprintf_r+0x28>
 8005da0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005da2:	b01d      	add	sp, #116	; 0x74
 8005da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005da8:	ab03      	add	r3, sp, #12
 8005daa:	9300      	str	r3, [sp, #0]
 8005dac:	462a      	mov	r2, r5
 8005dae:	4638      	mov	r0, r7
 8005db0:	4b05      	ldr	r3, [pc, #20]	; (8005dc8 <_svfiprintf_r+0x1f8>)
 8005db2:	a904      	add	r1, sp, #16
 8005db4:	f000 f87c 	bl	8005eb0 <_printf_i>
 8005db8:	e7eb      	b.n	8005d92 <_svfiprintf_r+0x1c2>
 8005dba:	bf00      	nop
 8005dbc:	08006a1e 	.word	0x08006a1e
 8005dc0:	08006a28 	.word	0x08006a28
 8005dc4:	00000000 	.word	0x00000000
 8005dc8:	08005b19 	.word	0x08005b19
 8005dcc:	08006a24 	.word	0x08006a24

08005dd0 <_printf_common>:
 8005dd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dd4:	4616      	mov	r6, r2
 8005dd6:	4699      	mov	r9, r3
 8005dd8:	688a      	ldr	r2, [r1, #8]
 8005dda:	690b      	ldr	r3, [r1, #16]
 8005ddc:	4607      	mov	r7, r0
 8005dde:	4293      	cmp	r3, r2
 8005de0:	bfb8      	it	lt
 8005de2:	4613      	movlt	r3, r2
 8005de4:	6033      	str	r3, [r6, #0]
 8005de6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005dea:	460c      	mov	r4, r1
 8005dec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005df0:	b10a      	cbz	r2, 8005df6 <_printf_common+0x26>
 8005df2:	3301      	adds	r3, #1
 8005df4:	6033      	str	r3, [r6, #0]
 8005df6:	6823      	ldr	r3, [r4, #0]
 8005df8:	0699      	lsls	r1, r3, #26
 8005dfa:	bf42      	ittt	mi
 8005dfc:	6833      	ldrmi	r3, [r6, #0]
 8005dfe:	3302      	addmi	r3, #2
 8005e00:	6033      	strmi	r3, [r6, #0]
 8005e02:	6825      	ldr	r5, [r4, #0]
 8005e04:	f015 0506 	ands.w	r5, r5, #6
 8005e08:	d106      	bne.n	8005e18 <_printf_common+0x48>
 8005e0a:	f104 0a19 	add.w	sl, r4, #25
 8005e0e:	68e3      	ldr	r3, [r4, #12]
 8005e10:	6832      	ldr	r2, [r6, #0]
 8005e12:	1a9b      	subs	r3, r3, r2
 8005e14:	42ab      	cmp	r3, r5
 8005e16:	dc28      	bgt.n	8005e6a <_printf_common+0x9a>
 8005e18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e1c:	1e13      	subs	r3, r2, #0
 8005e1e:	6822      	ldr	r2, [r4, #0]
 8005e20:	bf18      	it	ne
 8005e22:	2301      	movne	r3, #1
 8005e24:	0692      	lsls	r2, r2, #26
 8005e26:	d42d      	bmi.n	8005e84 <_printf_common+0xb4>
 8005e28:	4649      	mov	r1, r9
 8005e2a:	4638      	mov	r0, r7
 8005e2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e30:	47c0      	blx	r8
 8005e32:	3001      	adds	r0, #1
 8005e34:	d020      	beq.n	8005e78 <_printf_common+0xa8>
 8005e36:	6823      	ldr	r3, [r4, #0]
 8005e38:	68e5      	ldr	r5, [r4, #12]
 8005e3a:	f003 0306 	and.w	r3, r3, #6
 8005e3e:	2b04      	cmp	r3, #4
 8005e40:	bf18      	it	ne
 8005e42:	2500      	movne	r5, #0
 8005e44:	6832      	ldr	r2, [r6, #0]
 8005e46:	f04f 0600 	mov.w	r6, #0
 8005e4a:	68a3      	ldr	r3, [r4, #8]
 8005e4c:	bf08      	it	eq
 8005e4e:	1aad      	subeq	r5, r5, r2
 8005e50:	6922      	ldr	r2, [r4, #16]
 8005e52:	bf08      	it	eq
 8005e54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	bfc4      	itt	gt
 8005e5c:	1a9b      	subgt	r3, r3, r2
 8005e5e:	18ed      	addgt	r5, r5, r3
 8005e60:	341a      	adds	r4, #26
 8005e62:	42b5      	cmp	r5, r6
 8005e64:	d11a      	bne.n	8005e9c <_printf_common+0xcc>
 8005e66:	2000      	movs	r0, #0
 8005e68:	e008      	b.n	8005e7c <_printf_common+0xac>
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	4652      	mov	r2, sl
 8005e6e:	4649      	mov	r1, r9
 8005e70:	4638      	mov	r0, r7
 8005e72:	47c0      	blx	r8
 8005e74:	3001      	adds	r0, #1
 8005e76:	d103      	bne.n	8005e80 <_printf_common+0xb0>
 8005e78:	f04f 30ff 	mov.w	r0, #4294967295
 8005e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e80:	3501      	adds	r5, #1
 8005e82:	e7c4      	b.n	8005e0e <_printf_common+0x3e>
 8005e84:	2030      	movs	r0, #48	; 0x30
 8005e86:	18e1      	adds	r1, r4, r3
 8005e88:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e8c:	1c5a      	adds	r2, r3, #1
 8005e8e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e92:	4422      	add	r2, r4
 8005e94:	3302      	adds	r3, #2
 8005e96:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e9a:	e7c5      	b.n	8005e28 <_printf_common+0x58>
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	4622      	mov	r2, r4
 8005ea0:	4649      	mov	r1, r9
 8005ea2:	4638      	mov	r0, r7
 8005ea4:	47c0      	blx	r8
 8005ea6:	3001      	adds	r0, #1
 8005ea8:	d0e6      	beq.n	8005e78 <_printf_common+0xa8>
 8005eaa:	3601      	adds	r6, #1
 8005eac:	e7d9      	b.n	8005e62 <_printf_common+0x92>
	...

08005eb0 <_printf_i>:
 8005eb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005eb4:	460c      	mov	r4, r1
 8005eb6:	7e27      	ldrb	r7, [r4, #24]
 8005eb8:	4691      	mov	r9, r2
 8005eba:	2f78      	cmp	r7, #120	; 0x78
 8005ebc:	4680      	mov	r8, r0
 8005ebe:	469a      	mov	sl, r3
 8005ec0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005ec2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ec6:	d807      	bhi.n	8005ed8 <_printf_i+0x28>
 8005ec8:	2f62      	cmp	r7, #98	; 0x62
 8005eca:	d80a      	bhi.n	8005ee2 <_printf_i+0x32>
 8005ecc:	2f00      	cmp	r7, #0
 8005ece:	f000 80d9 	beq.w	8006084 <_printf_i+0x1d4>
 8005ed2:	2f58      	cmp	r7, #88	; 0x58
 8005ed4:	f000 80a4 	beq.w	8006020 <_printf_i+0x170>
 8005ed8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005edc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ee0:	e03a      	b.n	8005f58 <_printf_i+0xa8>
 8005ee2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ee6:	2b15      	cmp	r3, #21
 8005ee8:	d8f6      	bhi.n	8005ed8 <_printf_i+0x28>
 8005eea:	a001      	add	r0, pc, #4	; (adr r0, 8005ef0 <_printf_i+0x40>)
 8005eec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005ef0:	08005f49 	.word	0x08005f49
 8005ef4:	08005f5d 	.word	0x08005f5d
 8005ef8:	08005ed9 	.word	0x08005ed9
 8005efc:	08005ed9 	.word	0x08005ed9
 8005f00:	08005ed9 	.word	0x08005ed9
 8005f04:	08005ed9 	.word	0x08005ed9
 8005f08:	08005f5d 	.word	0x08005f5d
 8005f0c:	08005ed9 	.word	0x08005ed9
 8005f10:	08005ed9 	.word	0x08005ed9
 8005f14:	08005ed9 	.word	0x08005ed9
 8005f18:	08005ed9 	.word	0x08005ed9
 8005f1c:	0800606b 	.word	0x0800606b
 8005f20:	08005f8d 	.word	0x08005f8d
 8005f24:	0800604d 	.word	0x0800604d
 8005f28:	08005ed9 	.word	0x08005ed9
 8005f2c:	08005ed9 	.word	0x08005ed9
 8005f30:	0800608d 	.word	0x0800608d
 8005f34:	08005ed9 	.word	0x08005ed9
 8005f38:	08005f8d 	.word	0x08005f8d
 8005f3c:	08005ed9 	.word	0x08005ed9
 8005f40:	08005ed9 	.word	0x08005ed9
 8005f44:	08006055 	.word	0x08006055
 8005f48:	680b      	ldr	r3, [r1, #0]
 8005f4a:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005f4e:	1d1a      	adds	r2, r3, #4
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	600a      	str	r2, [r1, #0]
 8005f54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f58:	2301      	movs	r3, #1
 8005f5a:	e0a4      	b.n	80060a6 <_printf_i+0x1f6>
 8005f5c:	6825      	ldr	r5, [r4, #0]
 8005f5e:	6808      	ldr	r0, [r1, #0]
 8005f60:	062e      	lsls	r6, r5, #24
 8005f62:	f100 0304 	add.w	r3, r0, #4
 8005f66:	d50a      	bpl.n	8005f7e <_printf_i+0xce>
 8005f68:	6805      	ldr	r5, [r0, #0]
 8005f6a:	600b      	str	r3, [r1, #0]
 8005f6c:	2d00      	cmp	r5, #0
 8005f6e:	da03      	bge.n	8005f78 <_printf_i+0xc8>
 8005f70:	232d      	movs	r3, #45	; 0x2d
 8005f72:	426d      	negs	r5, r5
 8005f74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f78:	230a      	movs	r3, #10
 8005f7a:	485e      	ldr	r0, [pc, #376]	; (80060f4 <_printf_i+0x244>)
 8005f7c:	e019      	b.n	8005fb2 <_printf_i+0x102>
 8005f7e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005f82:	6805      	ldr	r5, [r0, #0]
 8005f84:	600b      	str	r3, [r1, #0]
 8005f86:	bf18      	it	ne
 8005f88:	b22d      	sxthne	r5, r5
 8005f8a:	e7ef      	b.n	8005f6c <_printf_i+0xbc>
 8005f8c:	680b      	ldr	r3, [r1, #0]
 8005f8e:	6825      	ldr	r5, [r4, #0]
 8005f90:	1d18      	adds	r0, r3, #4
 8005f92:	6008      	str	r0, [r1, #0]
 8005f94:	0628      	lsls	r0, r5, #24
 8005f96:	d501      	bpl.n	8005f9c <_printf_i+0xec>
 8005f98:	681d      	ldr	r5, [r3, #0]
 8005f9a:	e002      	b.n	8005fa2 <_printf_i+0xf2>
 8005f9c:	0669      	lsls	r1, r5, #25
 8005f9e:	d5fb      	bpl.n	8005f98 <_printf_i+0xe8>
 8005fa0:	881d      	ldrh	r5, [r3, #0]
 8005fa2:	2f6f      	cmp	r7, #111	; 0x6f
 8005fa4:	bf0c      	ite	eq
 8005fa6:	2308      	moveq	r3, #8
 8005fa8:	230a      	movne	r3, #10
 8005faa:	4852      	ldr	r0, [pc, #328]	; (80060f4 <_printf_i+0x244>)
 8005fac:	2100      	movs	r1, #0
 8005fae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005fb2:	6866      	ldr	r6, [r4, #4]
 8005fb4:	2e00      	cmp	r6, #0
 8005fb6:	bfa8      	it	ge
 8005fb8:	6821      	ldrge	r1, [r4, #0]
 8005fba:	60a6      	str	r6, [r4, #8]
 8005fbc:	bfa4      	itt	ge
 8005fbe:	f021 0104 	bicge.w	r1, r1, #4
 8005fc2:	6021      	strge	r1, [r4, #0]
 8005fc4:	b90d      	cbnz	r5, 8005fca <_printf_i+0x11a>
 8005fc6:	2e00      	cmp	r6, #0
 8005fc8:	d04d      	beq.n	8006066 <_printf_i+0x1b6>
 8005fca:	4616      	mov	r6, r2
 8005fcc:	fbb5 f1f3 	udiv	r1, r5, r3
 8005fd0:	fb03 5711 	mls	r7, r3, r1, r5
 8005fd4:	5dc7      	ldrb	r7, [r0, r7]
 8005fd6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005fda:	462f      	mov	r7, r5
 8005fdc:	42bb      	cmp	r3, r7
 8005fde:	460d      	mov	r5, r1
 8005fe0:	d9f4      	bls.n	8005fcc <_printf_i+0x11c>
 8005fe2:	2b08      	cmp	r3, #8
 8005fe4:	d10b      	bne.n	8005ffe <_printf_i+0x14e>
 8005fe6:	6823      	ldr	r3, [r4, #0]
 8005fe8:	07df      	lsls	r7, r3, #31
 8005fea:	d508      	bpl.n	8005ffe <_printf_i+0x14e>
 8005fec:	6923      	ldr	r3, [r4, #16]
 8005fee:	6861      	ldr	r1, [r4, #4]
 8005ff0:	4299      	cmp	r1, r3
 8005ff2:	bfde      	ittt	le
 8005ff4:	2330      	movle	r3, #48	; 0x30
 8005ff6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005ffa:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005ffe:	1b92      	subs	r2, r2, r6
 8006000:	6122      	str	r2, [r4, #16]
 8006002:	464b      	mov	r3, r9
 8006004:	4621      	mov	r1, r4
 8006006:	4640      	mov	r0, r8
 8006008:	f8cd a000 	str.w	sl, [sp]
 800600c:	aa03      	add	r2, sp, #12
 800600e:	f7ff fedf 	bl	8005dd0 <_printf_common>
 8006012:	3001      	adds	r0, #1
 8006014:	d14c      	bne.n	80060b0 <_printf_i+0x200>
 8006016:	f04f 30ff 	mov.w	r0, #4294967295
 800601a:	b004      	add	sp, #16
 800601c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006020:	4834      	ldr	r0, [pc, #208]	; (80060f4 <_printf_i+0x244>)
 8006022:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006026:	680e      	ldr	r6, [r1, #0]
 8006028:	6823      	ldr	r3, [r4, #0]
 800602a:	f856 5b04 	ldr.w	r5, [r6], #4
 800602e:	061f      	lsls	r7, r3, #24
 8006030:	600e      	str	r6, [r1, #0]
 8006032:	d514      	bpl.n	800605e <_printf_i+0x1ae>
 8006034:	07d9      	lsls	r1, r3, #31
 8006036:	bf44      	itt	mi
 8006038:	f043 0320 	orrmi.w	r3, r3, #32
 800603c:	6023      	strmi	r3, [r4, #0]
 800603e:	b91d      	cbnz	r5, 8006048 <_printf_i+0x198>
 8006040:	6823      	ldr	r3, [r4, #0]
 8006042:	f023 0320 	bic.w	r3, r3, #32
 8006046:	6023      	str	r3, [r4, #0]
 8006048:	2310      	movs	r3, #16
 800604a:	e7af      	b.n	8005fac <_printf_i+0xfc>
 800604c:	6823      	ldr	r3, [r4, #0]
 800604e:	f043 0320 	orr.w	r3, r3, #32
 8006052:	6023      	str	r3, [r4, #0]
 8006054:	2378      	movs	r3, #120	; 0x78
 8006056:	4828      	ldr	r0, [pc, #160]	; (80060f8 <_printf_i+0x248>)
 8006058:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800605c:	e7e3      	b.n	8006026 <_printf_i+0x176>
 800605e:	065e      	lsls	r6, r3, #25
 8006060:	bf48      	it	mi
 8006062:	b2ad      	uxthmi	r5, r5
 8006064:	e7e6      	b.n	8006034 <_printf_i+0x184>
 8006066:	4616      	mov	r6, r2
 8006068:	e7bb      	b.n	8005fe2 <_printf_i+0x132>
 800606a:	680b      	ldr	r3, [r1, #0]
 800606c:	6826      	ldr	r6, [r4, #0]
 800606e:	1d1d      	adds	r5, r3, #4
 8006070:	6960      	ldr	r0, [r4, #20]
 8006072:	600d      	str	r5, [r1, #0]
 8006074:	0635      	lsls	r5, r6, #24
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	d501      	bpl.n	800607e <_printf_i+0x1ce>
 800607a:	6018      	str	r0, [r3, #0]
 800607c:	e002      	b.n	8006084 <_printf_i+0x1d4>
 800607e:	0671      	lsls	r1, r6, #25
 8006080:	d5fb      	bpl.n	800607a <_printf_i+0x1ca>
 8006082:	8018      	strh	r0, [r3, #0]
 8006084:	2300      	movs	r3, #0
 8006086:	4616      	mov	r6, r2
 8006088:	6123      	str	r3, [r4, #16]
 800608a:	e7ba      	b.n	8006002 <_printf_i+0x152>
 800608c:	680b      	ldr	r3, [r1, #0]
 800608e:	1d1a      	adds	r2, r3, #4
 8006090:	600a      	str	r2, [r1, #0]
 8006092:	681e      	ldr	r6, [r3, #0]
 8006094:	2100      	movs	r1, #0
 8006096:	4630      	mov	r0, r6
 8006098:	6862      	ldr	r2, [r4, #4]
 800609a:	f000 f831 	bl	8006100 <memchr>
 800609e:	b108      	cbz	r0, 80060a4 <_printf_i+0x1f4>
 80060a0:	1b80      	subs	r0, r0, r6
 80060a2:	6060      	str	r0, [r4, #4]
 80060a4:	6863      	ldr	r3, [r4, #4]
 80060a6:	6123      	str	r3, [r4, #16]
 80060a8:	2300      	movs	r3, #0
 80060aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060ae:	e7a8      	b.n	8006002 <_printf_i+0x152>
 80060b0:	4632      	mov	r2, r6
 80060b2:	4649      	mov	r1, r9
 80060b4:	4640      	mov	r0, r8
 80060b6:	6923      	ldr	r3, [r4, #16]
 80060b8:	47d0      	blx	sl
 80060ba:	3001      	adds	r0, #1
 80060bc:	d0ab      	beq.n	8006016 <_printf_i+0x166>
 80060be:	6823      	ldr	r3, [r4, #0]
 80060c0:	079b      	lsls	r3, r3, #30
 80060c2:	d413      	bmi.n	80060ec <_printf_i+0x23c>
 80060c4:	68e0      	ldr	r0, [r4, #12]
 80060c6:	9b03      	ldr	r3, [sp, #12]
 80060c8:	4298      	cmp	r0, r3
 80060ca:	bfb8      	it	lt
 80060cc:	4618      	movlt	r0, r3
 80060ce:	e7a4      	b.n	800601a <_printf_i+0x16a>
 80060d0:	2301      	movs	r3, #1
 80060d2:	4632      	mov	r2, r6
 80060d4:	4649      	mov	r1, r9
 80060d6:	4640      	mov	r0, r8
 80060d8:	47d0      	blx	sl
 80060da:	3001      	adds	r0, #1
 80060dc:	d09b      	beq.n	8006016 <_printf_i+0x166>
 80060de:	3501      	adds	r5, #1
 80060e0:	68e3      	ldr	r3, [r4, #12]
 80060e2:	9903      	ldr	r1, [sp, #12]
 80060e4:	1a5b      	subs	r3, r3, r1
 80060e6:	42ab      	cmp	r3, r5
 80060e8:	dcf2      	bgt.n	80060d0 <_printf_i+0x220>
 80060ea:	e7eb      	b.n	80060c4 <_printf_i+0x214>
 80060ec:	2500      	movs	r5, #0
 80060ee:	f104 0619 	add.w	r6, r4, #25
 80060f2:	e7f5      	b.n	80060e0 <_printf_i+0x230>
 80060f4:	08006a2f 	.word	0x08006a2f
 80060f8:	08006a40 	.word	0x08006a40

080060fc <__retarget_lock_acquire_recursive>:
 80060fc:	4770      	bx	lr

080060fe <__retarget_lock_release_recursive>:
 80060fe:	4770      	bx	lr

08006100 <memchr>:
 8006100:	4603      	mov	r3, r0
 8006102:	b510      	push	{r4, lr}
 8006104:	b2c9      	uxtb	r1, r1
 8006106:	4402      	add	r2, r0
 8006108:	4293      	cmp	r3, r2
 800610a:	4618      	mov	r0, r3
 800610c:	d101      	bne.n	8006112 <memchr+0x12>
 800610e:	2000      	movs	r0, #0
 8006110:	e003      	b.n	800611a <memchr+0x1a>
 8006112:	7804      	ldrb	r4, [r0, #0]
 8006114:	3301      	adds	r3, #1
 8006116:	428c      	cmp	r4, r1
 8006118:	d1f6      	bne.n	8006108 <memchr+0x8>
 800611a:	bd10      	pop	{r4, pc}

0800611c <memcpy>:
 800611c:	440a      	add	r2, r1
 800611e:	4291      	cmp	r1, r2
 8006120:	f100 33ff 	add.w	r3, r0, #4294967295
 8006124:	d100      	bne.n	8006128 <memcpy+0xc>
 8006126:	4770      	bx	lr
 8006128:	b510      	push	{r4, lr}
 800612a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800612e:	4291      	cmp	r1, r2
 8006130:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006134:	d1f9      	bne.n	800612a <memcpy+0xe>
 8006136:	bd10      	pop	{r4, pc}

08006138 <memmove>:
 8006138:	4288      	cmp	r0, r1
 800613a:	b510      	push	{r4, lr}
 800613c:	eb01 0402 	add.w	r4, r1, r2
 8006140:	d902      	bls.n	8006148 <memmove+0x10>
 8006142:	4284      	cmp	r4, r0
 8006144:	4623      	mov	r3, r4
 8006146:	d807      	bhi.n	8006158 <memmove+0x20>
 8006148:	1e43      	subs	r3, r0, #1
 800614a:	42a1      	cmp	r1, r4
 800614c:	d008      	beq.n	8006160 <memmove+0x28>
 800614e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006152:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006156:	e7f8      	b.n	800614a <memmove+0x12>
 8006158:	4601      	mov	r1, r0
 800615a:	4402      	add	r2, r0
 800615c:	428a      	cmp	r2, r1
 800615e:	d100      	bne.n	8006162 <memmove+0x2a>
 8006160:	bd10      	pop	{r4, pc}
 8006162:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006166:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800616a:	e7f7      	b.n	800615c <memmove+0x24>

0800616c <_realloc_r>:
 800616c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800616e:	4607      	mov	r7, r0
 8006170:	4614      	mov	r4, r2
 8006172:	460e      	mov	r6, r1
 8006174:	b921      	cbnz	r1, 8006180 <_realloc_r+0x14>
 8006176:	4611      	mov	r1, r2
 8006178:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800617c:	f7ff bbdc 	b.w	8005938 <_malloc_r>
 8006180:	b922      	cbnz	r2, 800618c <_realloc_r+0x20>
 8006182:	f7ff fb8d 	bl	80058a0 <_free_r>
 8006186:	4625      	mov	r5, r4
 8006188:	4628      	mov	r0, r5
 800618a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800618c:	f000 f814 	bl	80061b8 <_malloc_usable_size_r>
 8006190:	42a0      	cmp	r0, r4
 8006192:	d20f      	bcs.n	80061b4 <_realloc_r+0x48>
 8006194:	4621      	mov	r1, r4
 8006196:	4638      	mov	r0, r7
 8006198:	f7ff fbce 	bl	8005938 <_malloc_r>
 800619c:	4605      	mov	r5, r0
 800619e:	2800      	cmp	r0, #0
 80061a0:	d0f2      	beq.n	8006188 <_realloc_r+0x1c>
 80061a2:	4631      	mov	r1, r6
 80061a4:	4622      	mov	r2, r4
 80061a6:	f7ff ffb9 	bl	800611c <memcpy>
 80061aa:	4631      	mov	r1, r6
 80061ac:	4638      	mov	r0, r7
 80061ae:	f7ff fb77 	bl	80058a0 <_free_r>
 80061b2:	e7e9      	b.n	8006188 <_realloc_r+0x1c>
 80061b4:	4635      	mov	r5, r6
 80061b6:	e7e7      	b.n	8006188 <_realloc_r+0x1c>

080061b8 <_malloc_usable_size_r>:
 80061b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061bc:	1f18      	subs	r0, r3, #4
 80061be:	2b00      	cmp	r3, #0
 80061c0:	bfbc      	itt	lt
 80061c2:	580b      	ldrlt	r3, [r1, r0]
 80061c4:	18c0      	addlt	r0, r0, r3
 80061c6:	4770      	bx	lr

080061c8 <_init>:
 80061c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ca:	bf00      	nop
 80061cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061ce:	bc08      	pop	{r3}
 80061d0:	469e      	mov	lr, r3
 80061d2:	4770      	bx	lr

080061d4 <_fini>:
 80061d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061d6:	bf00      	nop
 80061d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061da:	bc08      	pop	{r3}
 80061dc:	469e      	mov	lr, r3
 80061de:	4770      	bx	lr
